
/Users/chipmc/Documents/Maker/Particle/Utilities/Trashcan-Panda-i2c-Test/target/2.3.0/boron/Trashcan-Panda-i2c-Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00004cc4  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d8ce0  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000007c  2003e420  000d8ce4  0001e420  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000354  2003e4a0  2003e4a0  0002e4a0  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d8d60  000d8d60  00028d60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d8d88  000d8d88  00028d88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   00191b67  00000000  00000000  00028d8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00019895  00000000  00000000  001ba8f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000311b0  00000000  00000000  001d4188  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002fe0  00000000  00000000  00205338  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00007ec0  00000000  00000000  00208318  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003cb00  00000000  00000000  002101d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00041e3e  00000000  00000000  0024ccd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010eb72  00000000  00000000  0028eb16  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008664  00000000  00000000  0039d688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 ff8b 	bl	d7f48 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 ffad 	bl	d7f98 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e420 	.word	0x2003e420
   d4048:	000d8ce4 	.word	0x000d8ce4
   d404c:	2003e49c 	.word	0x2003e49c
   d4050:	2003e4a0 	.word	0x2003e4a0
   d4054:	2003e7f1 	.word	0x2003e7f1

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405a:	4e07      	ldr	r6, [pc, #28]	; (d4078 <module_user_init+0x20>)
   d405c:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
    module_user_init_hook();
   d405e:	f003 fe57 	bl	d7d10 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4062:	1ba4      	subs	r4, r4, r6
   d4064:	08a4      	lsrs	r4, r4, #2
   d4066:	2500      	movs	r5, #0
   d4068:	42a5      	cmp	r5, r4
   d406a:	d100      	bne.n	d406e <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d406c:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d406e:	f856 3b04 	ldr.w	r3, [r6], #4
   d4072:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f7      	b.n	d4068 <module_user_init+0x10>
   d4078:	000d8cac 	.word	0x000d8cac
   d407c:	000d8cd4 	.word	0x000d8cd4

000d4080 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4080:	f000 b9a6 	b.w	d43d0 <setup>

000d4084 <module_user_loop>:
}

void module_user_loop() {
   d4084:	b508      	push	{r3, lr}
    loop();
   d4086:	f000 f8c1 	bl	d420c <loop>
    _post_loop();
}
   d408a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d408e:	f003 bdf7 	b.w	d7c80 <_post_loop>

000d4092 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4092:	f001 bdc7 	b.w	d5c24 <malloc>

000d4096 <_Znaj>:
   d4096:	f001 bdc5 	b.w	d5c24 <malloc>

000d409a <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409a:	f001 bdcb 	b.w	d5c34 <free>
	...

000d40a0 <__cxa_pure_virtual>:
char* strerror(int errnum) {
    return (char*)"";
}

/* Default implementation for call made to pure virtual function. */
void __cxa_pure_virtual() {
   d40a0:	b508      	push	{r3, lr}
  PANIC(PureVirtualCall,"Call on pure virtual");
   d40a2:	4a03      	ldr	r2, [pc, #12]	; (d40b0 <__cxa_pure_virtual+0x10>)
   d40a4:	2100      	movs	r1, #0
   d40a6:	200c      	movs	r0, #12
   d40a8:	f001 fcd0 	bl	d5a4c <panic_>
  while (1);
   d40ac:	e7fe      	b.n	d40ac <__cxa_pure_virtual+0xc>
   d40ae:	bf00      	nop
   d40b0:	000d578d 	.word	0x000d578d

000d40b4 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40b4:	7800      	ldrb	r0, [r0, #0]
   d40b6:	fab0 f080 	clz	r0, r0
   d40ba:	0940      	lsrs	r0, r0, #5
   d40bc:	4770      	bx	lr

000d40be <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40be:	2301      	movs	r3, #1
   d40c0:	7003      	strb	r3, [r0, #0]
   d40c2:	4770      	bx	lr

000d40c4 <_ZN5spark10LogHandler5writeEPKcj>:
    }
}

inline void spark::LogHandler::write(const char *data, size_t size) {
    // Default implementation does nothing
}
   d40c4:	4770      	bx	lr

000d40c6 <_ZN5spark16StreamLogHandler5writeEPKcj>:
inline Print* spark::StreamLogHandler::stream() const {
    return stream_;
}

inline void spark::StreamLogHandler::write(const char *data, size_t size) {
    stream_->write((const uint8_t*)data, size);
   d40c6:	6a00      	ldr	r0, [r0, #32]
   d40c8:	6803      	ldr	r3, [r0, #0]
   d40ca:	68db      	ldr	r3, [r3, #12]
   d40cc:	4718      	bx	r3
	...

000d40d0 <_ZN8MB85RC64D1Ev>:
	size_t memorySize;
	int addr; // This is just 0-7, the (0b1010000 of the 7-bit address is ORed in later)

};

class MB85RC64 : public MB85RC {
   d40d0:	b510      	push	{r4, lr}
   d40d2:	4b03      	ldr	r3, [pc, #12]	; (d40e0 <_ZN8MB85RC64D1Ev+0x10>)
   d40d4:	6003      	str	r3, [r0, #0]
   d40d6:	4604      	mov	r4, r0
   d40d8:	f001 f9ec 	bl	d54b4 <_ZN6MB85RCD1Ev>
   d40dc:	4620      	mov	r0, r4
   d40de:	bd10      	pop	{r4, pc}
   d40e0:	000d8618 	.word	0x000d8618

000d40e4 <_ZN8MB85RC64D0Ev>:
   d40e4:	b510      	push	{r4, lr}
   d40e6:	4604      	mov	r4, r0
   d40e8:	f7ff fff2 	bl	d40d0 <_ZN8MB85RC64D1Ev>
   d40ec:	4620      	mov	r0, r4
   d40ee:	2110      	movs	r1, #16
   d40f0:	f003 fef8 	bl	d7ee4 <_ZdlPvj>
   d40f4:	4620      	mov	r0, r4
   d40f6:	bd10      	pop	{r4, pc}

000d40f8 <_ZN5spark16SerialLogHandlerD1Ev>:
            StreamLogHandler(Serial, level, filters) {
        Serial.begin(baud);
        LogManager::instance()->addHandler(this);
    }

    virtual ~SerialLogHandler() {
   d40f8:	4b0a      	ldr	r3, [pc, #40]	; (d4124 <_ZN5spark16SerialLogHandlerD1Ev+0x2c>)
   d40fa:	b510      	push	{r4, lr}
   d40fc:	4604      	mov	r4, r0
   d40fe:	6003      	str	r3, [r0, #0]
        LogManager::instance()->removeHandler(this);
   d4100:	f002 fac0 	bl	d6684 <_ZN5spark10LogManager8instanceEv>
   d4104:	4621      	mov	r1, r4
   d4106:	f002 fcbe 	bl	d6a86 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>
        Serial.end();
   d410a:	f003 fd71 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d410e:	f003 fd63 	bl	d7bd8 <_ZN9USBSerial3endEv>
    virtual ~LogHandler() = default;
   d4112:	4620      	mov	r0, r4
   d4114:	4b04      	ldr	r3, [pc, #16]	; (d4128 <_ZN5spark16SerialLogHandlerD1Ev+0x30>)
   d4116:	f840 3b04 	str.w	r3, [r0], #4
   d411a:	f002 fba1 	bl	d6860 <_ZN5spark6detail9LogFilterD1Ev>
    }
   d411e:	4620      	mov	r0, r4
   d4120:	bd10      	pop	{r4, pc}
   d4122:	bf00      	nop
   d4124:	000d8600 	.word	0x000d8600
   d4128:	000d85e8 	.word	0x000d85e8

000d412c <_ZN5spark16SerialLogHandlerD0Ev>:
    virtual ~SerialLogHandler() {
   d412c:	b510      	push	{r4, lr}
   d412e:	4604      	mov	r4, r0
    }
   d4130:	f7ff ffe2 	bl	d40f8 <_ZN5spark16SerialLogHandlerD1Ev>
   d4134:	4620      	mov	r0, r4
   d4136:	2124      	movs	r1, #36	; 0x24
   d4138:	f003 fed4 	bl	d7ee4 <_ZdlPvj>
   d413c:	4620      	mov	r0, r4
   d413e:	bd10      	pop	{r4, pc}

000d4140 <_ZNK5spark6Logger4infoEPKcz>:
    va_start(args, fmt);
    log(LOG_LEVEL_TRACE, fmt, args);
    va_end(args);
}

inline void spark::Logger::info(const char *fmt, ...) const {
   d4140:	b40e      	push	{r1, r2, r3}
   d4142:	b510      	push	{r4, lr}
   d4144:	b08d      	sub	sp, #52	; 0x34
   d4146:	aa0f      	add	r2, sp, #60	; 0x3c
    va_list args;
    va_start(args, fmt);
    log(LOG_LEVEL_INFO, fmt, args);
   d4148:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::info(const char *fmt, ...) const {
   d414a:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d414e:	9203      	str	r2, [sp, #12]
}

inline void spark::Logger::log(LogLevel level, const char *fmt, va_list args) const {
    LogAttributes attr;
    attr.size = sizeof(LogAttributes);
    attr.flags = 0;
   d4150:	2300      	movs	r3, #0
   d4152:	2020      	movs	r0, #32
   d4154:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4158:	e9cd 4200 	strd	r4, r2, [sp]
   d415c:	201e      	movs	r0, #30
   d415e:	aa04      	add	r2, sp, #16
   d4160:	f001 fc7c 	bl	d5a5c <log_message_v>
}
   d4164:	b00d      	add	sp, #52	; 0x34
   d4166:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d416a:	b003      	add	sp, #12
   d416c:	4770      	bx	lr
	...

000d4170 <_Z7i2cScanv>:

}

}

bool i2cScan() {                                            // Scan the i2c bus and publish the list of devices found
   d4170:	b570      	push	{r4, r5, r6, lr}
   d4172:	b0a2      	sub	sp, #136	; 0x88
	byte error, address;
	int nDevices = 0;
  char resultStr[128];
  strncpy(resultStr,"i2c device(s) found at: ",sizeof(resultStr));
   d4174:	4920      	ldr	r1, [pc, #128]	; (d41f8 <_Z7i2cScanv+0x88>)
		error = Wire.endTransmission();

		if (error == 0)
		{
      char tempString[4];
      snprintf(tempString, sizeof(tempString), "%02X ",address);
   d4176:	4e21      	ldr	r6, [pc, #132]	; (d41fc <_Z7i2cScanv+0x8c>)
  strncpy(resultStr,"i2c device(s) found at: ",sizeof(resultStr));
   d4178:	2280      	movs	r2, #128	; 0x80
   d417a:	a802      	add	r0, sp, #8
   d417c:	f003 ff8e 	bl	d809c <strncpy>
   d4180:	2501      	movs	r5, #1
	int nDevices = 0;
   d4182:	2400      	movs	r4, #0
		Wire.beginTransmission(address);
   d4184:	f003 fe8a 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d4188:	b2e9      	uxtb	r1, r5
   d418a:	f001 fec3 	bl	d5f14 <_ZN7TwoWire17beginTransmissionEh>
		error = Wire.endTransmission();
   d418e:	f003 fe85 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d4192:	f001 feca 	bl	d5f2a <_ZN7TwoWire15endTransmissionEv>
		if (error == 0)
   d4196:	b9a8      	cbnz	r0, d41c4 <_Z7i2cScanv+0x54>
      snprintf(tempString, sizeof(tempString), "%02X ",address);
   d4198:	2104      	movs	r1, #4
   d419a:	462b      	mov	r3, r5
   d419c:	4632      	mov	r2, r6
   d419e:	eb0d 0001 	add.w	r0, sp, r1
   d41a2:	f001 fd5f 	bl	d5c64 <snprintf>
      strncat(resultStr,tempString,4);
   d41a6:	2204      	movs	r2, #4
   d41a8:	eb0d 0102 	add.w	r1, sp, r2
   d41ac:	a802      	add	r0, sp, #8
			nDevices++;
   d41ae:	3401      	adds	r4, #1
      strncat(resultStr,tempString,4);
   d41b0:	f003 ff4f 	bl	d8052 <strncat>
      if (nDevices == 9) break;                    // All we have space to report in resultStr
   d41b4:	2c09      	cmp	r4, #9
   d41b6:	d114      	bne.n	d41e2 <_Z7i2cScanv+0x72>
    snprintf(resultStr,sizeof(resultStr),"No I2C devices found");
    Log.info(resultStr);
    return 0;
  }

  Log.info(resultStr);
   d41b8:	4811      	ldr	r0, [pc, #68]	; (d4200 <_Z7i2cScanv+0x90>)
   d41ba:	a902      	add	r1, sp, #8
   d41bc:	f7ff ffc0 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  return 1;
   d41c0:	2001      	movs	r0, #1
   d41c2:	e00c      	b.n	d41de <_Z7i2cScanv+0x6e>
		else if (error==4) {
   d41c4:	2804      	cmp	r0, #4
   d41c6:	d10c      	bne.n	d41e2 <_Z7i2cScanv+0x72>
      snprintf(resultStr,sizeof(resultStr),"Unknown error at address %02X", address);
   d41c8:	4a0e      	ldr	r2, [pc, #56]	; (d4204 <_Z7i2cScanv+0x94>)
   d41ca:	462b      	mov	r3, r5
   d41cc:	2180      	movs	r1, #128	; 0x80
   d41ce:	a802      	add	r0, sp, #8
   d41d0:	f001 fd48 	bl	d5c64 <snprintf>
      Log.info(resultStr);
   d41d4:	480a      	ldr	r0, [pc, #40]	; (d4200 <_Z7i2cScanv+0x90>)
   d41d6:	a902      	add	r1, sp, #8
   d41d8:	f7ff ffb2 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
      return 0;
   d41dc:	2000      	movs	r0, #0
   d41de:	b022      	add	sp, #136	; 0x88
   d41e0:	bd70      	pop	{r4, r5, r6, pc}
	for(address = 1; address < 127; address++ )
   d41e2:	3501      	adds	r5, #1
   d41e4:	2d7f      	cmp	r5, #127	; 0x7f
   d41e6:	d1cd      	bne.n	d4184 <_Z7i2cScanv+0x14>
	if (nDevices == 0) {
   d41e8:	2c00      	cmp	r4, #0
   d41ea:	d1e5      	bne.n	d41b8 <_Z7i2cScanv+0x48>
    snprintf(resultStr,sizeof(resultStr),"No I2C devices found");
   d41ec:	4906      	ldr	r1, [pc, #24]	; (d4208 <_Z7i2cScanv+0x98>)
   d41ee:	a802      	add	r0, sp, #8
   d41f0:	f003 ff1f 	bl	d8032 <strcpy>
    Log.info(resultStr);
   d41f4:	e7ee      	b.n	d41d4 <_Z7i2cScanv+0x64>
   d41f6:	bf00      	nop
   d41f8:	000d82d4 	.word	0x000d82d4
   d41fc:	000d82ed 	.word	0x000d82ed
   d4200:	2003e584 	.word	0x2003e584
   d4204:	000d82f3 	.word	0x000d82f3
   d4208:	000d8311 	.word	0x000d8311

000d420c <loop>:
void loop() {
   d420c:	b510      	push	{r4, lr}
if (millis() - lastSampleTimestamp > sampleRateMillis) {
   d420e:	4c58      	ldr	r4, [pc, #352]	; (d4370 <loop+0x164>)
void loop() {
   d4210:	b088      	sub	sp, #32

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4212:	f001 fac3 	bl	d579c <HAL_Timer_Get_Milli_Seconds>
if (millis() - lastSampleTimestamp > sampleRateMillis) {
   d4216:	6823      	ldr	r3, [r4, #0]
   d4218:	1ac0      	subs	r0, r0, r3
   d421a:	4b56      	ldr	r3, [pc, #344]	; (d4374 <loop+0x168>)
   d421c:	681b      	ldr	r3, [r3, #0]
   d421e:	4298      	cmp	r0, r3
   d4220:	d934      	bls.n	d428c <loop+0x80>
   d4222:	f001 fabb 	bl	d579c <HAL_Timer_Get_Milli_Seconds>
  if (sensorOnlineTOF) {
   d4226:	4b54      	ldr	r3, [pc, #336]	; (d4378 <loop+0x16c>)
  lastSampleTimestamp = millis();
   d4228:	6020      	str	r0, [r4, #0]
  if (sensorOnlineTOF) {
   d422a:	781b      	ldrb	r3, [r3, #0]
   d422c:	b1d3      	cbz	r3, d4264 <loop+0x58>
    distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
   d422e:	4853      	ldr	r0, [pc, #332]	; (d437c <loop+0x170>)
    while (!distanceSensor.checkForDataReady())
   d4230:	4c52      	ldr	r4, [pc, #328]	; (d437c <loop+0x170>)
    distanceSensor.startRanging(); //Write configuration bytes to initiate measurement
   d4232:	f000 fc6c 	bl	d4b0e <_ZN10SFEVL53L1X12startRangingEv>
    while (!distanceSensor.checkForDataReady())
   d4236:	4620      	mov	r0, r4
   d4238:	f000 fc6f 	bl	d4b1a <_ZN10SFEVL53L1X17checkForDataReadyEv>
   d423c:	b918      	cbnz	r0, d4246 <loop+0x3a>
      delay(1);
   d423e:	2001      	movs	r0, #1
   d4240:	f001 fd40 	bl	d5cc4 <delay>
    while (!distanceSensor.checkForDataReady())
   d4244:	e7f7      	b.n	d4236 <loop+0x2a>
    int distance = distanceSensor.getDistance(); //Get the result of the measurement from the sensor
   d4246:	484d      	ldr	r0, [pc, #308]	; (d437c <loop+0x170>)
   d4248:	f000 fc75 	bl	d4b36 <_ZN10SFEVL53L1X11getDistanceEv>
   d424c:	9003      	str	r0, [sp, #12]
    distanceSensor.clearInterrupt();
   d424e:	484b      	ldr	r0, [pc, #300]	; (d437c <loop+0x170>)
   d4250:	f000 fc5a 	bl	d4b08 <_ZN10SFEVL53L1X14clearInterruptEv>
    distanceSensor.stopRanging();
   d4254:	4849      	ldr	r0, [pc, #292]	; (d437c <loop+0x170>)
   d4256:	f000 fc5d 	bl	d4b14 <_ZN10SFEVL53L1X11stopRangingEv>
    Log.info("Distance measured = %i",distance);
   d425a:	9a03      	ldr	r2, [sp, #12]
   d425c:	4948      	ldr	r1, [pc, #288]	; (d4380 <loop+0x174>)
   d425e:	4849      	ldr	r0, [pc, #292]	; (d4384 <loop+0x178>)
   d4260:	f7ff ff6e 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  if (sensorOnlineLIS3DH) {
   d4264:	4b48      	ldr	r3, [pc, #288]	; (d4388 <loop+0x17c>)
   d4266:	781b      	ldrb	r3, [r3, #0]
   d4268:	b183      	cbz	r3, d428c <loop+0x80>
		if (accel.getSample(sample)) {
   d426a:	4848      	ldr	r0, [pc, #288]	; (d438c <loop+0x180>)
   d426c:	a905      	add	r1, sp, #20
   d426e:	f000 fb22 	bl	d48b6 <_ZN6LIS3DH9getSampleER12LIS3DHSample>
   d4272:	2800      	cmp	r0, #0
   d4274:	d067      	beq.n	d4346 <loop+0x13a>
			Log.info("%d,%d,%d", sample.x, sample.y, sample.z);
   d4276:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
   d427a:	9300      	str	r3, [sp, #0]
   d427c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
   d4280:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
   d4284:	4942      	ldr	r1, [pc, #264]	; (d4390 <loop+0x184>)
   d4286:	483f      	ldr	r0, [pc, #252]	; (d4384 <loop+0x178>)
   d4288:	f7ff ff5a 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
if (powerCycleOnce) {
   d428c:	4b41      	ldr	r3, [pc, #260]	; (d4394 <loop+0x188>)
   d428e:	781a      	ldrb	r2, [r3, #0]
   d4290:	2a00      	cmp	r2, #0
   d4292:	d056      	beq.n	d4342 <loop+0x136>
  powerCycleOnce = false;                                   // Only do this test once
   d4294:	2200      	movs	r2, #0
  Log.info("Devices on line with power");
   d4296:	4940      	ldr	r1, [pc, #256]	; (d4398 <loop+0x18c>)
   d4298:	483a      	ldr	r0, [pc, #232]	; (d4384 <loop+0x178>)
  powerCycleOnce = false;                                   // Only do this test once
   d429a:	701a      	strb	r2, [r3, #0]
  Log.info("Devices on line with power");
   d429c:	f7ff ff50 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  i2cScan();
   d42a0:	f7ff ff66 	bl	d4170 <_Z7i2cScanv>
  Log.info("Powering down the sensor board");
   d42a4:	493d      	ldr	r1, [pc, #244]	; (d439c <loop+0x190>)
   d42a6:	4837      	ldr	r0, [pc, #220]	; (d4384 <loop+0x178>)
   d42a8:	f7ff ff4a 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  digitalWrite(disableModule,true);                         // Powers down the board
   d42ac:	2101      	movs	r1, #1
   d42ae:	2002      	movs	r0, #2
   d42b0:	f003 fdaf 	bl	d7e12 <digitalWrite>
  delay(1000);                                              // Discharge the bypass caps
   d42b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d42b8:	f001 fd04 	bl	d5cc4 <delay>
  Log.info("Devices on-line without power");
   d42bc:	4938      	ldr	r1, [pc, #224]	; (d43a0 <loop+0x194>)
   d42be:	4831      	ldr	r0, [pc, #196]	; (d4384 <loop+0x178>)
   d42c0:	f7ff ff3e 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  i2cScan();
   d42c4:	f7ff ff54 	bl	d4170 <_Z7i2cScanv>
  if (ab1805.detectChip()) Log.info("AB1805 detected");
   d42c8:	4836      	ldr	r0, [pc, #216]	; (d43a4 <loop+0x198>)
   d42ca:	f000 fdfd 	bl	d4ec8 <_ZN6AB180510detectChipEv>
   d42ce:	b118      	cbz	r0, d42d8 <loop+0xcc>
   d42d0:	4935      	ldr	r1, [pc, #212]	; (d43a8 <loop+0x19c>)
   d42d2:	482c      	ldr	r0, [pc, #176]	; (d4384 <loop+0x178>)
   d42d4:	f7ff ff34 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  Log.info("Bringing sensors back on-line");
   d42d8:	4934      	ldr	r1, [pc, #208]	; (d43ac <loop+0x1a0>)
   d42da:	482a      	ldr	r0, [pc, #168]	; (d4384 <loop+0x178>)
   d42dc:	4c2a      	ldr	r4, [pc, #168]	; (d4388 <loop+0x17c>)
   d42de:	f7ff ff2f 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  digitalWrite(disableModule,false);
   d42e2:	2100      	movs	r1, #0
   d42e4:	2002      	movs	r0, #2
   d42e6:	f003 fd94 	bl	d7e12 <digitalWrite>
  Log.info("Devices on-line with power restored");
   d42ea:	4931      	ldr	r1, [pc, #196]	; (d43b0 <loop+0x1a4>)
   d42ec:	4825      	ldr	r0, [pc, #148]	; (d4384 <loop+0x178>)
   d42ee:	f7ff ff27 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  i2cScan();
   d42f2:	f7ff ff3d 	bl	d4170 <_Z7i2cScanv>
  LIS3DHConfig config;
   d42f6:	a805      	add	r0, sp, #20
   d42f8:	f000 faab 	bl	d4852 <_ZN12LIS3DHConfigC1Ev>
  config.setAccelMode(LIS3DH::RATE_100_HZ);
   d42fc:	2150      	movs	r1, #80	; 0x50
   d42fe:	a805      	add	r0, sp, #20
   d4300:	f000 fab4 	bl	d486c <_ZN12LIS3DHConfig12setAccelModeEh>
	bool setupSuccess = accel.setup(config);
   d4304:	4821      	ldr	r0, [pc, #132]	; (d438c <loop+0x180>)
   d4306:	a905      	add	r1, sp, #20
   d4308:	f000 fb0c 	bl	d4924 <_ZN6LIS3DH5setupER12LIS3DHConfig>
  if (setupSuccess) {
   d430c:	b308      	cbz	r0, d4352 <loop+0x146>
    Log.info("LIS3DH Initialized successfully");
   d430e:	4929      	ldr	r1, [pc, #164]	; (d43b4 <loop+0x1a8>)
   d4310:	481c      	ldr	r0, [pc, #112]	; (d4384 <loop+0x178>)
   d4312:	f7ff ff15 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    sensorOnlineLIS3DH = true;
   d4316:	2301      	movs	r3, #1
   d4318:	7023      	strb	r3, [r4, #0]
  if (distanceSensor.begin() == 0) {
   d431a:	4818      	ldr	r0, [pc, #96]	; (d437c <loop+0x170>)
   d431c:	f000 fbe6 	bl	d4aec <_ZN10SFEVL53L1X5beginEv>
   d4320:	b9e0      	cbnz	r0, d435c <loop+0x150>
    Log.info("TOF Sensor Initialized successfully");
   d4322:	4925      	ldr	r1, [pc, #148]	; (d43b8 <loop+0x1ac>)
   d4324:	4817      	ldr	r0, [pc, #92]	; (d4384 <loop+0x178>)
   d4326:	f7ff ff0b 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    sensorOnlineTOF = true;
   d432a:	4b13      	ldr	r3, [pc, #76]	; (d4378 <loop+0x16c>)
   d432c:	2201      	movs	r2, #1
   d432e:	701a      	strb	r2, [r3, #0]
  if (sensorOnlineLIS3DH && sensorOnlineTOF) {
   d4330:	7823      	ldrb	r3, [r4, #0]
   d4332:	b1c3      	cbz	r3, d4366 <loop+0x15a>
   d4334:	4b10      	ldr	r3, [pc, #64]	; (d4378 <loop+0x16c>)
   d4336:	781b      	ldrb	r3, [r3, #0]
   d4338:	b1ab      	cbz	r3, d4366 <loop+0x15a>
    Log.info("Power on test complete - measuring resumed");
   d433a:	4920      	ldr	r1, [pc, #128]	; (d43bc <loop+0x1b0>)
   d433c:	4811      	ldr	r0, [pc, #68]	; (d4384 <loop+0x178>)
   d433e:	f7ff feff 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
}
   d4342:	b008      	add	sp, #32
   d4344:	bd10      	pop	{r4, pc}
			Serial.println("no sample");
   d4346:	f003 fc53 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d434a:	491d      	ldr	r1, [pc, #116]	; (d43c0 <loop+0x1b4>)
   d434c:	f003 f8f7 	bl	d753e <_ZN5Print7printlnEPKc>
   d4350:	e79c      	b.n	d428c <loop+0x80>
  else Log.info("LIS3DH failed initialization");
   d4352:	491c      	ldr	r1, [pc, #112]	; (d43c4 <loop+0x1b8>)
   d4354:	480b      	ldr	r0, [pc, #44]	; (d4384 <loop+0x178>)
   d4356:	f7ff fef3 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d435a:	e7de      	b.n	d431a <loop+0x10e>
  else Log.info("TOF Sensor failed initialization");
   d435c:	491a      	ldr	r1, [pc, #104]	; (d43c8 <loop+0x1bc>)
   d435e:	4809      	ldr	r0, [pc, #36]	; (d4384 <loop+0x178>)
   d4360:	f7ff feee 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d4364:	e7e4      	b.n	d4330 <loop+0x124>
    Log.info("Power on test failed - stopping");
   d4366:	4919      	ldr	r1, [pc, #100]	; (d43cc <loop+0x1c0>)
   d4368:	4806      	ldr	r0, [pc, #24]	; (d4384 <loop+0x178>)
   d436a:	f7ff fee9 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    while(1);
   d436e:	e7fe      	b.n	d436e <loop+0x162>
   d4370:	2003e508 	.word	0x2003e508
   d4374:	2003e424 	.word	0x2003e424
   d4378:	2003e531 	.word	0x2003e531
   d437c:	2003e4e4 	.word	0x2003e4e4
   d4380:	000d8326 	.word	0x000d8326
   d4384:	2003e584 	.word	0x2003e584
   d4388:	2003e530 	.word	0x2003e530
   d438c:	2003e4cc 	.word	0x2003e4cc
   d4390:	000d833d 	.word	0x000d833d
   d4394:	2003e420 	.word	0x2003e420
   d4398:	000d8350 	.word	0x000d8350
   d439c:	000d836b 	.word	0x000d836b
   d43a0:	000d838a 	.word	0x000d838a
   d43a4:	2003e4ac 	.word	0x2003e4ac
   d43a8:	000d83a8 	.word	0x000d83a8
   d43ac:	000d83b8 	.word	0x000d83b8
   d43b0:	000d83d6 	.word	0x000d83d6
   d43b4:	000d83fa 	.word	0x000d83fa
   d43b8:	000d8437 	.word	0x000d8437
   d43bc:	000d847c 	.word	0x000d847c
   d43c0:	000d8346 	.word	0x000d8346
   d43c4:	000d841a 	.word	0x000d841a
   d43c8:	000d845b 	.word	0x000d845b
   d43cc:	000d84a7 	.word	0x000d84a7

000d43d0 <setup>:
void setup() {
   d43d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  Wire.begin();
   d43d2:	f003 fd63 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d43d6:	f001 fd6b 	bl	d5eb0 <_ZN7TwoWire5beginEv>
  pinMode(intPin,INPUT);
   d43da:	2100      	movs	r1, #0
   d43dc:	2003      	movs	r0, #3
   d43de:	f003 fd07 	bl	d7df0 <pinMode>
  pinMode(disableModule,OUTPUT);
   d43e2:	2101      	movs	r1, #1
   d43e4:	2002      	movs	r0, #2
   d43e6:	f003 fd03 	bl	d7df0 <pinMode>
  digitalWrite(disableModule,LOW);
   d43ea:	2100      	movs	r1, #0
   d43ec:	2002      	movs	r0, #2
   d43ee:	f003 fd10 	bl	d7e12 <digitalWrite>
  delay(1000);
   d43f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d43f6:	f001 fc65 	bl	d5cc4 <delay>
  i2cScan();
   d43fa:	f7ff feb9 	bl	d4170 <_Z7i2cScanv>
	LIS3DHConfig config;
   d43fe:	a801      	add	r0, sp, #4
   d4400:	f000 fa27 	bl	d4852 <_ZN12LIS3DHConfigC1Ev>
	config.setAccelMode(LIS3DH::RATE_100_HZ);
   d4404:	2150      	movs	r1, #80	; 0x50
   d4406:	a801      	add	r0, sp, #4
   d4408:	f000 fa30 	bl	d486c <_ZN12LIS3DHConfig12setAccelModeEh>
	bool setupSuccess = accel.setup(config);
   d440c:	484d      	ldr	r0, [pc, #308]	; (d4544 <setup+0x174>)
   d440e:	4e4e      	ldr	r6, [pc, #312]	; (d4548 <setup+0x178>)
   d4410:	a901      	add	r1, sp, #4
   d4412:	f000 fa87 	bl	d4924 <_ZN6LIS3DH5setupER12LIS3DHConfig>
  if (setupSuccess) {
   d4416:	2800      	cmp	r0, #0
   d4418:	d071      	beq.n	d44fe <setup+0x12e>
    Log.info("LIS3DH Initialized successfully");
   d441a:	494c      	ldr	r1, [pc, #304]	; (d454c <setup+0x17c>)
   d441c:	484c      	ldr	r0, [pc, #304]	; (d4550 <setup+0x180>)
   d441e:	f7ff fe8f 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    sensorOnlineLIS3DH = true;
   d4422:	2301      	movs	r3, #1
   d4424:	7033      	strb	r3, [r6, #0]
  if (distanceSensor.begin() == 0) {
   d4426:	484b      	ldr	r0, [pc, #300]	; (d4554 <setup+0x184>)
   d4428:	f000 fb60 	bl	d4aec <_ZN10SFEVL53L1X5beginEv>
   d442c:	2800      	cmp	r0, #0
   d442e:	d16b      	bne.n	d4508 <setup+0x138>
    Log.info("TOF Sensor Initialized successfully");
   d4430:	4949      	ldr	r1, [pc, #292]	; (d4558 <setup+0x188>)
   d4432:	4847      	ldr	r0, [pc, #284]	; (d4550 <setup+0x180>)
   d4434:	f7ff fe84 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    sensorOnlineTOF = true;
   d4438:	4b48      	ldr	r3, [pc, #288]	; (d455c <setup+0x18c>)
   d443a:	2201      	movs	r2, #1
   d443c:	701a      	strb	r2, [r3, #0]
  fram.begin();                                                        // Initialize the FRAM module
   d443e:	4848      	ldr	r0, [pc, #288]	; (d4560 <setup+0x190>)
   d4440:	4c48      	ldr	r4, [pc, #288]	; (d4564 <setup+0x194>)
   d4442:	f001 f84d 	bl	d54e0 <_ZN6MB85RC5beginEv>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4446:	2301      	movs	r3, #1
   d4448:	4845      	ldr	r0, [pc, #276]	; (d4560 <setup+0x190>)
   d444a:	f10d 0203 	add.w	r2, sp, #3
   d444e:	2100      	movs	r1, #0
   d4450:	f001 f888 	bl	d5564 <_ZN6MB85RC8readDataEjPhj>
  if (tempVersion != FRAMversionNumber) {                              // Check to see if the memory map in the sketch matches the data on the chip
   d4454:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d4458:	2b2a      	cmp	r3, #42	; 0x2a
   d445a:	d05d      	beq.n	d4518 <setup+0x148>
    Log.info("FRAM Module initializing version %i",FRAMversionNumber);
   d445c:	4942      	ldr	r1, [pc, #264]	; (d4568 <setup+0x198>)
   d445e:	483c      	ldr	r0, [pc, #240]	; (d4550 <setup+0x180>)
   d4460:	222a      	movs	r2, #42	; 0x2a
   d4462:	f7ff fe6d 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    fram.erase();                                                      // Reset the FRAM to correct the issue
   d4466:	483e      	ldr	r0, [pc, #248]	; (d4560 <setup+0x190>)
   d4468:	f001 f844 	bl	d54f4 <_ZN6MB85RC5eraseEv>
        writeData(framAddr, (const uint8_t *)&t, sizeof(T));
   d446c:	4a3f      	ldr	r2, [pc, #252]	; (d456c <setup+0x19c>)
   d446e:	483c      	ldr	r0, [pc, #240]	; (d4560 <setup+0x190>)
   d4470:	2304      	movs	r3, #4
   d4472:	2100      	movs	r1, #0
   d4474:	f001 f8c1 	bl	d55fa <_ZN6MB85RC9writeDataEjPKhj>
        readData(framAddr, (uint8_t *)&t, sizeof(T));
   d4478:	2301      	movs	r3, #1
   d447a:	4839      	ldr	r0, [pc, #228]	; (d4560 <setup+0x190>)
   d447c:	f10d 0203 	add.w	r2, sp, #3
   d4480:	2100      	movs	r1, #0
   d4482:	f001 f86f 	bl	d5564 <_ZN6MB85RC8readDataEjPhj>
    if (tempVersion != FRAMversionNumber) {
   d4486:	f89d 3003 	ldrb.w	r3, [sp, #3]
   d448a:	2b2a      	cmp	r3, #42	; 0x2a
   d448c:	d041      	beq.n	d4512 <setup+0x142>
      carrierOnline = false;
   d448e:	2200      	movs	r2, #0
   d4490:	7022      	strb	r2, [r4, #0]
      Log.info("FRAM test failed, expected %i and found %i",FRAMversionNumber, tempVersion);
   d4492:	4937      	ldr	r1, [pc, #220]	; (d4570 <setup+0x1a0>)
   d4494:	482e      	ldr	r0, [pc, #184]	; (d4550 <setup+0x180>)
   d4496:	222a      	movs	r2, #42	; 0x2a
   d4498:	f7ff fe52 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
     * This is used during chip detection as FOUT goes high after the AB1805
     * is initialized. While FOUT is low, the I2C interface is not yet ready.
     * 
     * The FOUT/nIRQ pin is also used for one-time and periodic interrupts.
     */
    AB1805 &withFOUT(pin_t pin) { foutPin = pin; return *this; };
   d449c:	4d35      	ldr	r5, [pc, #212]	; (d4574 <setup+0x1a4>)
   d449e:	2308      	movs	r3, #8
  ab1805.withFOUT(D8).setup();                                         // The carrier board has D8 connected to FOUT for wake interrupts
   d44a0:	4628      	mov	r0, r5
   d44a2:	2101      	movs	r1, #1
   d44a4:	816b      	strh	r3, [r5, #10]
   d44a6:	f000 ffb1 	bl	d540c <_ZN6AB18055setupEb>
  ab1805.setWDT(AB1805::WATCHDOG_MAX_SECONDS);                         // Enable watchdog
   d44aa:	217c      	movs	r1, #124	; 0x7c
   d44ac:	4628      	mov	r0, r5
   d44ae:	f000 fd91 	bl	d4fd4 <_ZN6AB18056setWDTEi>
  if (ab1805.detectChip()) {
   d44b2:	4628      	mov	r0, r5
   d44b4:	f000 fd08 	bl	d4ec8 <_ZN6AB180510detectChipEv>
   d44b8:	4605      	mov	r5, r0
   d44ba:	2800      	cmp	r0, #0
   d44bc:	d033      	beq.n	d4526 <setup+0x156>
    Log.info("AB1805 detected");
   d44be:	492e      	ldr	r1, [pc, #184]	; (d4578 <setup+0x1a8>)
   d44c0:	4823      	ldr	r0, [pc, #140]	; (d4550 <setup+0x180>)
   d44c2:	f7ff fe3d 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
  if (sensorOnlineLIS3DH && sensorOnlineTOF && carrierOnline) {
   d44c6:	7833      	ldrb	r3, [r6, #0]
   d44c8:	2b00      	cmp	r3, #0
   d44ca:	d035      	beq.n	d4538 <setup+0x168>
   d44cc:	4b23      	ldr	r3, [pc, #140]	; (d455c <setup+0x18c>)
   d44ce:	781b      	ldrb	r3, [r3, #0]
   d44d0:	2b00      	cmp	r3, #0
   d44d2:	d031      	beq.n	d4538 <setup+0x168>
   d44d4:	7823      	ldrb	r3, [r4, #0]
   d44d6:	2b00      	cmp	r3, #0
   d44d8:	d02e      	beq.n	d4538 <setup+0x168>
    Log.info("Initialization Complete all devices on-line");
   d44da:	4928      	ldr	r1, [pc, #160]	; (d457c <setup+0x1ac>)
   d44dc:	481c      	ldr	r0, [pc, #112]	; (d4550 <setup+0x180>)
   d44de:	f7ff fe2f 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    delay(500);
   d44e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
   d44e6:	f001 fbed 	bl	d5cc4 <delay>
    Log.info("Starting a running sample run");
   d44ea:	4925      	ldr	r1, [pc, #148]	; (d4580 <setup+0x1b0>)
   d44ec:	4818      	ldr	r0, [pc, #96]	; (d4550 <setup+0x180>)
   d44ee:	f7ff fe27 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    Log.info("*****************************");
   d44f2:	4924      	ldr	r1, [pc, #144]	; (d4584 <setup+0x1b4>)
   d44f4:	4816      	ldr	r0, [pc, #88]	; (d4550 <setup+0x180>)
   d44f6:	f7ff fe23 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
}
   d44fa:	b004      	add	sp, #16
   d44fc:	bd70      	pop	{r4, r5, r6, pc}
  else Log.info("LIS3DH failed initialization");
   d44fe:	4922      	ldr	r1, [pc, #136]	; (d4588 <setup+0x1b8>)
   d4500:	4813      	ldr	r0, [pc, #76]	; (d4550 <setup+0x180>)
   d4502:	f7ff fe1d 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d4506:	e78e      	b.n	d4426 <setup+0x56>
  else Log.info("TOF Sensor failed initialization");
   d4508:	4920      	ldr	r1, [pc, #128]	; (d458c <setup+0x1bc>)
   d450a:	4811      	ldr	r0, [pc, #68]	; (d4550 <setup+0x180>)
   d450c:	f7ff fe18 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d4510:	e795      	b.n	d443e <setup+0x6e>
    else carrierOnline = true;
   d4512:	2301      	movs	r3, #1
   d4514:	7023      	strb	r3, [r4, #0]
   d4516:	e7c1      	b.n	d449c <setup+0xcc>
    carrierOnline = true;
   d4518:	2301      	movs	r3, #1
    Log.info("FRAM Module loaded successfully");
   d451a:	491d      	ldr	r1, [pc, #116]	; (d4590 <setup+0x1c0>)
   d451c:	480c      	ldr	r0, [pc, #48]	; (d4550 <setup+0x180>)
    carrierOnline = true;
   d451e:	7023      	strb	r3, [r4, #0]
    Log.info("FRAM Module loaded successfully");
   d4520:	f7ff fe0e 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d4524:	e7ba      	b.n	d449c <setup+0xcc>
    Log.info("AB1805 Failed to Initialize");
   d4526:	491b      	ldr	r1, [pc, #108]	; (d4594 <setup+0x1c4>)
   d4528:	4809      	ldr	r0, [pc, #36]	; (d4550 <setup+0x180>)
   d452a:	f7ff fe09 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    if (carrierOnline) carrierOnline = false;
   d452e:	7823      	ldrb	r3, [r4, #0]
   d4530:	2b00      	cmp	r3, #0
   d4532:	d0c8      	beq.n	d44c6 <setup+0xf6>
   d4534:	7025      	strb	r5, [r4, #0]
   d4536:	e7c6      	b.n	d44c6 <setup+0xf6>
    Log.info("Errors in Initialization - Stopping");
   d4538:	4917      	ldr	r1, [pc, #92]	; (d4598 <setup+0x1c8>)
   d453a:	4805      	ldr	r0, [pc, #20]	; (d4550 <setup+0x180>)
   d453c:	f7ff fe00 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    while(1);
   d4540:	e7fe      	b.n	d4540 <setup+0x170>
   d4542:	bf00      	nop
   d4544:	2003e4cc 	.word	0x2003e4cc
   d4548:	2003e530 	.word	0x2003e530
   d454c:	000d83fa 	.word	0x000d83fa
   d4550:	2003e584 	.word	0x2003e584
   d4554:	2003e4e4 	.word	0x2003e4e4
   d4558:	000d8437 	.word	0x000d8437
   d455c:	2003e531 	.word	0x2003e531
   d4560:	2003e4f8 	.word	0x2003e4f8
   d4564:	2003e4e0 	.word	0x2003e4e0
   d4568:	000d84c7 	.word	0x000d84c7
   d456c:	000d862c 	.word	0x000d862c
   d4570:	000d84eb 	.word	0x000d84eb
   d4574:	2003e4ac 	.word	0x2003e4ac
   d4578:	000d83a8 	.word	0x000d83a8
   d457c:	000d8552 	.word	0x000d8552
   d4580:	000d857e 	.word	0x000d857e
   d4584:	000d859c 	.word	0x000d859c
   d4588:	000d841a 	.word	0x000d841a
   d458c:	000d845b 	.word	0x000d845b
   d4590:	000d8516 	.word	0x000d8516
   d4594:	000d8536 	.word	0x000d8536
   d4598:	000d85ba 	.word	0x000d85ba

000d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
    swap(*this, vector);
}

template<typename T, typename AllocatorT>
inline spark::Vector<T, AllocatorT>::~Vector() {
   d459c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d459e:	e9d0 5300 	ldrd	r5, r3, [r0]
   d45a2:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d45a4:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d45a6:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d45aa:	42ae      	cmp	r6, r5
   d45ac:	d004      	beq.n	d45b8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0x1c>
class LogCategoryFilter {
   d45ae:	4628      	mov	r0, r5
   d45b0:	f003 f82e 	bl	d7610 <_ZN6StringD1Ev>
   d45b4:	3514      	adds	r5, #20
   d45b6:	e7f8      	b.n	d45aa <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d45b8:	6820      	ldr	r0, [r4, #0]
   d45ba:	f001 fb3b 	bl	d5c34 <free>
    AllocatorT::free(data_);
}
   d45be:	4620      	mov	r0, r4
   d45c0:	bd70      	pop	{r4, r5, r6, pc}

000d45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d45c2:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d45c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d45c6:	4604      	mov	r4, r0
   d45c8:	460d      	mov	r5, r1
   d45ca:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d45cc:	d916      	bls.n	d45fc <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3a>
   d45ce:	4290      	cmp	r0, r2
   d45d0:	d215      	bcs.n	d45fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
            --end;
   d45d2:	f1a2 0614 	sub.w	r6, r2, #20
            dest += end - p - 1;
   d45d6:	1a75      	subs	r5, r6, r1
   d45d8:	f1a1 0714 	sub.w	r7, r1, #20
   d45dc:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d45de:	42b7      	cmp	r7, r6
   d45e0:	d01c      	beq.n	d461c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*end));
   d45e2:	b12c      	cbz	r4, d45f0 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2e>
   d45e4:	4631      	mov	r1, r6
   d45e6:	4620      	mov	r0, r4
   d45e8:	f003 f88e 	bl	d7708 <_ZN6StringC1EOS_>
   d45ec:	7c33      	ldrb	r3, [r6, #16]
   d45ee:	7423      	strb	r3, [r4, #16]
   d45f0:	4630      	mov	r0, r6
   d45f2:	f003 f80d 	bl	d7610 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d45f6:	3e14      	subs	r6, #20
   d45f8:	3c14      	subs	r4, #20
   d45fa:	e7f0      	b.n	d45de <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d45fc:	d00e      	beq.n	d461c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
            for (; p != end; ++p, ++dest) {
   d45fe:	42b5      	cmp	r5, r6
   d4600:	d00c      	beq.n	d461c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x5a>
                new(dest) T(std::move(*p));
   d4602:	b12c      	cbz	r4, d4610 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x4e>
   d4604:	4629      	mov	r1, r5
   d4606:	4620      	mov	r0, r4
   d4608:	f003 f87e 	bl	d7708 <_ZN6StringC1EOS_>
   d460c:	7c2b      	ldrb	r3, [r5, #16]
   d460e:	7423      	strb	r3, [r4, #16]
   d4610:	4628      	mov	r0, r5
   d4612:	f002 fffd 	bl	d7610 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d4616:	3514      	adds	r5, #20
   d4618:	3414      	adds	r4, #20
   d461a:	e7f0      	b.n	d45fe <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x3c>
    }
   d461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>:
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d461e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
        capacity_(0) {
   d4622:	2300      	movs	r3, #0
   d4624:	e9c0 3300 	strd	r3, r3, [r0]
   d4628:	6083      	str	r3, [r0, #8]
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d462a:	684f      	ldr	r7, [r1, #4]
   d462c:	429f      	cmp	r7, r3
inline spark::Vector<T, AllocatorT>::Vector(const Vector<T, AllocatorT>& vector) : Vector() {
   d462e:	4604      	mov	r4, r0
   d4630:	460e      	mov	r6, r1
    if (vector.size_ > 0 && realloc(vector.size_)) {
   d4632:	dd23      	ble.n	d467c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            d = (T*)AllocatorT::malloc(n * sizeof(T));
   d4634:	f04f 0814 	mov.w	r8, #20
    return ::malloc(size);
   d4638:	fb08 f007 	mul.w	r0, r8, r7
   d463c:	f001 faf2 	bl	d5c24 <malloc>
            if (!d) {
   d4640:	4605      	mov	r5, r0
   d4642:	b1d8      	cbz	r0, d467c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5e>
            move(d, data_, data_ + size_);
   d4644:	e9d4 1200 	ldrd	r1, r2, [r4]
   d4648:	fb08 1202 	mla	r2, r8, r2, r1
   d464c:	f7ff ffb9 	bl	d45c2 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d4650:	6820      	ldr	r0, [r4, #0]
   d4652:	f001 faef 	bl	d5c34 <free>
        data_ = d;
   d4656:	6025      	str	r5, [r4, #0]
        capacity_ = n;
   d4658:	60a7      	str	r7, [r4, #8]
        copy(data_, vector.data_, vector.data_ + vector.size_);
   d465a:	e9d6 7300 	ldrd	r7, r3, [r6]
   d465e:	fb08 7803 	mla	r8, r8, r3, r7
        for (; it != end; ++it, ++dest) {
   d4662:	45b8      	cmp	r8, r7
   d4664:	d008      	beq.n	d4678 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x5a>
   d4666:	4639      	mov	r1, r7
   d4668:	4628      	mov	r0, r5
   d466a:	f003 f867 	bl	d773c <_ZN6StringC1ERKS_>
   d466e:	7c3b      	ldrb	r3, [r7, #16]
   d4670:	742b      	strb	r3, [r5, #16]
   d4672:	3714      	adds	r7, #20
   d4674:	3514      	adds	r5, #20
   d4676:	e7f4      	b.n	d4662 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_+0x44>
        size_ = vector.size_;
   d4678:	6873      	ldr	r3, [r6, #4]
   d467a:	6063      	str	r3, [r4, #4]
}
   d467c:	4620      	mov	r0, r4
   d467e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d4684 <_GLOBAL__sub_I_SystemMode>:
   d4684:	b570      	push	{r4, r5, r6, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4686:	4b38      	ldr	r3, [pc, #224]	; (d4768 <_GLOBAL__sub_I_SystemMode+0xe4>)
    SleepResult() {}
   d4688:	4a38      	ldr	r2, [pc, #224]	; (d476c <_GLOBAL__sub_I_SystemMode+0xe8>)
   d468a:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d468c:	2400      	movs	r4, #0
   d468e:	b08c      	sub	sp, #48	; 0x30
   d4690:	601c      	str	r4, [r3, #0]
   d4692:	809c      	strh	r4, [r3, #4]
    SleepResult() {}
   d4694:	719c      	strb	r4, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4696:	2003      	movs	r0, #3
   d4698:	f001 fa00 	bl	d5a9c <set_system_mode>
SYSTEM_THREAD(ENABLED);                             // Means my code will not be held up by Particle processes.
   d469c:	4621      	mov	r1, r4
   d469e:	2001      	movs	r0, #1
   d46a0:	f001 fa14 	bl	d5acc <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
   d46a4:	2101      	movs	r1, #1
   d46a6:	2004      	movs	r0, #4
   d46a8:	f001 f860 	bl	d576c <HAL_Feature_Set>
LIS3DHI2C accel(Wire, 1, intPin);                   // Initialize the accelerometer in i2c mode
   d46ac:	f003 fbf6 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d46b0:	2303      	movs	r3, #3
   d46b2:	4601      	mov	r1, r0
   d46b4:	2201      	movs	r2, #1
   d46b6:	482e      	ldr	r0, [pc, #184]	; (d4770 <_GLOBAL__sub_I_SystemMode+0xec>)
	 *
	 * @param addr The address 0-7 based on the setting of A0, A1 and A2.
	 *
	 * You typically create one of these objects as a global variable.
	 */
	MB85RC64(TwoWire &wire, int addr = 0) : MB85RC(wire, 8192, addr) {};
   d46b8:	4d2e      	ldr	r5, [pc, #184]	; (d4774 <_GLOBAL__sub_I_SystemMode+0xf0>)
   d46ba:	f000 f98f 	bl	d49dc <_ZN9LIS3DHI2CC1ER7TwoWirehi>
SFEVL53L1X distanceSensor;                          // Initialize the TOF sensor - no interrupts
   d46be:	f003 fbed 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d46c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d46c6:	4601      	mov	r1, r0
   d46c8:	461a      	mov	r2, r3
   d46ca:	482b      	ldr	r0, [pc, #172]	; (d4778 <_GLOBAL__sub_I_SystemMode+0xf4>)
   d46cc:	f000 f9d4 	bl	d4a78 <_ZN10SFEVL53L1XC1ER7TwoWireii>
MB85RC64 fram(Wire, 0);                             // Rickkas' FRAM library
   d46d0:	f003 fbe4 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d46d4:	4623      	mov	r3, r4
   d46d6:	4601      	mov	r1, r0
   d46d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
   d46dc:	4628      	mov	r0, r5
   d46de:	f000 fef5 	bl	d54cc <_ZN6MB85RCC1ER7TwoWireji>
   d46e2:	4b26      	ldr	r3, [pc, #152]	; (d477c <_GLOBAL__sub_I_SystemMode+0xf8>)
   d46e4:	602b      	str	r3, [r5, #0]
AB1805 ab1805(Wire);                                // Rickkas' RTC / Watchdog library
   d46e6:	f003 fbd9 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d46ea:	2269      	movs	r2, #105	; 0x69
   d46ec:	4601      	mov	r1, r0
   d46ee:	4824      	ldr	r0, [pc, #144]	; (d4780 <_GLOBAL__sub_I_SystemMode+0xfc>)
   d46f0:	f000 fb80 	bl	d4df4 <_ZN6AB1805C1ER7TwoWireh>
        capacity_(0) {
   d46f4:	e9cd 4400 	strd	r4, r4, [sp]
   d46f8:	9402      	str	r4, [sp, #8]
            StreamLogHandler(Serial, level, filters) {
   d46fa:	f003 fa79 	bl	d7bf0 <_Z16_fetch_usbserialv>
        filter_(level, filters) {
   d46fe:	4c21      	ldr	r4, [pc, #132]	; (d4784 <_GLOBAL__sub_I_SystemMode+0x100>)
   d4700:	4605      	mov	r5, r0
   d4702:	4669      	mov	r1, sp
   d4704:	a803      	add	r0, sp, #12
   d4706:	f7ff ff8a 	bl	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d470a:	4626      	mov	r6, r4
        stream_(&stream) {
   d470c:	a903      	add	r1, sp, #12
   d470e:	a806      	add	r0, sp, #24
   d4710:	f7ff ff85 	bl	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
        filter_(level, filters) {
   d4714:	4b1c      	ldr	r3, [pc, #112]	; (d4788 <_GLOBAL__sub_I_SystemMode+0x104>)
   d4716:	f846 3b04 	str.w	r3, [r6], #4
   d471a:	a906      	add	r1, sp, #24
   d471c:	a809      	add	r0, sp, #36	; 0x24
   d471e:	f7ff ff7e 	bl	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d4722:	aa09      	add	r2, sp, #36	; 0x24
   d4724:	211e      	movs	r1, #30
   d4726:	4630      	mov	r0, r6
   d4728:	f002 fb07 	bl	d6d3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d472c:	a809      	add	r0, sp, #36	; 0x24
   d472e:	f7ff ff35 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
        stream_(&stream) {
   d4732:	a806      	add	r0, sp, #24
   d4734:	f7ff ff32 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4738:	4b14      	ldr	r3, [pc, #80]	; (d478c <_GLOBAL__sub_I_SystemMode+0x108>)
   d473a:	6023      	str	r3, [r4, #0]
   d473c:	6225      	str	r5, [r4, #32]
   d473e:	a803      	add	r0, sp, #12
   d4740:	f7ff ff2c 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4744:	4b12      	ldr	r3, [pc, #72]	; (d4790 <_GLOBAL__sub_I_SystemMode+0x10c>)
   d4746:	6023      	str	r3, [r4, #0]
        Serial.begin();
   d4748:	f003 fa52 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d474c:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4750:	f003 fa3e 	bl	d7bd0 <_ZN9USBSerial5beginEl>
        LogManager::instance()->addHandler(this);
   d4754:	f001 ff96 	bl	d6684 <_ZN5spark10LogManager8instanceEv>
   d4758:	4621      	mov	r1, r4
   d475a:	f002 fa80 	bl	d6c5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>
SerialLogHandler logHandler(LOG_LEVEL_INFO);
   d475e:	4668      	mov	r0, sp
   d4760:	f7ff ff1c 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d4764:	b00c      	add	sp, #48	; 0x30
   d4766:	bd70      	pop	{r4, r5, r6, pc}
   d4768:	2003e4a0 	.word	0x2003e4a0
   d476c:	ffff0000 	.word	0xffff0000
   d4770:	2003e4cc 	.word	0x2003e4cc
   d4774:	2003e4f8 	.word	0x2003e4f8
   d4778:	2003e4e4 	.word	0x2003e4e4
   d477c:	000d8618 	.word	0x000d8618
   d4780:	2003e4ac 	.word	0x2003e4ac
   d4784:	2003e50c 	.word	0x2003e50c
   d4788:	000d85e8 	.word	0x000d85e8
   d478c:	000d8a30 	.word	0x000d8a30
   d4790:	000d8600 	.word	0x000d8600

000d4794 <_ZN9LIS3DHI2CD1Ev>:

}

LIS3DHI2C::~LIS3DHI2C() {

}
   d4794:	4770      	bx	lr

000d4796 <_ZN9LIS3DHI2CD0Ev>:
LIS3DHI2C::~LIS3DHI2C() {
   d4796:	b510      	push	{r4, lr}
}
   d4798:	2114      	movs	r1, #20
LIS3DHI2C::~LIS3DHI2C() {
   d479a:	4604      	mov	r4, r0
}
   d479c:	f003 fba2 	bl	d7ee4 <_ZdlPvj>
   d47a0:	4620      	mov	r0, r4
   d47a2:	bd10      	pop	{r4, pc}

000d47a4 <_ZN9LIS3DHI2C9writeDataEhPKhj>:
		buf[ii] = wire.read();
	}
	return true;
}

bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d47a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47a6:	460e      	mov	r6, r1

	return (res == 0);
}

uint8_t LIS3DHI2C::getI2CAddr() const {
	uint8_t addr = (0b0011000 | sad0);
   d47a8:	7c01      	ldrb	r1, [r0, #16]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d47aa:	4607      	mov	r7, r0
	wire.beginTransmission(getI2CAddr());
   d47ac:	f041 0118 	orr.w	r1, r1, #24
   d47b0:	68c0      	ldr	r0, [r0, #12]
bool LIS3DHI2C::writeData(uint8_t addr, const uint8_t *buf, size_t numBytes) {
   d47b2:	461d      	mov	r5, r3
   d47b4:	4614      	mov	r4, r2
	wire.beginTransmission(getI2CAddr());
   d47b6:	f001 fbad 	bl	d5f14 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(addr);
   d47ba:	68f8      	ldr	r0, [r7, #12]
	if (numBytes > 1) {
   d47bc:	2d01      	cmp	r5, #1
	wire.write(addr);
   d47be:	6803      	ldr	r3, [r0, #0]
		addr |= I2C_INCREMENT;
   d47c0:	bf88      	it	hi
   d47c2:	f046 0680 	orrhi.w	r6, r6, #128	; 0x80
	wire.write(addr);
   d47c6:	689b      	ldr	r3, [r3, #8]
   d47c8:	4631      	mov	r1, r6
   d47ca:	4798      	blx	r3
	for(size_t ii = 0; ii < numBytes; ii++) {
   d47cc:	4425      	add	r5, r4
   d47ce:	42ac      	cmp	r4, r5
   d47d0:	68f8      	ldr	r0, [r7, #12]
   d47d2:	d005      	beq.n	d47e0 <_ZN9LIS3DHI2C9writeDataEhPKhj+0x3c>
		wire.write(buf[ii]);
   d47d4:	6803      	ldr	r3, [r0, #0]
   d47d6:	f814 1b01 	ldrb.w	r1, [r4], #1
   d47da:	689b      	ldr	r3, [r3, #8]
   d47dc:	4798      	blx	r3
	for(size_t ii = 0; ii < numBytes; ii++) {
   d47de:	e7f6      	b.n	d47ce <_ZN9LIS3DHI2C9writeDataEhPKhj+0x2a>
	uint8_t res = wire.endTransmission();
   d47e0:	f001 fba3 	bl	d5f2a <_ZN7TwoWire15endTransmissionEv>
}
   d47e4:	fab0 f080 	clz	r0, r0
   d47e8:	0940      	lsrs	r0, r0, #5
   d47ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d47ec <_ZN9LIS3DHI2C8readDataEhPhj>:
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d47ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d47ee:	460f      	mov	r7, r1
	uint8_t addr = (0b0011000 | sad0);
   d47f0:	7c01      	ldrb	r1, [r0, #16]
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d47f2:	4604      	mov	r4, r0
	wire.beginTransmission(getI2CAddr());
   d47f4:	f041 0118 	orr.w	r1, r1, #24
   d47f8:	68c0      	ldr	r0, [r0, #12]
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d47fa:	461e      	mov	r6, r3
   d47fc:	4615      	mov	r5, r2
	wire.beginTransmission(getI2CAddr());
   d47fe:	f001 fb89 	bl	d5f14 <_ZN7TwoWire17beginTransmissionEh>
	wire.write(addr);
   d4802:	68e0      	ldr	r0, [r4, #12]
	if (numBytes > 1) {
   d4804:	2e01      	cmp	r6, #1
	wire.write(addr);
   d4806:	6803      	ldr	r3, [r0, #0]
		addr |= I2C_INCREMENT;
   d4808:	bf88      	it	hi
   d480a:	f047 0780 	orrhi.w	r7, r7, #128	; 0x80
	wire.write(addr);
   d480e:	689b      	ldr	r3, [r3, #8]
   d4810:	4639      	mov	r1, r7
   d4812:	4798      	blx	r3
	uint8_t res = wire.endTransmission();
   d4814:	68e0      	ldr	r0, [r4, #12]
   d4816:	f001 fb88 	bl	d5f2a <_ZN7TwoWire15endTransmissionEv>
	if (res != 0) {
   d481a:	b9c0      	cbnz	r0, d484e <_ZN9LIS3DHI2C8readDataEhPhj+0x62>
	uint8_t addr = (0b0011000 | sad0);
   d481c:	7c21      	ldrb	r1, [r4, #16]
	wire.requestFrom(getI2CAddr(), numBytes);
   d481e:	68e0      	ldr	r0, [r4, #12]
   d4820:	4632      	mov	r2, r6
   d4822:	f041 0118 	orr.w	r1, r1, #24
   d4826:	f001 fb72 	bl	d5f0e <_ZN7TwoWire11requestFromEhj>
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   d482a:	442e      	add	r6, r5
   d482c:	42ae      	cmp	r6, r5
   d482e:	d101      	bne.n	d4834 <_ZN9LIS3DHI2C8readDataEhPhj+0x48>
bool LIS3DHI2C::readData(uint8_t addr, uint8_t *buf, size_t numBytes) {
   d4830:	2001      	movs	r0, #1
}
   d4832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   d4834:	68e0      	ldr	r0, [r4, #12]
   d4836:	6803      	ldr	r3, [r0, #0]
   d4838:	691b      	ldr	r3, [r3, #16]
   d483a:	4798      	blx	r3
   d483c:	2800      	cmp	r0, #0
   d483e:	d0f7      	beq.n	d4830 <_ZN9LIS3DHI2C8readDataEhPhj+0x44>
		buf[ii] = wire.read();
   d4840:	68e0      	ldr	r0, [r4, #12]
   d4842:	6803      	ldr	r3, [r0, #0]
   d4844:	695b      	ldr	r3, [r3, #20]
   d4846:	4798      	blx	r3
   d4848:	f805 0b01 	strb.w	r0, [r5], #1
	for(size_t ii = 0; ii < numBytes && wire.available(); ii++) {
   d484c:	e7ee      	b.n	d482c <_ZN9LIS3DHI2C8readDataEhPhj+0x40>
		return false;
   d484e:	2000      	movs	r0, #0
   d4850:	e7ef      	b.n	d4832 <_ZN9LIS3DHI2C8readDataEhPhj+0x46>

000d4852 <_ZN12LIS3DHConfigC1Ev>:
LIS3DHConfig::LIS3DHConfig() {
   d4852:	2200      	movs	r2, #0
   d4854:	7002      	strb	r2, [r0, #0]
   d4856:	7042      	strb	r2, [r0, #1]
   d4858:	7082      	strb	r2, [r0, #2]
   d485a:	70c2      	strb	r2, [r0, #3]
   d485c:	7102      	strb	r2, [r0, #4]
   d485e:	7142      	strb	r2, [r0, #5]
   d4860:	7182      	strb	r2, [r0, #6]
   d4862:	71c2      	strb	r2, [r0, #7]
   d4864:	7202      	strb	r2, [r0, #8]
   d4866:	7242      	strb	r2, [r0, #9]
   d4868:	7282      	strb	r2, [r0, #10]
}
   d486a:	4770      	bx	lr

000d486c <_ZN12LIS3DHConfig12setAccelModeEh>:
	reg2 = reg3 = reg5 = 0;
   d486c:	2200      	movs	r2, #0
	reg1 = rate | LIS3DH::CTRL_REG1_ZEN | LIS3DH::CTRL_REG1_YEN | LIS3DH::CTRL_REG1_XEN;
   d486e:	f041 0107 	orr.w	r1, r1, #7
   d4872:	7001      	strb	r1, [r0, #0]
	reg2 = reg3 = reg5 = 0;
   d4874:	7102      	strb	r2, [r0, #4]
   d4876:	7082      	strb	r2, [r0, #2]
   d4878:	7042      	strb	r2, [r0, #1]
	int1_ths = 0;
   d487a:	71c2      	strb	r2, [r0, #7]
	int1_cfg = 0;
   d487c:	7242      	strb	r2, [r0, #9]
}
   d487e:	4770      	bx	lr

000d4880 <_ZN6LIS3DH13readRegister8Eh>:
uint8_t LIS3DH::readRegister8(uint8_t addr) {
   d4880:	b513      	push	{r0, r1, r4, lr}
	readData(addr, resp, sizeof(resp));
   d4882:	6803      	ldr	r3, [r0, #0]
   d4884:	aa01      	add	r2, sp, #4
   d4886:	68dc      	ldr	r4, [r3, #12]
   d4888:	2301      	movs	r3, #1
   d488a:	47a0      	blx	r4
}
   d488c:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4890:	b002      	add	sp, #8
   d4892:	bd10      	pop	{r4, pc}

000d4894 <_ZN6LIS3DH9hasDeviceEv>:
bool LIS3DH::hasDevice() {
   d4894:	b538      	push	{r3, r4, r5, lr}
   d4896:	4605      	mov	r5, r0
   d4898:	240a      	movs	r4, #10
		uint8_t whoami = readRegister8(REG_WHO_AM_I);
   d489a:	210f      	movs	r1, #15
   d489c:	4628      	mov	r0, r5
   d489e:	f7ff ffef 	bl	d4880 <_ZN6LIS3DH13readRegister8Eh>
		if (whoami == WHO_AM_I) {
   d48a2:	2833      	cmp	r0, #51	; 0x33
			found = true;
   d48a4:	f04f 0001 	mov.w	r0, #1
		if (whoami == WHO_AM_I) {
   d48a8:	d004      	beq.n	d48b4 <_ZN6LIS3DH9hasDeviceEv+0x20>
		delay(1);
   d48aa:	f001 fa0b 	bl	d5cc4 <delay>
	for(int tries = 0; tries < 10; tries++) {
   d48ae:	3c01      	subs	r4, #1
   d48b0:	d1f3      	bne.n	d489a <_ZN6LIS3DH9hasDeviceEv+0x6>
	bool found = false;
   d48b2:	4620      	mov	r0, r4
}
   d48b4:	bd38      	pop	{r3, r4, r5, pc}

000d48b6 <_ZN6LIS3DH9getSampleER12LIS3DHSample>:
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d48b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d48b8:	460c      	mov	r4, r1
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d48ba:	2127      	movs	r1, #39	; 0x27
bool LIS3DH::getSample(LIS3DHSample &sample) {
   d48bc:	4605      	mov	r5, r0
	uint8_t statusAuxReg = readRegister8(REG_STATUS_REG);
   d48be:	f7ff ffdf 	bl	d4880 <_ZN6LIS3DH13readRegister8Eh>
	bool hasData = ((statusAuxReg & STATUS_ZYXDA) != 0);
   d48c2:	f000 0008 	and.w	r0, r0, #8
   d48c6:	2800      	cmp	r0, #0
   d48c8:	bf14      	ite	ne
   d48ca:	2601      	movne	r6, #1
   d48cc:	2600      	moveq	r6, #0
	if (hasData) {
   d48ce:	d01b      	beq.n	d4908 <_ZN6LIS3DH9getSampleER12LIS3DHSample+0x52>
		readData(REG_OUT_X_L, resp, sizeof(resp));
   d48d0:	682b      	ldr	r3, [r5, #0]
   d48d2:	466a      	mov	r2, sp
   d48d4:	68df      	ldr	r7, [r3, #12]
   d48d6:	2128      	movs	r1, #40	; 0x28
   d48d8:	2306      	movs	r3, #6
   d48da:	4628      	mov	r0, r5
   d48dc:	47b8      	blx	r7
		sample.x = (int16_t) (resp[0] | (((uint16_t)resp[1]) << 8));
   d48de:	f89d 2001 	ldrb.w	r2, [sp, #1]
   d48e2:	f89d 3000 	ldrb.w	r3, [sp]
   d48e6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d48ea:	8023      	strh	r3, [r4, #0]
		sample.y = (int16_t) (resp[2] | (((uint16_t)resp[3]) << 8));
   d48ec:	f89d 2003 	ldrb.w	r2, [sp, #3]
   d48f0:	f89d 3002 	ldrb.w	r3, [sp, #2]
   d48f4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d48f8:	8063      	strh	r3, [r4, #2]
		sample.z = (int16_t) (resp[4] | (((uint16_t)resp[5]) << 8));
   d48fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
   d48fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d4902:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   d4906:	80a3      	strh	r3, [r4, #4]
}
   d4908:	4630      	mov	r0, r6
   d490a:	b003      	add	sp, #12
   d490c:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d490e <_ZN6LIS3DH14writeRegister8Ehh>:
void LIS3DH::writeRegister8(uint8_t addr, uint8_t value) {
   d490e:	b513      	push	{r0, r1, r4, lr}
	writeData(addr, req, sizeof(req));
   d4910:	6803      	ldr	r3, [r0, #0]
	req[0] = value;
   d4912:	f88d 2004 	strb.w	r2, [sp, #4]
	writeData(addr, req, sizeof(req));
   d4916:	691c      	ldr	r4, [r3, #16]
   d4918:	aa01      	add	r2, sp, #4
   d491a:	2301      	movs	r3, #1
   d491c:	47a0      	blx	r4
}
   d491e:	b002      	add	sp, #8
   d4920:	bd10      	pop	{r4, pc}
	...

000d4924 <_ZN6LIS3DH5setupER12LIS3DHConfig>:
bool LIS3DH::setup(LIS3DHConfig &config) {
   d4924:	b570      	push	{r4, r5, r6, lr}
	if (!hasDevice()) {
   d4926:	6803      	ldr	r3, [r0, #0]
   d4928:	689b      	ldr	r3, [r3, #8]
bool LIS3DH::setup(LIS3DHConfig &config) {
   d492a:	4604      	mov	r4, r0
   d492c:	460d      	mov	r5, r1
	if (!hasDevice()) {
   d492e:	4798      	blx	r3
   d4930:	4606      	mov	r6, r0
   d4932:	b930      	cbnz	r0, d4942 <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1e>
		Serial.println("device not found");
   d4934:	f003 f95c 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d4938:	4927      	ldr	r1, [pc, #156]	; (d49d8 <_ZN6LIS3DH5setupER12LIS3DHConfig+0xb4>)
   d493a:	f002 fe00 	bl	d753e <_ZN5Print7printlnEPKc>
}
   d493e:	4630      	mov	r0, r6
   d4940:	bd70      	pop	{r4, r5, r6, pc}
	writeRegister8(REG_CTRL_REG1, config.reg1);
   d4942:	782a      	ldrb	r2, [r5, #0]
   d4944:	2120      	movs	r1, #32
   d4946:	4620      	mov	r0, r4
   d4948:	f7ff ffe1 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG2, config.reg2);
   d494c:	786a      	ldrb	r2, [r5, #1]
   d494e:	2121      	movs	r1, #33	; 0x21
   d4950:	4620      	mov	r0, r4
   d4952:	f7ff ffdc 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG3, config.reg3);
   d4956:	78aa      	ldrb	r2, [r5, #2]
   d4958:	2122      	movs	r1, #34	; 0x22
   d495a:	4620      	mov	r0, r4
   d495c:	f7ff ffd7 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG4, config.reg4);
   d4960:	78ea      	ldrb	r2, [r5, #3]
   d4962:	2123      	movs	r1, #35	; 0x23
   d4964:	4620      	mov	r0, r4
   d4966:	f7ff ffd2 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG5, config.reg5);
   d496a:	792a      	ldrb	r2, [r5, #4]
   d496c:	2124      	movs	r1, #36	; 0x24
   d496e:	4620      	mov	r0, r4
   d4970:	f7ff ffcd 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
	writeRegister8(REG_CTRL_REG6, config.reg6);
   d4974:	796a      	ldrb	r2, [r5, #5]
   d4976:	2125      	movs	r1, #37	; 0x25
   d4978:	4620      	mov	r0, r4
   d497a:	f7ff ffc8 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
	if (config.setReference) {
   d497e:	79ab      	ldrb	r3, [r5, #6]
   d4980:	b11b      	cbz	r3, d498a <_ZN6LIS3DH5setupER12LIS3DHConfig+0x66>
		readRegister8(REG_REFERENCE);
   d4982:	2126      	movs	r1, #38	; 0x26
   d4984:	4620      	mov	r0, r4
   d4986:	f7ff ff7b 	bl	d4880 <_ZN6LIS3DH13readRegister8Eh>
	writeRegister8(REG_FIFO_CTRL_REG, config.fifoCtrlReg);
   d498a:	7aaa      	ldrb	r2, [r5, #10]
   d498c:	212e      	movs	r1, #46	; 0x2e
   d498e:	4620      	mov	r0, r4
   d4990:	f7ff ffbd 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
	if ((config.reg3 & CTRL_REG3_I1_INT1) != 0) {
   d4994:	78ab      	ldrb	r3, [r5, #2]
   d4996:	065b      	lsls	r3, r3, #25
   d4998:	d5d1      	bpl.n	d493e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
		writeRegister8(REG_INT1_THS, config.int1_ths);
   d499a:	79ea      	ldrb	r2, [r5, #7]
   d499c:	2132      	movs	r1, #50	; 0x32
   d499e:	4620      	mov	r0, r4
   d49a0:	f7ff ffb5 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
		writeRegister8(REG_INT1_DURATION, config.int1_duration);
   d49a4:	7a2a      	ldrb	r2, [r5, #8]
   d49a6:	2133      	movs	r1, #51	; 0x33
   d49a8:	4620      	mov	r0, r4
   d49aa:	f7ff ffb0 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
		if (intPin >= 0) {
   d49ae:	6863      	ldr	r3, [r4, #4]
   d49b0:	2b00      	cmp	r3, #0
   d49b2:	db0a      	blt.n	d49ca <_ZN6LIS3DH5setupER12LIS3DHConfig+0xa6>
			int1_cfg = config.int1_cfg;
   d49b4:	7a6a      	ldrb	r2, [r5, #9]
   d49b6:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, int1_cfg);
   d49b8:	4620      	mov	r0, r4
   d49ba:	2130      	movs	r1, #48	; 0x30
   d49bc:	f7ff ffa7 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
			readRegister8(REG_INT1_SRC);
   d49c0:	2131      	movs	r1, #49	; 0x31
   d49c2:	4620      	mov	r0, r4
   d49c4:	f7ff ff5c 	bl	d4880 <_ZN6LIS3DH13readRegister8Eh>
   d49c8:	e7b9      	b.n	d493e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
			int1_cfg = 0;
   d49ca:	2200      	movs	r2, #0
   d49cc:	7222      	strb	r2, [r4, #8]
			writeRegister8(REG_INT1_CFG, 0);
   d49ce:	2130      	movs	r1, #48	; 0x30
   d49d0:	4620      	mov	r0, r4
   d49d2:	f7ff ff9c 	bl	d490e <_ZN6LIS3DH14writeRegister8Ehh>
   d49d6:	e7b2      	b.n	d493e <_ZN6LIS3DH5setupER12LIS3DHConfig+0x1a>
   d49d8:	000d8630 	.word	0x000d8630

000d49dc <_ZN9LIS3DHI2CC1ER7TwoWirehi>:
LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
   d49dc:	b510      	push	{r4, lr}
LIS3DH::LIS3DH(int intPin) : intPin(intPin) {
   d49de:	6043      	str	r3, [r0, #4]
   d49e0:	2300      	movs	r3, #0
   d49e2:	7203      	strb	r3, [r0, #8]
LIS3DHI2C::LIS3DHI2C(TwoWire &wire, uint8_t sad0, int intPin) : LIS3DH(intPin), wire(wire), sad0(sad0) {
   d49e4:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <_ZN9LIS3DHI2CC1ER7TwoWirehi+0x14>)
   d49e6:	6003      	str	r3, [r0, #0]
   d49e8:	60c1      	str	r1, [r0, #12]
   d49ea:	7402      	strb	r2, [r0, #16]
}
   d49ec:	bd10      	pop	{r4, pc}
   d49ee:	bf00      	nop
   d49f0:	000d864c 	.word	0x000d864c

000d49f4 <_ZN7VL53L1XD1Ev>:
       }
    }
    
   /** Destructor
    */
    virtual ~VL53L1X(){}
   d49f4:	4770      	bx	lr

000d49f6 <_ZN7VL53L1X10VL53L1_OffEv>:
	/**
	 * @brief       PowerOff the sensor
	 * @return      void
	 */
    /* turns off the sensor */
    virtual void VL53L1_Off(void)
   d49f6:	b508      	push	{r3, lr}
    {
       if(gpio0 >= 0)
   d49f8:	6880      	ldr	r0, [r0, #8]
   d49fa:	2800      	cmp	r0, #0
   d49fc:	db03      	blt.n	d4a06 <_ZN7VL53L1X10VL53L1_OffEv+0x10>
       {
         digitalWrite(gpio0, LOW);
   d49fe:	2100      	movs	r1, #0
   d4a00:	b280      	uxth	r0, r0
   d4a02:	f003 fa06 	bl	d7e12 <digitalWrite>
       }
       delay(10);
    }
   d4a06:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   d4a0a:	200a      	movs	r0, #10
   d4a0c:	f001 b95a 	b.w	d5cc4 <delay>

000d4a10 <_ZN7VL53L1X9VL53L1_OnEv>:
    virtual void VL53L1_On(void)
   d4a10:	b508      	push	{r3, lr}
       if(gpio0 >= 0)
   d4a12:	6880      	ldr	r0, [r0, #8]
   d4a14:	2800      	cmp	r0, #0
   d4a16:	db03      	blt.n	d4a20 <_ZN7VL53L1X9VL53L1_OnEv+0x10>
         digitalWrite(gpio0, HIGH);
   d4a18:	2101      	movs	r1, #1
   d4a1a:	b280      	uxth	r0, r0
   d4a1c:	f003 f9f9 	bl	d7e12 <digitalWrite>
    }
   d4a20:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
       delay(10);
   d4a24:	200a      	movs	r0, #10
   d4a26:	f001 b94d 	b.w	d5cc4 <delay>

000d4a2a <_ZN7VL53L1XD0Ev>:
    virtual ~VL53L1X(){}
   d4a2a:	b510      	push	{r4, lr}
   d4a2c:	211c      	movs	r1, #28
   d4a2e:	4604      	mov	r4, r0
   d4a30:	f003 fa58 	bl	d7ee4 <_ZdlPvj>
   d4a34:	4620      	mov	r0, r4
   d4a36:	bd10      	pop	{r4, pc}

000d4a38 <_ZN7VL53L1X11GetDistanceEPm>:
/**
 * @brief Get ranging result and only that
 * @param pRange_mm  Pointer to range distance
 * @return           0 on success
 */
	int GetDistance(uint32_t *piData)
   d4a38:	b513      	push	{r0, r1, r4, lr}
   d4a3a:	460c      	mov	r4, r1
    {
	int status;
	uint16_t distance;
	status = VL53L1X_GetDistance(&distance);
   d4a3c:	f10d 0106 	add.w	r1, sp, #6
   d4a40:	f000 f994 	bl	d4d6c <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	*piData = (uint32_t) distance;
   d4a44:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4a48:	6023      	str	r3, [r4, #0]
	return status;
    }
   d4a4a:	b002      	add	sp, #8
   d4a4c:	bd10      	pop	{r4, pc}

000d4a4e <_ZN7VL53L1X6ReadIDEv>:
    virtual int ReadID(){
   d4a4e:	b507      	push	{r0, r1, r2, lr}
		VL53L1X_GetSensorId(&sensorId);
   d4a50:	f10d 0106 	add.w	r1, sp, #6
   d4a54:	f000 f979 	bl	d4d4a <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
		if (sensorId == 0xEEAC)
   d4a58:	f8bd 0006 	ldrh.w	r0, [sp, #6]
	}
   d4a5c:	f64e 63ac 	movw	r3, #61100	; 0xeeac
   d4a60:	1ac0      	subs	r0, r0, r3
   d4a62:	bf18      	it	ne
   d4a64:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d4a68:	b003      	add	sp, #12
   d4a6a:	f85d fb04 	ldr.w	pc, [sp], #4

000d4a6e <_ZN7VL53L1X4InitEv>:
    virtual int Init()
   d4a6e:	b508      	push	{r3, lr}
       return VL53L1X_SensorInit();
   d4a70:	f000 f918 	bl	d4ca4 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
    }
   d4a74:	bd08      	pop	{r3, pc}
	...

000d4a78 <_ZN10SFEVL53L1XC1ER7TwoWireii>:
#include <stdlib.h>
#include "Arduino.h"
#include "SparkFun_VL53L1X.h"
#include "vl53l1x_class.h"

SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   d4a78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4a7c:	f04f 0952 	mov.w	r9, #82	; 0x52
{
	_i2cPort = &i2cPort;
	_shutdownPin = shutdownPin;
   d4a80:	e9c0 1200 	strd	r1, r2, [r0]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   d4a84:	f8c0 900c 	str.w	r9, [r0, #12]
	_interruptPin = interruptPin;
   d4a88:	6083      	str	r3, [r0, #8]
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   d4a8a:	4605      	mov	r5, r0
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   d4a8c:	201c      	movs	r0, #28
SFEVL53L1X::SFEVL53L1X(TwoWire &i2cPort, int shutdownPin, int interruptPin)
   d4a8e:	460f      	mov	r7, r1
   d4a90:	4616      	mov	r6, r2
   d4a92:	4698      	mov	r8, r3
	_device = new VL53L1X(&i2cPort, shutdownPin, interruptPin);
   d4a94:	f7ff fafd 	bl	d4092 <_Znwj>
   d4a98:	4604      	mov	r4, r0
   d4a9a:	b180      	cbz	r0, d4abe <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   d4a9c:	4b0a      	ldr	r3, [pc, #40]	; (d4ac8 <_ZN10SFEVL53L1XC1ER7TwoWireii+0x50>)
       MyDevice.I2cDevAddr=VL53L1X_DEFAULT_DEVICE_ADDRESS;
   d4a9e:	f880 9010 	strb.w	r9, [r0, #16]
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   d4aa2:	e9c0 3700 	strd	r3, r7, [r0]
       if(gpio0 >= 0)
   d4aa6:	2e00      	cmp	r6, #0
       Device = &MyDevice;
   d4aa8:	f100 0310 	add.w	r3, r0, #16
    VL53L1X(TwoWire *i2c, int pin, int pin_gpio1) : RangeSensor(), dev_i2c(i2c), gpio0(pin), gpio1Int(pin_gpio1)
   d4aac:	e9c0 6802 	strd	r6, r8, [r0, #8]
       MyDevice.I2cHandle = i2c;
   d4ab0:	6147      	str	r7, [r0, #20]
       Device = &MyDevice;
   d4ab2:	6183      	str	r3, [r0, #24]
       if(gpio0 >= 0)
   d4ab4:	db03      	blt.n	d4abe <_ZN10SFEVL53L1XC1ER7TwoWireii+0x46>
         pinMode(gpio0, OUTPUT);
   d4ab6:	2101      	movs	r1, #1
   d4ab8:	b2b0      	uxth	r0, r6
   d4aba:	f003 f999 	bl	d7df0 <pinMode>
   d4abe:	612c      	str	r4, [r5, #16]
}
   d4ac0:	4628      	mov	r0, r5
   d4ac2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d4ac6:	bf00      	nop
   d4ac8:	000d8668 	.word	0x000d8668

000d4acc <_ZN10SFEVL53L1X7checkIDEv>:
}

/*Checks the ID of the device, returns true if ID is correct*/

bool SFEVL53L1X::checkID()
{
   d4acc:	b507      	push	{r0, r1, r2, lr}
	uint16_t sensorId;
	_device->VL53L1X_GetSensorId(&sensorId);
   d4ace:	f10d 0106 	add.w	r1, sp, #6
   d4ad2:	6900      	ldr	r0, [r0, #16]
   d4ad4:	f000 f939 	bl	d4d4a <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>
	if (sensorId == 0xEACC)
   d4ad8:	f8bd 0006 	ldrh.w	r0, [sp, #6]
		return true;
	return false;
}
   d4adc:	f64e 23cc 	movw	r3, #60108	; 0xeacc
   d4ae0:	1ac3      	subs	r3, r0, r3
   d4ae2:	4258      	negs	r0, r3
   d4ae4:	4158      	adcs	r0, r3
   d4ae6:	b003      	add	sp, #12
   d4ae8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4aec <_ZN10SFEVL53L1X5beginEv>:
{
   d4aec:	b510      	push	{r4, lr}
   d4aee:	4604      	mov	r4, r0
	if (checkID() == false)
   d4af0:	f7ff ffec 	bl	d4acc <_ZN10SFEVL53L1X7checkIDEv>
   d4af4:	b130      	cbz	r0, d4b04 <_ZN10SFEVL53L1X5beginEv+0x18>
	return _device->VL53L1X_SensorInit();
   d4af6:	6920      	ldr	r0, [r4, #16]
   d4af8:	f000 f8d4 	bl	d4ca4 <_ZN7VL53L1X18VL53L1X_SensorInitEv>
   d4afc:	3800      	subs	r0, #0
   d4afe:	bf18      	it	ne
   d4b00:	2001      	movne	r0, #1
}
   d4b02:	bd10      	pop	{r4, pc}
		return (VL53L1_ERROR_PLATFORM_SPECIFIC_START);
   d4b04:	2001      	movs	r0, #1
   d4b06:	e7fc      	b.n	d4b02 <_ZN10SFEVL53L1X5beginEv+0x16>

000d4b08 <_ZN10SFEVL53L1X14clearInterruptEv>:
	return _i2cAddress;
}

void SFEVL53L1X::clearInterrupt()
{
	_device->VL53L1X_ClearInterrupt();
   d4b08:	6900      	ldr	r0, [r0, #16]
   d4b0a:	f000 b84f 	b.w	d4bac <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>

000d4b0e <_ZN10SFEVL53L1X12startRangingEv>:
	return tmp;
}

void SFEVL53L1X::startRanging()
{
	_device->VL53L1X_StartRanging();
   d4b0e:	6900      	ldr	r0, [r0, #16]
   d4b10:	f000 b851 	b.w	d4bb6 <_ZN7VL53L1X20VL53L1X_StartRangingEv>

000d4b14 <_ZN10SFEVL53L1X11stopRangingEv>:
}

void SFEVL53L1X::stopRanging()
{
	_device->VL53L1X_StopRanging();
   d4b14:	6900      	ldr	r0, [r0, #16]
   d4b16:	f000 b853 	b.w	d4bc0 <_ZN7VL53L1X19VL53L1X_StopRangingEv>

000d4b1a <_ZN10SFEVL53L1X17checkForDataReadyEv>:
}

bool SFEVL53L1X::checkForDataReady()
{
   d4b1a:	b507      	push	{r0, r1, r2, lr}
	uint8_t dataReady;
	_device->VL53L1X_CheckForDataReady(&dataReady);
   d4b1c:	f10d 0107 	add.w	r1, sp, #7
   d4b20:	6900      	ldr	r0, [r0, #16]
   d4b22:	f000 f8a2 	bl	d4c6a <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
	return (bool)dataReady;
   d4b26:	f89d 0007 	ldrb.w	r0, [sp, #7]
}
   d4b2a:	3800      	subs	r0, #0
   d4b2c:	bf18      	it	ne
   d4b2e:	2001      	movne	r0, #1
   d4b30:	b003      	add	sp, #12
   d4b32:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b36 <_ZN10SFEVL53L1X11getDistanceEv>:
	_device->VL53L1X_GetSensorId(&id);
	return id;
}

uint16_t SFEVL53L1X::getDistance()
{
   d4b36:	b507      	push	{r0, r1, r2, lr}
	uint16_t distance;
	_device->VL53L1X_GetDistance(&distance);
   d4b38:	f10d 0106 	add.w	r1, sp, #6
   d4b3c:	6900      	ldr	r0, [r0, #16]
   d4b3e:	f000 f915 	bl	d4d6c <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>
	return (int)distance;
}
   d4b42:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   d4b46:	b003      	add	sp, #12
   d4b48:	f85d fb04 	ldr.w	pc, [sp], #4

000d4b4c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>:
	}
	return status;
}

VL53L1X_ERROR VL53L1X::VL53L1_I2CWrite(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToWrite)
{
   d4b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d4b4e:	4604      	mov	r4, r0
   d4b50:	4615      	mov	r5, r2
#ifdef DEBUG_MODE
	Serial.print("Beginning transmission to ");
	Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d4b52:	6840      	ldr	r0, [r0, #4]
{
   d4b54:	f8bd 7020 	ldrh.w	r7, [sp, #32]
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d4b58:	0849      	lsrs	r1, r1, #1
{
   d4b5a:	461e      	mov	r6, r3
#ifdef DEBUG_MODE
	Serial.print("Writing port number ");
	Serial.println(RegisterAddr);
#endif
	uint8_t buffer[2];
	buffer[0] = RegisterAddr >> 8;
   d4b5c:	ba6d      	rev16	r5, r5
	dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d4b5e:	f001 f9d9 	bl	d5f14 <_ZN7TwoWire17beginTransmissionEh>
	buffer[1] = RegisterAddr & 0xFF;
	dev_i2c->write(buffer, 2);
   d4b62:	6860      	ldr	r0, [r4, #4]
	buffer[0] = RegisterAddr >> 8;
   d4b64:	f8ad 5004 	strh.w	r5, [sp, #4]
	dev_i2c->write(buffer, 2);
   d4b68:	6803      	ldr	r3, [r0, #0]
   d4b6a:	2202      	movs	r2, #2
   d4b6c:	68db      	ldr	r3, [r3, #12]
   d4b6e:	a901      	add	r1, sp, #4
   d4b70:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   d4b72:	2500      	movs	r5, #0
   d4b74:	42af      	cmp	r7, r5
   d4b76:	6860      	ldr	r0, [r4, #4]
   d4b78:	dd05      	ble.n	d4b86 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x3a>
		dev_i2c->write(pBuffer[i]);
   d4b7a:	6803      	ldr	r3, [r0, #0]
   d4b7c:	5d71      	ldrb	r1, [r6, r5]
   d4b7e:	689b      	ldr	r3, [r3, #8]
   d4b80:	4798      	blx	r3
	for (int i = 0; i < NumByteToWrite; i++)
   d4b82:	3501      	adds	r5, #1
   d4b84:	e7f6      	b.n	d4b74 <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht+0x28>

	dev_i2c->endTransmission(true);
   d4b86:	2101      	movs	r1, #1
   d4b88:	f001 f9cb 	bl	d5f22 <_ZN7TwoWire15endTransmissionEh>
	return 0;
}
   d4b8c:	2000      	movs	r0, #0
   d4b8e:	b003      	add	sp, #12
   d4b90:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4b92 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>:
{
   d4b92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4b94:	f88d 300f 	strb.w	r3, [sp, #15]
	status = VL53L1_I2CWrite(Dev->I2cDevAddr, index, &data, 1);
   d4b98:	2301      	movs	r3, #1
   d4b9a:	7809      	ldrb	r1, [r1, #0]
   d4b9c:	9300      	str	r3, [sp, #0]
   d4b9e:	f10d 030f 	add.w	r3, sp, #15
   d4ba2:	f7ff ffd3 	bl	d4b4c <_ZN7VL53L1X15VL53L1_I2CWriteEhtPht>
}
   d4ba6:	b005      	add	sp, #20
   d4ba8:	f85d fb04 	ldr.w	pc, [sp], #4

000d4bac <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>:
	status = VL53L1_WrByte(Device, SYSTEM__INTERRUPT_CLEAR, 0x01);
   d4bac:	6981      	ldr	r1, [r0, #24]
   d4bae:	2301      	movs	r3, #1
   d4bb0:	2286      	movs	r2, #134	; 0x86
   d4bb2:	f7ff bfee 	b.w	d4b92 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000d4bb6 <_ZN7VL53L1X20VL53L1X_StartRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x40); /* Enable VL53L1X */
   d4bb6:	6981      	ldr	r1, [r0, #24]
   d4bb8:	2340      	movs	r3, #64	; 0x40
   d4bba:	2287      	movs	r2, #135	; 0x87
   d4bbc:	f7ff bfe9 	b.w	d4b92 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000d4bc0 <_ZN7VL53L1X19VL53L1X_StopRangingEv>:
	status = VL53L1_WrByte(Device, SYSTEM__MODE_START, 0x00); /* Disable VL53L1X */
   d4bc0:	6981      	ldr	r1, [r0, #24]
   d4bc2:	2300      	movs	r3, #0
   d4bc4:	2287      	movs	r2, #135	; 0x87
   d4bc6:	f7ff bfe4 	b.w	d4b92 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>

000d4bca <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>:

VL53L1X_ERROR VL53L1X::VL53L1_I2CRead(uint8_t DeviceAddr, uint16_t RegisterAddr, uint8_t *pBuffer, uint16_t NumByteToRead)
{
   d4bca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d4bce:	4604      	mov	r4, r0
   d4bd0:	461d      	mov	r5, r3
	{
#ifdef DEBUG_MODE
		Serial.print("Beginning transmission to ");
		Serial.println(((DeviceAddr) >> 1) & 0x7F);
#endif
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d4bd2:	084f      	lsrs	r7, r1, #1
   d4bd4:	2605      	movs	r6, #5
#ifdef DEBUG_MODE
		Serial.print("Writing port number ");
		Serial.println(RegisterAddr);
#endif
		uint8_t buffer[2];
		buffer[0] = RegisterAddr >> 8;
   d4bd6:	fa92 f892 	rev16.w	r8, r2
		dev_i2c->beginTransmission(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)));
   d4bda:	6860      	ldr	r0, [r4, #4]
   d4bdc:	4639      	mov	r1, r7
   d4bde:	f001 f999 	bl	d5f14 <_ZN7TwoWire17beginTransmissionEh>
		buffer[1] = RegisterAddr & 0xFF;
		dev_i2c->write(buffer, 2);
   d4be2:	6860      	ldr	r0, [r4, #4]
		buffer[0] = RegisterAddr >> 8;
   d4be4:	f8ad 8004 	strh.w	r8, [sp, #4]
		dev_i2c->write(buffer, 2);
   d4be8:	6803      	ldr	r3, [r0, #0]
   d4bea:	a901      	add	r1, sp, #4
   d4bec:	68db      	ldr	r3, [r3, #12]
   d4bee:	2202      	movs	r2, #2
   d4bf0:	4798      	blx	r3
		status = dev_i2c->endTransmission(false);
   d4bf2:	6860      	ldr	r0, [r4, #4]
   d4bf4:	2100      	movs	r1, #0
   d4bf6:	f001 f994 	bl	d5f22 <_ZN7TwoWire15endTransmissionEh>

		if (status == 0)
   d4bfa:	b118      	cbz	r0, d4c04 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x3a>
	for (uint8_t x = 0; x < maxAttempts; x++)
   d4bfc:	3e01      	subs	r6, #1
   d4bfe:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   d4c02:	d1ea      	bne.n	d4bda <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x10>
		}
#endif
		//End of fix
	}

	dev_i2c->requestFrom(((uint8_t)(((DeviceAddr) >> 1) & 0x7F)), (byte)NumByteToRead);
   d4c04:	f89d 2020 	ldrb.w	r2, [sp, #32]
   d4c08:	6860      	ldr	r0, [r4, #4]
   d4c0a:	4639      	mov	r1, r7
   d4c0c:	f001 f97f 	bl	d5f0e <_ZN7TwoWire11requestFromEhj>

	int i = 0;
   d4c10:	3d01      	subs	r5, #1
	while (dev_i2c->available())
   d4c12:	6860      	ldr	r0, [r4, #4]
   d4c14:	6803      	ldr	r3, [r0, #0]
   d4c16:	691b      	ldr	r3, [r3, #16]
   d4c18:	4798      	blx	r3
   d4c1a:	b130      	cbz	r0, d4c2a <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x60>
	{
		pBuffer[i] = dev_i2c->read();
   d4c1c:	6860      	ldr	r0, [r4, #4]
   d4c1e:	6803      	ldr	r3, [r0, #0]
   d4c20:	695b      	ldr	r3, [r3, #20]
   d4c22:	4798      	blx	r3
   d4c24:	f805 0f01 	strb.w	r0, [r5, #1]!
	while (dev_i2c->available())
   d4c28:	e7f3      	b.n	d4c12 <_ZN7VL53L1X14VL53L1_I2CReadEhtPht+0x48>
		i++;
	}

	return 0;
}
   d4c2a:	b002      	add	sp, #8
   d4c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d4c30 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>:
{
   d4c30:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, data, 1);
   d4c32:	2401      	movs	r4, #1
   d4c34:	7809      	ldrb	r1, [r1, #0]
   d4c36:	9400      	str	r4, [sp, #0]
   d4c38:	f7ff ffc7 	bl	d4bca <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (status)
   d4c3c:	3800      	subs	r0, #0
   d4c3e:	bf18      	it	ne
   d4c40:	2001      	movne	r0, #1
}
   d4c42:	4240      	negs	r0, r0
   d4c44:	b002      	add	sp, #8
   d4c46:	bd10      	pop	{r4, pc}

000d4c48 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>:
{
   d4c48:	b513      	push	{r0, r1, r4, lr}
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   d4c4a:	2230      	movs	r2, #48	; 0x30
{
   d4c4c:	460c      	mov	r4, r1
	status = VL53L1_RdByte(Device, GPIO_HV_MUX__CTRL, &Temp);
   d4c4e:	f10d 0307 	add.w	r3, sp, #7
   d4c52:	6981      	ldr	r1, [r0, #24]
   d4c54:	f7ff ffec 	bl	d4c30 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	Temp = Temp & 0x10;
   d4c58:	f89d 3007 	ldrb.w	r3, [sp, #7]
	*pInterruptPolarity = !(Temp >> 4);
   d4c5c:	f3c3 1300 	ubfx	r3, r3, #4, #1
   d4c60:	f083 0301 	eor.w	r3, r3, #1
   d4c64:	7023      	strb	r3, [r4, #0]
}
   d4c66:	b002      	add	sp, #8
   d4c68:	bd10      	pop	{r4, pc}

000d4c6a <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>:
{
   d4c6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d4c6c:	4605      	mov	r5, r0
   d4c6e:	460c      	mov	r4, r1
	status = VL53L1X_GetInterruptPolarity(&IntPol);
   d4c70:	f10d 0107 	add.w	r1, sp, #7
   d4c74:	f7ff ffe8 	bl	d4c48 <_ZN7VL53L1X28VL53L1X_GetInterruptPolarityEPh>
	status = VL53L1_RdByte(Device, GPIO__TIO_HV_STATUS, &Temp);
   d4c78:	69a9      	ldr	r1, [r5, #24]
   d4c7a:	f10d 0306 	add.w	r3, sp, #6
   d4c7e:	2231      	movs	r2, #49	; 0x31
   d4c80:	4628      	mov	r0, r5
   d4c82:	f7ff ffd5 	bl	d4c30 <_ZN7VL53L1X13VL53L1_RdByteEP12VL53L1_Dev_ttPh>
	if (status == 0)
   d4c86:	b950      	cbnz	r0, d4c9e <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh+0x34>
		if ((Temp & 1) == IntPol)
   d4c88:	f89d 3006 	ldrb.w	r3, [sp, #6]
   d4c8c:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d4c90:	f003 0301 	and.w	r3, r3, #1
   d4c94:	429a      	cmp	r2, r3
			*isDataReady = 1;
   d4c96:	bf06      	itte	eq
   d4c98:	2301      	moveq	r3, #1
   d4c9a:	7023      	strbeq	r3, [r4, #0]
			*isDataReady = 0;
   d4c9c:	7020      	strbne	r0, [r4, #0]
}
   d4c9e:	b003      	add	sp, #12
   d4ca0:	bd30      	pop	{r4, r5, pc}
	...

000d4ca4 <_ZN7VL53L1X18VL53L1X_SensorInitEv>:
{
   d4ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   d4ca6:	2300      	movs	r3, #0
   d4ca8:	4e1c      	ldr	r6, [pc, #112]	; (d4d1c <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x78>)
   d4caa:	f88d 3007 	strb.w	r3, [sp, #7]
{
   d4cae:	4604      	mov	r4, r0
	uint8_t Addr = 0x00, dataReady = 0, timeout = 0;
   d4cb0:	252d      	movs	r5, #45	; 0x2d
		status = VL53L1_WrByte(Device, Addr, VL51L1X_DEFAULT_CONFIGURATION[Addr - 0x2D]);
   d4cb2:	b2aa      	uxth	r2, r5
   d4cb4:	f816 3b01 	ldrb.w	r3, [r6], #1
   d4cb8:	69a1      	ldr	r1, [r4, #24]
   d4cba:	4620      	mov	r0, r4
   d4cbc:	3501      	adds	r5, #1
   d4cbe:	f7ff ff68 	bl	d4b92 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	for (Addr = 0x2D; Addr <= 0x87; Addr++)
   d4cc2:	2d88      	cmp	r5, #136	; 0x88
   d4cc4:	d1f5      	bne.n	d4cb2 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0xe>
	status = VL53L1X_StartRanging();
   d4cc6:	4620      	mov	r0, r4
   d4cc8:	f7ff ff75 	bl	d4bb6 <_ZN7VL53L1X20VL53L1X_StartRangingEv>
   d4ccc:	2598      	movs	r5, #152	; 0x98
	while (dataReady == 0)
   d4cce:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4cd2:	b963      	cbnz	r3, d4cee <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x4a>
		status = VL53L1X_CheckForDataReady(&dataReady);
   d4cd4:	f10d 0107 	add.w	r1, sp, #7
   d4cd8:	4620      	mov	r0, r4
   d4cda:	3d01      	subs	r5, #1
   d4cdc:	f7ff ffc5 	bl	d4c6a <_ZN7VL53L1X25VL53L1X_CheckForDataReadyEPh>
		if (timeout++ > 150)
   d4ce0:	f015 05ff 	ands.w	r5, r5, #255	; 0xff
   d4ce4:	d017      	beq.n	d4d16 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x72>
		delay(1);
   d4ce6:	2001      	movs	r0, #1
   d4ce8:	f000 ffec 	bl	d5cc4 <delay>
	while (dataReady == 0)
   d4cec:	e7ef      	b.n	d4cce <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x2a>
	status = VL53L1X_ClearInterrupt();
   d4cee:	4620      	mov	r0, r4
   d4cf0:	f7ff ff5c 	bl	d4bac <_ZN7VL53L1X22VL53L1X_ClearInterruptEv>
	status = VL53L1X_StopRanging();
   d4cf4:	4620      	mov	r0, r4
   d4cf6:	f7ff ff63 	bl	d4bc0 <_ZN7VL53L1X19VL53L1X_StopRangingEv>
	status = VL53L1_WrByte(Device, VL53L1_VHV_CONFIG__TIMEOUT_MACROP_LOOP_BOUND, 0x09); /* two bounds VHV */
   d4cfa:	69a1      	ldr	r1, [r4, #24]
   d4cfc:	2309      	movs	r3, #9
   d4cfe:	2208      	movs	r2, #8
   d4d00:	4620      	mov	r0, r4
   d4d02:	f7ff ff46 	bl	d4b92 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
	status = VL53L1_WrByte(Device, 0x0B, 0);											/* start VHV from the previous temperature */
   d4d06:	69a1      	ldr	r1, [r4, #24]
   d4d08:	2300      	movs	r3, #0
   d4d0a:	220b      	movs	r2, #11
   d4d0c:	4620      	mov	r0, r4
   d4d0e:	f7ff ff40 	bl	d4b92 <_ZN7VL53L1X13VL53L1_WrByteEP12VL53L1_Dev_tth>
}
   d4d12:	b002      	add	sp, #8
   d4d14:	bd70      	pop	{r4, r5, r6, pc}
			return VL53L1_ERROR_TIME_OUT;
   d4d16:	f06f 0006 	mvn.w	r0, #6
   d4d1a:	e7fa      	b.n	d4d12 <_ZN7VL53L1X18VL53L1X_SensorInitEv+0x6e>
   d4d1c:	000d8684 	.word	0x000d8684

000d4d20 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>:
{
   d4d20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4d22:	461c      	mov	r4, r3
	uint8_t buffer[2] = {0, 0};
   d4d24:	2300      	movs	r3, #0
   d4d26:	f8ad 300c 	strh.w	r3, [sp, #12]
	status = VL53L1_I2CRead(Dev->I2cDevAddr, index, buffer, 2);
   d4d2a:	2302      	movs	r3, #2
   d4d2c:	7809      	ldrb	r1, [r1, #0]
   d4d2e:	9300      	str	r3, [sp, #0]
   d4d30:	ab03      	add	r3, sp, #12
   d4d32:	f7ff ff4a 	bl	d4bca <_ZN7VL53L1X14VL53L1_I2CReadEhtPht>
	if (!status)
   d4d36:	b930      	cbnz	r0, d4d46 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt+0x26>
		*data = (buffer[0] << 8) + buffer[1];
   d4d38:	f89d 200c 	ldrb.w	r2, [sp, #12]
   d4d3c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d4d40:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   d4d44:	8023      	strh	r3, [r4, #0]
}
   d4d46:	b004      	add	sp, #16
   d4d48:	bd10      	pop	{r4, pc}

000d4d4a <_ZN7VL53L1X19VL53L1X_GetSensorIdEPt>:
{
   d4d4a:	b513      	push	{r0, r1, r4, lr}
	uint16_t tmp = 0;
   d4d4c:	2300      	movs	r3, #0
{
   d4d4e:	460c      	mov	r4, r1
	uint16_t tmp = 0;
   d4d50:	f8ad 3006 	strh.w	r3, [sp, #6]
	status = VL53L1_RdWord(Device, VL53L1_IDENTIFICATION__MODEL_ID, &tmp);
   d4d54:	6981      	ldr	r1, [r0, #24]
   d4d56:	f10d 0306 	add.w	r3, sp, #6
   d4d5a:	f240 120f 	movw	r2, #271	; 0x10f
   d4d5e:	f7ff ffdf 	bl	d4d20 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*sensorId = tmp;
   d4d62:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4d66:	8023      	strh	r3, [r4, #0]
}
   d4d68:	b002      	add	sp, #8
   d4d6a:	bd10      	pop	{r4, pc}

000d4d6c <_ZN7VL53L1X19VL53L1X_GetDistanceEPt>:
{
   d4d6c:	b513      	push	{r0, r1, r4, lr}
	status = (VL53L1_RdWord(Device,
   d4d6e:	2296      	movs	r2, #150	; 0x96
{
   d4d70:	460c      	mov	r4, r1
	status = (VL53L1_RdWord(Device,
   d4d72:	f10d 0306 	add.w	r3, sp, #6
   d4d76:	6981      	ldr	r1, [r0, #24]
   d4d78:	f7ff ffd2 	bl	d4d20 <_ZN7VL53L1X13VL53L1_RdWordEP12VL53L1_Dev_ttPt>
	*distance = tmp;
   d4d7c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   d4d80:	8023      	strh	r3, [r4, #0]
}
   d4d82:	b002      	add	sp, #8
   d4d84:	bd10      	pop	{r4, pc}

000d4d86 <_ZN6AB1805D1Ev>:
    instance = this;
}

AB1805::~AB1805() {

}
   d4d86:	4770      	bx	lr

000d4d88 <_ZN6AB1805D0Ev>:
AB1805::~AB1805() {
   d4d88:	b510      	push	{r4, lr}
}
   d4d8a:	2120      	movs	r1, #32
AB1805::~AB1805() {
   d4d8c:	4604      	mov	r4, r0
}
   d4d8e:	f003 f8a9 	bl	d7ee4 <_ZdlPvj>
   d4d92:	4620      	mov	r0, r4
   d4d94:	bd10      	pop	{r4, pc}

000d4d96 <_ZNK5spark6Logger5traceEPKcz>:
inline void spark::Logger::trace(const char *fmt, ...) const {
   d4d96:	b40e      	push	{r1, r2, r3}
   d4d98:	b510      	push	{r4, lr}
   d4d9a:	b08d      	sub	sp, #52	; 0x34
   d4d9c:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_TRACE, fmt, args);
   d4d9e:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::trace(const char *fmt, ...) const {
   d4da0:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4da4:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4da6:	2300      	movs	r3, #0
   d4da8:	2020      	movs	r0, #32
   d4daa:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4dae:	e9cd 4200 	strd	r4, r2, [sp]
   d4db2:	2001      	movs	r0, #1
   d4db4:	aa04      	add	r2, sp, #16
   d4db6:	f000 fe51 	bl	d5a5c <log_message_v>
}
   d4dba:	b00d      	add	sp, #52	; 0x34
   d4dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4dc0:	b003      	add	sp, #12
   d4dc2:	4770      	bx	lr

000d4dc4 <_ZNK5spark6Logger5errorEPKcz>:
inline void spark::Logger::error(const char *fmt, ...) const {
   d4dc4:	b40e      	push	{r1, r2, r3}
   d4dc6:	b510      	push	{r4, lr}
   d4dc8:	b08d      	sub	sp, #52	; 0x34
   d4dca:	aa0f      	add	r2, sp, #60	; 0x3c
    log(LOG_LEVEL_ERROR, fmt, args);
   d4dcc:	6801      	ldr	r1, [r0, #0]
inline void spark::Logger::error(const char *fmt, ...) const {
   d4dce:	f852 4b04 	ldr.w	r4, [r2], #4
    va_start(args, fmt);
   d4dd2:	9203      	str	r2, [sp, #12]
    attr.flags = 0;
   d4dd4:	2300      	movs	r3, #0
   d4dd6:	2020      	movs	r0, #32
   d4dd8:	e9cd 0304 	strd	r0, r3, [sp, #16]
    log_message_v(level, name_, &attr, nullptr, fmt, args);
   d4ddc:	e9cd 4200 	strd	r4, r2, [sp]
   d4de0:	2032      	movs	r0, #50	; 0x32
   d4de2:	aa04      	add	r2, sp, #16
   d4de4:	f000 fe3a 	bl	d5a5c <log_message_v>
}
   d4de8:	b00d      	add	sp, #52	; 0x34
   d4dea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d4dee:	b003      	add	sp, #12
   d4df0:	4770      	bx	lr
	...

000d4df4 <_ZN6AB1805C1ER7TwoWireh>:
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4df4:	b510      	push	{r4, lr}
   d4df6:	7202      	strb	r2, [r0, #8]
   d4df8:	22ff      	movs	r2, #255	; 0xff
   d4dfa:	8142      	strh	r2, [r0, #10]
   d4dfc:	2200      	movs	r2, #0
   d4dfe:	e9c0 2203 	strd	r2, r2, [r0, #12]
   d4e02:	6142      	str	r2, [r0, #20]
   d4e04:	7602      	strb	r2, [r0, #24]
   d4e06:	61c2      	str	r2, [r0, #28]
    instance = this;
   d4e08:	4a02      	ldr	r2, [pc, #8]	; (d4e14 <_ZN6AB1805C1ER7TwoWireh+0x20>)
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4e0a:	4c03      	ldr	r4, [pc, #12]	; (d4e18 <_ZN6AB1805C1ER7TwoWireh+0x24>)
    instance = this;
   d4e0c:	6010      	str	r0, [r2, #0]
AB1805::AB1805(TwoWire &wire, uint8_t i2cAddr) : wire(wire), i2cAddr(i2cAddr) {
   d4e0e:	e9c0 4100 	strd	r4, r1, [r0]
}
   d4e12:	bd10      	pop	{r4, pc}
   d4e14:	2003e538 	.word	0x2003e538
   d4e18:	000d888c 	.word	0x000d888c

000d4e1c <_ZN6AB180513readRegistersEhPhjb>:

bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
    return readRegisters(regAddr, &value, 1, lock);
}

bool AB1805::readRegisters(uint8_t regAddr, uint8_t *array, size_t num, bool lock) {
   d4e1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d4e20:	f89d 8020 	ldrb.w	r8, [sp, #32]
   d4e24:	4604      	mov	r4, r0
   d4e26:	4689      	mov	r9, r1
   d4e28:	4616      	mov	r6, r2
   d4e2a:	461f      	mov	r7, r3
    bool bResult = false;

    if (lock) {
   d4e2c:	f1b8 0f00 	cmp.w	r8, #0
   d4e30:	d002      	beq.n	d4e38 <_ZN6AB180513readRegistersEhPhjb+0x1c>
        wire.lock();
   d4e32:	6840      	ldr	r0, [r0, #4]
   d4e34:	f001 f87c 	bl	d5f30 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d4e38:	7a21      	ldrb	r1, [r4, #8]
   d4e3a:	6860      	ldr	r0, [r4, #4]
   d4e3c:	f001 f86a 	bl	d5f14 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d4e40:	6860      	ldr	r0, [r4, #4]
   d4e42:	6803      	ldr	r3, [r0, #0]
   d4e44:	4649      	mov	r1, r9
   d4e46:	689b      	ldr	r3, [r3, #8]
   d4e48:	4798      	blx	r3
    int stat = wire.endTransmission(false);
   d4e4a:	6860      	ldr	r0, [r4, #4]
   d4e4c:	2100      	movs	r1, #0
   d4e4e:	f001 f868 	bl	d5f22 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d4e52:	4605      	mov	r5, r0
   d4e54:	bb00      	cbnz	r0, d4e98 <_ZN6AB180513readRegistersEhPhjb+0x7c>
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d4e56:	2301      	movs	r3, #1
   d4e58:	7a21      	ldrb	r1, [r4, #8]
   d4e5a:	6860      	ldr	r0, [r4, #4]
   d4e5c:	463a      	mov	r2, r7
   d4e5e:	f001 f844 	bl	d5eea <_ZN7TwoWire11requestFromEhjh>
        if (count == num) {
   d4e62:	4287      	cmp	r7, r0
        size_t count = wire.requestFrom(i2cAddr, num, true);
   d4e64:	4603      	mov	r3, r0
        if (count == num) {
   d4e66:	d109      	bne.n	d4e7c <_ZN6AB180513readRegistersEhPhjb+0x60>
   d4e68:	4437      	add	r7, r6
            for(size_t ii = 0; ii < num; ii++) {
   d4e6a:	42be      	cmp	r6, r7
   d4e6c:	d01c      	beq.n	d4ea8 <_ZN6AB180513readRegistersEhPhjb+0x8c>
                array[ii] = wire.read();
   d4e6e:	6860      	ldr	r0, [r4, #4]
   d4e70:	6803      	ldr	r3, [r0, #0]
   d4e72:	695b      	ldr	r3, [r3, #20]
   d4e74:	4798      	blx	r3
   d4e76:	f806 0b01 	strb.w	r0, [r6], #1
            for(size_t ii = 0; ii < num; ii++) {
   d4e7a:	e7f6      	b.n	d4e6a <_ZN6AB180513readRegistersEhPhjb+0x4e>
            // _log.print("\n");

            bResult = true;
        }
        else {
            _log.error("failed to read regAddr=%02x count=%u", regAddr, count);
   d4e7c:	490b      	ldr	r1, [pc, #44]	; (d4eac <_ZN6AB180513readRegistersEhPhjb+0x90>)
   d4e7e:	480c      	ldr	r0, [pc, #48]	; (d4eb0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d4e80:	464a      	mov	r2, r9
   d4e82:	f7ff ff9f 	bl	d4dc4 <_ZNK5spark6Logger5errorEPKcz>
    }
    else {
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
    }

    if (lock) {
   d4e86:	f1b8 0f00 	cmp.w	r8, #0
   d4e8a:	d002      	beq.n	d4e92 <_ZN6AB180513readRegistersEhPhjb+0x76>
        wire.unlock();
   d4e8c:	6860      	ldr	r0, [r4, #4]
   d4e8e:	f001 f858 	bl	d5f42 <_ZN7TwoWire6unlockEv>
    }
    return bResult;    
}
   d4e92:	4628      	mov	r0, r5
   d4e94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        _log.error("failed to read regAddr=%02x stat=%d", regAddr, stat);
   d4e98:	4603      	mov	r3, r0
   d4e9a:	4906      	ldr	r1, [pc, #24]	; (d4eb4 <_ZN6AB180513readRegistersEhPhjb+0x98>)
   d4e9c:	4804      	ldr	r0, [pc, #16]	; (d4eb0 <_ZN6AB180513readRegistersEhPhjb+0x94>)
   d4e9e:	464a      	mov	r2, r9
   d4ea0:	f7ff ff90 	bl	d4dc4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d4ea4:	2500      	movs	r5, #0
   d4ea6:	e7ee      	b.n	d4e86 <_ZN6AB180513readRegistersEhPhjb+0x6a>
            bResult = true;
   d4ea8:	2501      	movs	r5, #1
   d4eaa:	e7ec      	b.n	d4e86 <_ZN6AB180513readRegistersEhPhjb+0x6a>
   d4eac:	000d86df 	.word	0x000d86df
   d4eb0:	2003e534 	.word	0x2003e534
   d4eb4:	000d8704 	.word	0x000d8704

000d4eb8 <_ZN6AB180512readRegisterEhRhb>:
bool AB1805::readRegister(uint8_t regAddr, uint8_t &value, bool lock) {
   d4eb8:	b507      	push	{r0, r1, r2, lr}
    return readRegisters(regAddr, &value, 1, lock);
   d4eba:	9300      	str	r3, [sp, #0]
   d4ebc:	2301      	movs	r3, #1
   d4ebe:	f7ff ffad 	bl	d4e1c <_ZN6AB180513readRegistersEhPhjb>
}
   d4ec2:	b003      	add	sp, #12
   d4ec4:	f85d fb04 	ldr.w	pc, [sp], #4

000d4ec8 <_ZN6AB180510detectChipEv>:
bool AB1805::detectChip() {
   d4ec8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    if (foutPin != PIN_INVALID) {
   d4eca:	8943      	ldrh	r3, [r0, #10]
   d4ecc:	2bff      	cmp	r3, #255	; 0xff
bool AB1805::detectChip() {
   d4ece:	4604      	mov	r4, r0
    if (foutPin != PIN_INVALID) {
   d4ed0:	d010      	beq.n	d4ef4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d4ed2:	4e19      	ldr	r6, [pc, #100]	; (d4f38 <_ZN6AB180510detectChipEv+0x70>)
   d4ed4:	4d19      	ldr	r5, [pc, #100]	; (d4f3c <_ZN6AB180510detectChipEv+0x74>)
   d4ed6:	f000 fc61 	bl	d579c <HAL_Timer_Get_Milli_Seconds>
        while(millis() - start < 1000) {
   d4eda:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
   d4ede:	d209      	bcs.n	d4ef4 <_ZN6AB180510detectChipEv+0x2c>
            if (digitalRead(foutPin) == HIGH) {
   d4ee0:	8960      	ldrh	r0, [r4, #10]
   d4ee2:	f002 ffaf 	bl	d7e44 <digitalRead>
   d4ee6:	2801      	cmp	r0, #1
   d4ee8:	d004      	beq.n	d4ef4 <_ZN6AB180510detectChipEv+0x2c>
                _log.info("FOUT did not go HIGH");
   d4eea:	4631      	mov	r1, r6
   d4eec:	4628      	mov	r0, r5
   d4eee:	f7ff f927 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d4ef2:	e7f0      	b.n	d4ed6 <_ZN6AB180510detectChipEv+0xe>
    bResult = readRegister(REG_ID0, value);
   d4ef4:	2301      	movs	r3, #1
   d4ef6:	f10d 0207 	add.w	r2, sp, #7
   d4efa:	2128      	movs	r1, #40	; 0x28
   d4efc:	4620      	mov	r0, r4
   d4efe:	f7ff ffdb 	bl	d4eb8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult && value == REG_ID0_AB18XX) {
   d4f02:	b930      	cbnz	r0, d4f12 <_ZN6AB180510detectChipEv+0x4a>
        _log.info("not detected");
   d4f04:	480d      	ldr	r0, [pc, #52]	; (d4f3c <_ZN6AB180510detectChipEv+0x74>)
   d4f06:	490e      	ldr	r1, [pc, #56]	; (d4f40 <_ZN6AB180510detectChipEv+0x78>)
   d4f08:	f7ff f91a 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d4f0c:	2000      	movs	r0, #0
}
   d4f0e:	b002      	add	sp, #8
   d4f10:	bd70      	pop	{r4, r5, r6, pc}
    if (bResult && value == REG_ID0_AB18XX) {
   d4f12:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4f16:	2b18      	cmp	r3, #24
   d4f18:	d1f4      	bne.n	d4f04 <_ZN6AB180510detectChipEv+0x3c>
        bResult = readRegister(REG_ID1, value);
   d4f1a:	2301      	movs	r3, #1
   d4f1c:	f10d 0207 	add.w	r2, sp, #7
   d4f20:	2129      	movs	r1, #41	; 0x29
   d4f22:	4620      	mov	r0, r4
   d4f24:	f7ff ffc8 	bl	d4eb8 <_ZN6AB180512readRegisterEhRhb>
        if (bResult && value == REG_ID1_ABXX05) {
   d4f28:	2800      	cmp	r0, #0
   d4f2a:	d0eb      	beq.n	d4f04 <_ZN6AB180510detectChipEv+0x3c>
   d4f2c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d4f30:	2b05      	cmp	r3, #5
   d4f32:	d1e7      	bne.n	d4f04 <_ZN6AB180510detectChipEv+0x3c>
   d4f34:	e7eb      	b.n	d4f0e <_ZN6AB180510detectChipEv+0x46>
   d4f36:	bf00      	nop
   d4f38:	000d8728 	.word	0x000d8728
   d4f3c:	2003e534 	.word	0x2003e534
   d4f40:	000d873d 	.word	0x000d873d

000d4f44 <_ZN6AB180514writeRegistersEhPKhjb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
    return writeRegisters(regAddr, &value, 1, lock);
}


bool AB1805::writeRegisters(uint8_t regAddr, const uint8_t *array, size_t num, bool lock) {
   d4f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4f48:	f89d 8018 	ldrb.w	r8, [sp, #24]
   d4f4c:	4604      	mov	r4, r0
   d4f4e:	460f      	mov	r7, r1
   d4f50:	4615      	mov	r5, r2
   d4f52:	461e      	mov	r6, r3
    bool bResult = false;

    if (lock) {
   d4f54:	f1b8 0f00 	cmp.w	r8, #0
   d4f58:	d002      	beq.n	d4f60 <_ZN6AB180514writeRegistersEhPKhjb+0x1c>
        wire.lock();
   d4f5a:	6840      	ldr	r0, [r0, #4]
   d4f5c:	f000 ffe8 	bl	d5f30 <_ZN7TwoWire4lockEv>
    }

    wire.beginTransmission(i2cAddr);
   d4f60:	7a21      	ldrb	r1, [r4, #8]
   d4f62:	6860      	ldr	r0, [r4, #4]
   d4f64:	f000 ffd6 	bl	d5f14 <_ZN7TwoWire17beginTransmissionEh>
    wire.write(regAddr);
   d4f68:	6860      	ldr	r0, [r4, #4]
   d4f6a:	6803      	ldr	r3, [r0, #0]
   d4f6c:	4639      	mov	r1, r7
   d4f6e:	689b      	ldr	r3, [r3, #8]
   d4f70:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d4f72:	442e      	add	r6, r5
   d4f74:	42b5      	cmp	r5, r6
   d4f76:	6860      	ldr	r0, [r4, #4]
   d4f78:	d005      	beq.n	d4f86 <_ZN6AB180514writeRegistersEhPKhjb+0x42>
        wire.write(array[ii]);
   d4f7a:	6803      	ldr	r3, [r0, #0]
   d4f7c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4f80:	689b      	ldr	r3, [r3, #8]
   d4f82:	4798      	blx	r3
    for(size_t ii = 0; ii < num; ii++) {
   d4f84:	e7f6      	b.n	d4f74 <_ZN6AB180514writeRegistersEhPKhjb+0x30>
    }
    int stat = wire.endTransmission(true);
   d4f86:	2101      	movs	r1, #1
   d4f88:	f000 ffcb 	bl	d5f22 <_ZN7TwoWire15endTransmissionEh>
    if (stat == 0) {
   d4f8c:	4603      	mov	r3, r0
   d4f8e:	b170      	cbz	r0, d4fae <_ZN6AB180514writeRegistersEhPKhjb+0x6a>
        // _log.dump(array, num);
        // _log.print("\n");
        bResult = true;
    }
    else {
        _log.error("failed to write regAddr=%02x stat=%d", regAddr, stat);
   d4f90:	4908      	ldr	r1, [pc, #32]	; (d4fb4 <_ZN6AB180514writeRegistersEhPKhjb+0x70>)
   d4f92:	4809      	ldr	r0, [pc, #36]	; (d4fb8 <_ZN6AB180514writeRegistersEhPKhjb+0x74>)
   d4f94:	463a      	mov	r2, r7
   d4f96:	f7ff ff15 	bl	d4dc4 <_ZNK5spark6Logger5errorEPKcz>
    bool bResult = false;
   d4f9a:	2500      	movs	r5, #0
    }

    if (lock) {
   d4f9c:	f1b8 0f00 	cmp.w	r8, #0
   d4fa0:	d002      	beq.n	d4fa8 <_ZN6AB180514writeRegistersEhPKhjb+0x64>
        wire.unlock();
   d4fa2:	6860      	ldr	r0, [r4, #4]
   d4fa4:	f000 ffcd 	bl	d5f42 <_ZN7TwoWire6unlockEv>
    }
    return bResult;
}
   d4fa8:	4628      	mov	r0, r5
   d4faa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        bResult = true;
   d4fae:	2501      	movs	r5, #1
   d4fb0:	e7f4      	b.n	d4f9c <_ZN6AB180514writeRegistersEhPKhjb+0x58>
   d4fb2:	bf00      	nop
   d4fb4:	000d874a 	.word	0x000d874a
   d4fb8:	2003e534 	.word	0x2003e534

000d4fbc <_ZN6AB180513writeRegisterEhhb>:
bool AB1805::writeRegister(uint8_t regAddr, uint8_t value, bool lock) {
   d4fbc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d4fbe:	f88d 200f 	strb.w	r2, [sp, #15]
    return writeRegisters(regAddr, &value, 1, lock);
   d4fc2:	9300      	str	r3, [sp, #0]
   d4fc4:	f10d 020f 	add.w	r2, sp, #15
   d4fc8:	2301      	movs	r3, #1
   d4fca:	f7ff ffbb 	bl	d4f44 <_ZN6AB180514writeRegistersEhPKhjb>
}
   d4fce:	b005      	add	sp, #20
   d4fd0:	f85d fb04 	ldr.w	pc, [sp], #4

000d4fd4 <_ZN6AB18056setWDTEi>:
bool AB1805::setWDT(int seconds) {
   d4fd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _log.info("setWDT %d", seconds);
   d4fd6:	460a      	mov	r2, r1
bool AB1805::setWDT(int seconds) {
   d4fd8:	460c      	mov	r4, r1
   d4fda:	4605      	mov	r5, r0
    _log.info("setWDT %d", seconds);
   d4fdc:	491a      	ldr	r1, [pc, #104]	; (d5048 <_ZN6AB18056setWDTEi+0x74>)
   d4fde:	481b      	ldr	r0, [pc, #108]	; (d504c <_ZN6AB18056setWDTEi+0x78>)
   d4fe0:	f7ff f8ae 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
    if (seconds < 0) {
   d4fe4:	2c00      	cmp	r4, #0
        seconds = watchdogSecs;
   d4fe6:	bfb8      	it	lt
   d4fe8:	68ec      	ldrlt	r4, [r5, #12]
    if (seconds == 0) {
   d4fea:	b97c      	cbnz	r4, d500c <_ZN6AB18056setWDTEi+0x38>
        bResult = writeRegister(REG_WDT, 0x00);
   d4fec:	2301      	movs	r3, #1
   d4fee:	4622      	mov	r2, r4
   d4ff0:	211b      	movs	r1, #27
   d4ff2:	4628      	mov	r0, r5
   d4ff4:	f7ff ffe2 	bl	d4fbc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog cleared bResult=%d", bResult);
   d4ff8:	4915      	ldr	r1, [pc, #84]	; (d5050 <_ZN6AB18056setWDTEi+0x7c>)
   d4ffa:	4602      	mov	r2, r0
        bResult = writeRegister(REG_WDT, 0x00);
   d4ffc:	4606      	mov	r6, r0
        _log.trace("watchdog cleared bResult=%d", bResult);
   d4ffe:	4813      	ldr	r0, [pc, #76]	; (d504c <_ZN6AB18056setWDTEi+0x78>)
   d5000:	f7ff fec9 	bl	d4d96 <_ZNK5spark6Logger5traceEPKcz>
        watchdogSecs = 0;
   d5004:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = 0;
   d5006:	616c      	str	r4, [r5, #20]
}
   d5008:	4630      	mov	r0, r6
   d500a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (fourSecs < 1) {
   d500c:	2c03      	cmp	r4, #3
   d500e:	dd19      	ble.n	d5044 <_ZN6AB18056setWDTEi+0x70>
        int fourSecs = seconds / 4;
   d5010:	10a7      	asrs	r7, r4, #2
   d5012:	2f1f      	cmp	r7, #31
   d5014:	bfa8      	it	ge
   d5016:	271f      	movge	r7, #31
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5018:	00ba      	lsls	r2, r7, #2
   d501a:	f062 027c 	orn	r2, r2, #124	; 0x7c
   d501e:	2301      	movs	r3, #1
   d5020:	b2d2      	uxtb	r2, r2
   d5022:	211b      	movs	r1, #27
   d5024:	4628      	mov	r0, r5
   d5026:	f7ff ffc9 	bl	d4fbc <_ZN6AB180513writeRegisterEhhb>
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d502a:	463a      	mov	r2, r7
   d502c:	4603      	mov	r3, r0
   d502e:	4909      	ldr	r1, [pc, #36]	; (d5054 <_ZN6AB18056setWDTEi+0x80>)
        bResult = writeRegister(REG_WDT, REG_WDT_RESET | (fourSecs << 2) | REG_WDT_WRB_1_4_HZ);
   d5030:	4606      	mov	r6, r0
        _log.trace("watchdog set fourSecs=%d bResult=%d", fourSecs, bResult);
   d5032:	4806      	ldr	r0, [pc, #24]	; (d504c <_ZN6AB18056setWDTEi+0x78>)
   d5034:	f7ff feaf 	bl	d4d96 <_ZNK5spark6Logger5traceEPKcz>
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5038:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   d503c:	435f      	muls	r7, r3
        watchdogSecs = seconds;
   d503e:	60ec      	str	r4, [r5, #12]
        watchdogUpdatePeriod = (fourSecs * 2000);
   d5040:	616f      	str	r7, [r5, #20]
   d5042:	e7e1      	b.n	d5008 <_ZN6AB18056setWDTEi+0x34>
            fourSecs = 1;
   d5044:	2701      	movs	r7, #1
   d5046:	e7e7      	b.n	d5018 <_ZN6AB18056setWDTEi+0x44>
   d5048:	000d876f 	.word	0x000d876f
   d504c:	2003e534 	.word	0x2003e534
   d5050:	000d8779 	.word	0x000d8779
   d5054:	000d8795 	.word	0x000d8795

000d5058 <_ZN6AB180517systemEventStaticEyi>:
        }
    }
}

// [static] 
void AB1805::systemEventStatic(system_event_t event, int param) {
   d5058:	460b      	mov	r3, r1
    if (instance) {
   d505a:	4907      	ldr	r1, [pc, #28]	; (d5078 <_ZN6AB180517systemEventStaticEyi+0x20>)
void AB1805::systemEventStatic(system_event_t event, int param) {
   d505c:	4602      	mov	r2, r0
    if (instance) {
   d505e:	6808      	ldr	r0, [r1, #0]
   d5060:	b148      	cbz	r0, d5076 <_ZN6AB180517systemEventStaticEyi+0x1e>
    if (event == reset) {
   d5062:	2b00      	cmp	r3, #0
   d5064:	bf08      	it	eq
   d5066:	f5b2 6f00 	cmpeq.w	r2, #2048	; 0x800
   d506a:	d104      	bne.n	d5076 <_ZN6AB180517systemEventStaticEyi+0x1e>
        if (watchdogSecs != 0) {
   d506c:	68c3      	ldr	r3, [r0, #12]
   d506e:	b113      	cbz	r3, d5076 <_ZN6AB180517systemEventStaticEyi+0x1e>
            setWDT(0);
   d5070:	2100      	movs	r1, #0
   d5072:	f7ff bfaf 	b.w	d4fd4 <_ZN6AB18056setWDTEi>
        instance->systemEvent(event, param);
    }
}
   d5076:	4770      	bx	lr
   d5078:	2003e538 	.word	0x2003e538

000d507c <_ZN6AB180512maskRegisterEhhhb>:
bool AB1805::maskRegister(uint8_t regAddr, uint8_t andValue, uint8_t orValue, bool lock) {
   d507c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d5080:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5084:	4605      	mov	r5, r0
   d5086:	4616      	mov	r6, r2
   d5088:	461f      	mov	r7, r3
    if (lock) {
   d508a:	f1b8 0f00 	cmp.w	r8, #0
   d508e:	d004      	beq.n	d509a <_ZN6AB180512maskRegisterEhhhb+0x1e>
        wire.lock();
   d5090:	6840      	ldr	r0, [r0, #4]
   d5092:	9101      	str	r1, [sp, #4]
   d5094:	f000 ff4c 	bl	d5f30 <_ZN7TwoWire4lockEv>
   d5098:	9901      	ldr	r1, [sp, #4]
    bResult = readRegister(regAddr, value, false);
   d509a:	9101      	str	r1, [sp, #4]
   d509c:	2300      	movs	r3, #0
   d509e:	f10d 020f 	add.w	r2, sp, #15
   d50a2:	4628      	mov	r0, r5
   d50a4:	f7ff ff08 	bl	d4eb8 <_ZN6AB180512readRegisterEhRhb>
    if (bResult) {
   d50a8:	4604      	mov	r4, r0
   d50aa:	b160      	cbz	r0, d50c6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
        uint8_t newValue = (value & andValue) | orValue;
   d50ac:	f89d 300f 	ldrb.w	r3, [sp, #15]
   d50b0:	ea03 0206 	and.w	r2, r3, r6
   d50b4:	433a      	orrs	r2, r7
        if (newValue != value) {
   d50b6:	4293      	cmp	r3, r2
   d50b8:	d005      	beq.n	d50c6 <_ZN6AB180512maskRegisterEhhhb+0x4a>
            bResult = writeRegister(regAddr, newValue, false);
   d50ba:	9901      	ldr	r1, [sp, #4]
   d50bc:	2300      	movs	r3, #0
   d50be:	4628      	mov	r0, r5
   d50c0:	f7ff ff7c 	bl	d4fbc <_ZN6AB180513writeRegisterEhhb>
   d50c4:	4604      	mov	r4, r0
    if (lock) {
   d50c6:	f1b8 0f00 	cmp.w	r8, #0
   d50ca:	d002      	beq.n	d50d2 <_ZN6AB180512maskRegisterEhhhb+0x56>
        wire.unlock();
   d50cc:	6868      	ldr	r0, [r5, #4]
   d50ce:	f000 ff38 	bl	d5f42 <_ZN7TwoWire6unlockEv>
}
   d50d2:	4620      	mov	r0, r4
   d50d4:	b004      	add	sp, #16
   d50d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d50da <_ZN6AB180510isBitClearEhhb>:
bool AB1805::isBitClear(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d50da:	b513      	push	{r0, r1, r4, lr}
   d50dc:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d50de:	f10d 0207 	add.w	r2, sp, #7
   d50e2:	f7ff fee9 	bl	d4eb8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) == 0);
   d50e6:	b128      	cbz	r0, d50f4 <_ZN6AB180510isBitClearEhhb+0x1a>
   d50e8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d50ec:	421c      	tst	r4, r3
   d50ee:	bf0c      	ite	eq
   d50f0:	2001      	moveq	r0, #1
   d50f2:	2000      	movne	r0, #0
}
   d50f4:	b002      	add	sp, #8
   d50f6:	bd10      	pop	{r4, pc}

000d50f8 <_ZN6AB18058isBitSetEhhb>:
bool AB1805::isBitSet(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d50f8:	b513      	push	{r0, r1, r4, lr}
   d50fa:	4614      	mov	r4, r2
    bResult = readRegister(regAddr, value, lock);
   d50fc:	f10d 0207 	add.w	r2, sp, #7
   d5100:	f7ff feda 	bl	d4eb8 <_ZN6AB180512readRegisterEhRhb>
    return bResult && ((value & bitMask) != 0);
   d5104:	b128      	cbz	r0, d5112 <_ZN6AB18058isBitSetEhhb+0x1a>
   d5106:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d510a:	421c      	tst	r4, r3
   d510c:	bf14      	ite	ne
   d510e:	2001      	movne	r0, #1
   d5110:	2000      	moveq	r0, #0
}
   d5112:	b002      	add	sp, #8
   d5114:	bd10      	pop	{r4, pc}

000d5116 <_ZN6AB180516clearRegisterBitEhhb>:
bool AB1805::clearRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d5116:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, ~bitMask, 0x00, lock);
   d5118:	43d2      	mvns	r2, r2
   d511a:	9300      	str	r3, [sp, #0]
   d511c:	b2d2      	uxtb	r2, r2
   d511e:	2300      	movs	r3, #0
   d5120:	f7ff ffac 	bl	d507c <_ZN6AB180512maskRegisterEhhhb>
}
   d5124:	b003      	add	sp, #12
   d5126:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d512c <_ZN6AB180516updateWakeReasonEv>:
bool AB1805::updateWakeReason() {
   d512c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bool bResult = readRegister(REG_STATUS, status);
   d512e:	2301      	movs	r3, #1
   d5130:	f10d 0207 	add.w	r2, sp, #7
   d5134:	210f      	movs	r1, #15
bool AB1805::updateWakeReason() {
   d5136:	4604      	mov	r4, r0
    bool bResult = readRegister(REG_STATUS, status);
   d5138:	f7ff febe 	bl	d4eb8 <_ZN6AB180512readRegisterEhRhb>
    if (!bResult) {
   d513c:	4605      	mov	r5, r0
   d513e:	b938      	cbnz	r0, d5150 <_ZN6AB180516updateWakeReasonEv+0x24>
        _log.error(errorMsg, __LINE__);
   d5140:	491e      	ldr	r1, [pc, #120]	; (d51bc <_ZN6AB180516updateWakeReasonEv+0x90>)
   d5142:	481f      	ldr	r0, [pc, #124]	; (d51c0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5144:	22ad      	movs	r2, #173	; 0xad
   d5146:	f7ff fe3d 	bl	d4dc4 <_ZNK5spark6Logger5errorEPKcz>
}
   d514a:	4628      	mov	r0, r5
   d514c:	b003      	add	sp, #12
   d514e:	bd30      	pop	{r4, r5, pc}
    if ((status & REG_STATUS_WDT) != 0) {
   d5150:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d5154:	f013 0f20 	tst.w	r3, #32
        wakeReason = WakeReason::WATCHDOG;
   d5158:	f04f 0301 	mov.w	r3, #1
    if ((status & REG_STATUS_WDT) != 0) {
   d515c:	d00b      	beq.n	d5176 <_ZN6AB180516updateWakeReasonEv+0x4a>
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d515e:	2220      	movs	r2, #32
        wakeReason = WakeReason::WATCHDOG;
   d5160:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_WDT);
   d5162:	210f      	movs	r1, #15
   d5164:	4620      	mov	r0, r4
   d5166:	f7ff ffd6 	bl	d5116 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "WATCHDOG";
   d516a:	4a16      	ldr	r2, [pc, #88]	; (d51c4 <_ZN6AB180516updateWakeReasonEv+0x98>)
        _log.info("wake reason = %s", reason);
   d516c:	4916      	ldr	r1, [pc, #88]	; (d51c8 <_ZN6AB180516updateWakeReasonEv+0x9c>)
   d516e:	4814      	ldr	r0, [pc, #80]	; (d51c0 <_ZN6AB180516updateWakeReasonEv+0x94>)
   d5170:	f7fe ffe6 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d5174:	e7e9      	b.n	d514a <_ZN6AB180516updateWakeReasonEv+0x1e>
    else if (isBitSet(REG_SLEEP_CTRL, REG_SLEEP_CTRL_SLST)) {
   d5176:	2208      	movs	r2, #8
   d5178:	2117      	movs	r1, #23
   d517a:	4620      	mov	r0, r4
   d517c:	f7ff ffbc 	bl	d50f8 <_ZN6AB18058isBitSetEhhb>
   d5180:	b118      	cbz	r0, d518a <_ZN6AB180516updateWakeReasonEv+0x5e>
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5182:	2302      	movs	r3, #2
        reason = "DEEP_POWER_DOWN";
   d5184:	4a11      	ldr	r2, [pc, #68]	; (d51cc <_ZN6AB180516updateWakeReasonEv+0xa0>)
        wakeReason = WakeReason::DEEP_POWER_DOWN;
   d5186:	61e3      	str	r3, [r4, #28]
   d5188:	e7f0      	b.n	d516c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_TIM) != 0) {
   d518a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   d518e:	071a      	lsls	r2, r3, #28
   d5190:	d509      	bpl.n	d51a6 <_ZN6AB180516updateWakeReasonEv+0x7a>
        wakeReason = WakeReason::COUNTDOWN_TIMER;
   d5192:	2303      	movs	r3, #3
   d5194:	61e3      	str	r3, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_TIM);            
   d5196:	2208      	movs	r2, #8
   d5198:	2301      	movs	r3, #1
   d519a:	210f      	movs	r1, #15
   d519c:	4620      	mov	r0, r4
   d519e:	f7ff ffba 	bl	d5116 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "COUNTDOWN_TIMER";
   d51a2:	4a0b      	ldr	r2, [pc, #44]	; (d51d0 <_ZN6AB180516updateWakeReasonEv+0xa4>)
   d51a4:	e7e2      	b.n	d516c <_ZN6AB180516updateWakeReasonEv+0x40>
    else if ((status & REG_STATUS_ALM) != 0) {
   d51a6:	075b      	lsls	r3, r3, #29
   d51a8:	d5cf      	bpl.n	d514a <_ZN6AB180516updateWakeReasonEv+0x1e>
        wakeReason = WakeReason::ALARM;
   d51aa:	2204      	movs	r2, #4
   d51ac:	61e2      	str	r2, [r4, #28]
        clearRegisterBit(REG_STATUS, REG_STATUS_ALM);            
   d51ae:	2301      	movs	r3, #1
   d51b0:	210f      	movs	r1, #15
   d51b2:	4620      	mov	r0, r4
   d51b4:	f7ff ffaf 	bl	d5116 <_ZN6AB180516clearRegisterBitEhhb>
        reason = "ALARM";
   d51b8:	4a06      	ldr	r2, [pc, #24]	; (d51d4 <_ZN6AB180516updateWakeReasonEv+0xa8>)
   d51ba:	e7d7      	b.n	d516c <_ZN6AB180516updateWakeReasonEv+0x40>
   d51bc:	000d87e8 	.word	0x000d87e8
   d51c0:	2003e534 	.word	0x2003e534
   d51c4:	000d87b9 	.word	0x000d87b9
   d51c8:	000d8807 	.word	0x000d8807
   d51cc:	000d87c2 	.word	0x000d87c2
   d51d0:	000d87d2 	.word	0x000d87d2
   d51d4:	000d87e2 	.word	0x000d87e2

000d51d8 <_ZN6AB180514setRegisterBitEhhb>:
bool AB1805::setRegisterBit(uint8_t regAddr, uint8_t bitMask, bool lock) {
   d51d8:	b507      	push	{r0, r1, r2, lr}
    return maskRegister(regAddr, 0xff, bitMask, lock);
   d51da:	9300      	str	r3, [sp, #0]
   d51dc:	4613      	mov	r3, r2
   d51de:	22ff      	movs	r2, #255	; 0xff
   d51e0:	f7ff ff4c 	bl	d507c <_ZN6AB180512maskRegisterEhhhb>
}
   d51e4:	b003      	add	sp, #12
   d51e6:	f85d fb04 	ldr.w	pc, [sp], #4

000d51ea <_ZN6AB18057readRamEjPhjb>:
bool AB1805::readRam(size_t ramAddr, uint8_t *data, size_t dataLen, bool lock) {
   d51ea:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d51ee:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d51f2:	4605      	mov	r5, r0
   d51f4:	460c      	mov	r4, r1
   d51f6:	4691      	mov	r9, r2
   d51f8:	461f      	mov	r7, r3
    if (lock) {
   d51fa:	f1ba 0f00 	cmp.w	sl, #0
   d51fe:	d002      	beq.n	d5206 <_ZN6AB18057readRamEjPhjb+0x1c>
        wire.lock();
   d5200:	6840      	ldr	r0, [r0, #4]
   d5202:	f000 fe95 	bl	d5f30 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d5206:	b307      	cbz	r7, d524a <_ZN6AB18057readRamEjPhjb+0x60>
        if (count > 32) {
   d5208:	2f20      	cmp	r7, #32
   d520a:	463e      	mov	r6, r7
   d520c:	bf28      	it	cs
   d520e:	2620      	movcs	r6, #32
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5210:	2c7f      	cmp	r4, #127	; 0x7f
   d5212:	d826      	bhi.n	d5262 <_ZN6AB18057readRamEjPhjb+0x78>
   d5214:	1933      	adds	r3, r6, r4
   d5216:	2b80      	cmp	r3, #128	; 0x80
   d5218:	d901      	bls.n	d521e <_ZN6AB18057readRamEjPhjb+0x34>
            count = 128 - ramAddr;
   d521a:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d521e:	2301      	movs	r3, #1
   d5220:	2204      	movs	r2, #4
   d5222:	213f      	movs	r1, #63	; 0x3f
   d5224:	4628      	mov	r0, r5
   d5226:	f7ff ff76 	bl	d5116 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = readRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d522a:	2300      	movs	r3, #0
   d522c:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d5230:	9300      	str	r3, [sp, #0]
   d5232:	464a      	mov	r2, r9
   d5234:	4633      	mov	r3, r6
   d5236:	b2c9      	uxtb	r1, r1
   d5238:	4628      	mov	r0, r5
   d523a:	f7ff fdef 	bl	d4e1c <_ZN6AB180513readRegistersEhPhjb>
        if (!bResult) {
   d523e:	4680      	mov	r8, r0
   d5240:	b128      	cbz	r0, d524e <_ZN6AB18057readRamEjPhjb+0x64>
        ramAddr += count;
   d5242:	4434      	add	r4, r6
        dataLen -= count;
   d5244:	1bbf      	subs	r7, r7, r6
        data += count;
   d5246:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d5248:	e7dd      	b.n	d5206 <_ZN6AB18057readRamEjPhjb+0x1c>
   d524a:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d524e:	f1ba 0f00 	cmp.w	sl, #0
   d5252:	d002      	beq.n	d525a <_ZN6AB18057readRamEjPhjb+0x70>
        wire.unlock();
   d5254:	6868      	ldr	r0, [r5, #4]
   d5256:	f000 fe74 	bl	d5f42 <_ZN7TwoWire6unlockEv>
}
   d525a:	4640      	mov	r0, r8
   d525c:	b002      	add	sp, #8
   d525e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d5262:	2301      	movs	r3, #1
   d5264:	2204      	movs	r2, #4
   d5266:	213f      	movs	r1, #63	; 0x3f
   d5268:	4628      	mov	r0, r5
   d526a:	f7ff ffb5 	bl	d51d8 <_ZN6AB180514setRegisterBitEhhb>
   d526e:	e7dc      	b.n	d522a <_ZN6AB18057readRamEjPhjb+0x40>

000d5270 <_ZN6AB18058writeRamEjPKhjb>:
bool AB1805::writeRam(size_t ramAddr, const uint8_t *data, size_t dataLen, bool lock) {
   d5270:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   d5274:	f89d a028 	ldrb.w	sl, [sp, #40]	; 0x28
   d5278:	4605      	mov	r5, r0
   d527a:	460c      	mov	r4, r1
   d527c:	4691      	mov	r9, r2
   d527e:	461f      	mov	r7, r3
    if (lock) {
   d5280:	f1ba 0f00 	cmp.w	sl, #0
   d5284:	d002      	beq.n	d528c <_ZN6AB18058writeRamEjPKhjb+0x1c>
        wire.lock();
   d5286:	6840      	ldr	r0, [r0, #4]
   d5288:	f000 fe52 	bl	d5f30 <_ZN7TwoWire4lockEv>
    while(dataLen > 0) {
   d528c:	b307      	cbz	r7, d52d0 <_ZN6AB18058writeRamEjPKhjb+0x60>
        if (count > 31) {
   d528e:	2f1f      	cmp	r7, #31
   d5290:	463e      	mov	r6, r7
   d5292:	bf28      	it	cs
   d5294:	261f      	movcs	r6, #31
        if ((ramAddr < 128) && ((ramAddr + count) > 128)) {
   d5296:	2c7f      	cmp	r4, #127	; 0x7f
   d5298:	d826      	bhi.n	d52e8 <_ZN6AB18058writeRamEjPKhjb+0x78>
   d529a:	1933      	adds	r3, r6, r4
   d529c:	2b80      	cmp	r3, #128	; 0x80
   d529e:	d901      	bls.n	d52a4 <_ZN6AB18058writeRamEjPKhjb+0x34>
            count = 128 - ramAddr;
   d52a0:	f1c4 0680 	rsb	r6, r4, #128	; 0x80
            clearRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d52a4:	2301      	movs	r3, #1
   d52a6:	2204      	movs	r2, #4
   d52a8:	213f      	movs	r1, #63	; 0x3f
   d52aa:	4628      	mov	r0, r5
   d52ac:	f7ff ff33 	bl	d5116 <_ZN6AB180516clearRegisterBitEhhb>
        bResult = writeRegisters(REG_ALT_RAM + (ramAddr & 0x7f), data, count, false);
   d52b0:	2300      	movs	r3, #0
   d52b2:	f064 017f 	orn	r1, r4, #127	; 0x7f
   d52b6:	9300      	str	r3, [sp, #0]
   d52b8:	464a      	mov	r2, r9
   d52ba:	4633      	mov	r3, r6
   d52bc:	b2c9      	uxtb	r1, r1
   d52be:	4628      	mov	r0, r5
   d52c0:	f7ff fe40 	bl	d4f44 <_ZN6AB180514writeRegistersEhPKhjb>
        if (!bResult) {
   d52c4:	4680      	mov	r8, r0
   d52c6:	b128      	cbz	r0, d52d4 <_ZN6AB18058writeRamEjPKhjb+0x64>
        ramAddr += count;
   d52c8:	4434      	add	r4, r6
        dataLen -= count;
   d52ca:	1bbf      	subs	r7, r7, r6
        data += count;
   d52cc:	44b1      	add	r9, r6
    while(dataLen > 0) {
   d52ce:	e7dd      	b.n	d528c <_ZN6AB18058writeRamEjPKhjb+0x1c>
   d52d0:	f04f 0801 	mov.w	r8, #1
    if (lock) {
   d52d4:	f1ba 0f00 	cmp.w	sl, #0
   d52d8:	d002      	beq.n	d52e0 <_ZN6AB18058writeRamEjPKhjb+0x70>
        wire.unlock();
   d52da:	6868      	ldr	r0, [r5, #4]
   d52dc:	f000 fe31 	bl	d5f42 <_ZN7TwoWire6unlockEv>
}
   d52e0:	4640      	mov	r0, r8
   d52e2:	b002      	add	sp, #8
   d52e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            setRegisterBit(REG_EXT_ADDR, REG_EXT_ADDR_XADA);
   d52e8:	2301      	movs	r3, #1
   d52ea:	2204      	movs	r2, #4
   d52ec:	213f      	movs	r1, #63	; 0x3f
   d52ee:	4628      	mov	r0, r5
   d52f0:	f7ff ff72 	bl	d51d8 <_ZN6AB180514setRegisterBitEhhb>
   d52f4:	e7dc      	b.n	d52b0 <_ZN6AB18058writeRamEjPKhjb+0x40>
	...

000d52f8 <_ZN6AB180510tmToStringEPK2tm>:
String AB1805::tmToString(const struct tm *timeptr) {
   d52f8:	b530      	push	{r4, r5, lr}
   d52fa:	b085      	sub	sp, #20
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d52fc:	680d      	ldr	r5, [r1, #0]
   d52fe:	e9d1 3204 	ldrd	r3, r2, [r1, #16]
   d5302:	9503      	str	r5, [sp, #12]
   d5304:	684d      	ldr	r5, [r1, #4]
   d5306:	9502      	str	r5, [sp, #8]
   d5308:	688d      	ldr	r5, [r1, #8]
   d530a:	9501      	str	r5, [sp, #4]
   d530c:	68c9      	ldr	r1, [r1, #12]
   d530e:	9100      	str	r1, [sp, #0]
   d5310:	3301      	adds	r3, #1
   d5312:	4904      	ldr	r1, [pc, #16]	; (d5324 <_ZN6AB180510tmToStringEPK2tm+0x2c>)
   d5314:	f202 726c 	addw	r2, r2, #1900	; 0x76c
String AB1805::tmToString(const struct tm *timeptr) {
   d5318:	4604      	mov	r4, r0
        timeptr->tm_hour, timeptr->tm_min, timeptr->tm_sec);
   d531a:	f002 fa1b 	bl	d7754 <_ZN6String6formatEPKcz>
}
   d531e:	4620      	mov	r0, r4
   d5320:	b005      	add	sp, #20
   d5322:	bd30      	pop	{r4, r5, pc}
   d5324:	000d8818 	.word	0x000d8818

000d5328 <_ZN6AB180510bcdToValueEh>:
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d5328:	1103      	asrs	r3, r0, #4
}
   d532a:	220a      	movs	r2, #10
    return (bcd >> 4) * 10 + (bcd & 0x0f);
   d532c:	f000 000f 	and.w	r0, r0, #15
}
   d5330:	fb02 0003 	mla	r0, r2, r3, r0
   d5334:	4770      	bx	lr

000d5336 <_ZN6AB180513registersToTmEPKhP2tmb>:
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d5336:	b538      	push	{r3, r4, r5, lr}
   d5338:	4604      	mov	r4, r0
    timeptr->tm_sec = bcdToValue(*p++);
   d533a:	7800      	ldrb	r0, [r0, #0]
void AB1805::registersToTm(const uint8_t *array, struct tm *timeptr, bool includeYear) {
   d533c:	4615      	mov	r5, r2
    timeptr->tm_sec = bcdToValue(*p++);
   d533e:	f7ff fff3 	bl	d5328 <_ZN6AB180510bcdToValueEh>
   d5342:	6008      	str	r0, [r1, #0]
    timeptr->tm_min = bcdToValue(*p++);
   d5344:	7860      	ldrb	r0, [r4, #1]
   d5346:	f7ff ffef 	bl	d5328 <_ZN6AB180510bcdToValueEh>
   d534a:	6048      	str	r0, [r1, #4]
    timeptr->tm_hour = bcdToValue(*p++);
   d534c:	78a0      	ldrb	r0, [r4, #2]
   d534e:	f7ff ffeb 	bl	d5328 <_ZN6AB180510bcdToValueEh>
   d5352:	6088      	str	r0, [r1, #8]
    timeptr->tm_mday = bcdToValue(*p++);
   d5354:	78e0      	ldrb	r0, [r4, #3]
   d5356:	f7ff ffe7 	bl	d5328 <_ZN6AB180510bcdToValueEh>
   d535a:	60c8      	str	r0, [r1, #12]
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d535c:	7920      	ldrb	r0, [r4, #4]
   d535e:	f7ff ffe3 	bl	d5328 <_ZN6AB180510bcdToValueEh>
   d5362:	3801      	subs	r0, #1
   d5364:	6108      	str	r0, [r1, #16]
    if (includeYear) {
   d5366:	b92d      	cbnz	r5, d5374 <_ZN6AB180513registersToTmEPKhP2tmb+0x3e>
    timeptr->tm_mon = bcdToValue(*p++) - 1; // struct tm is 0-11, not 1-12!
   d5368:	1d65      	adds	r5, r4, #5
    timeptr->tm_wday = bcdToValue(*p++);
   d536a:	7828      	ldrb	r0, [r5, #0]
   d536c:	f7ff ffdc 	bl	d5328 <_ZN6AB180510bcdToValueEh>
   d5370:	6188      	str	r0, [r1, #24]
}
   d5372:	bd38      	pop	{r3, r4, r5, pc}
        timeptr->tm_year = bcdToValue(*p++) + 100;
   d5374:	7960      	ldrb	r0, [r4, #5]
   d5376:	f7ff ffd7 	bl	d5328 <_ZN6AB180510bcdToValueEh>
   d537a:	3064      	adds	r0, #100	; 0x64
   d537c:	1da5      	adds	r5, r4, #6
   d537e:	6148      	str	r0, [r1, #20]
   d5380:	e7f3      	b.n	d536a <_ZN6AB180513registersToTmEPKhP2tmb+0x34>
	...

000d5384 <_ZN6AB180510getRtcAsTmEP2tm>:
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5384:	b570      	push	{r4, r5, r6, lr}
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5386:	2301      	movs	r3, #1
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5388:	b088      	sub	sp, #32
   d538a:	460d      	mov	r5, r1
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d538c:	461a      	mov	r2, r3
   d538e:	2110      	movs	r1, #16
bool AB1805::getRtcAsTm(struct tm *timeptr) {
   d5390:	4604      	mov	r4, r0
    if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC)) {
   d5392:	f7ff fea2 	bl	d50da <_ZN6AB180510isBitClearEhhb>
   d5396:	b1f0      	cbz	r0, d53d6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
        bResult = readRegisters(REG_HUNDREDTH, array, sizeof(array));
   d5398:	2308      	movs	r3, #8
   d539a:	2601      	movs	r6, #1
   d539c:	4620      	mov	r0, r4
   d539e:	9600      	str	r6, [sp, #0]
   d53a0:	eb0d 0203 	add.w	r2, sp, r3
   d53a4:	2100      	movs	r1, #0
   d53a6:	f7ff fd39 	bl	d4e1c <_ZN6AB180513readRegistersEhPhjb>
        if (bResult) {
   d53aa:	4604      	mov	r4, r0
   d53ac:	b198      	cbz	r0, d53d6 <_ZN6AB180510getRtcAsTmEP2tm+0x52>
            registersToTm(&array[1], timeptr, true);
   d53ae:	4632      	mov	r2, r6
   d53b0:	4629      	mov	r1, r5
   d53b2:	f10d 0009 	add.w	r0, sp, #9
   d53b6:	f7ff ffbe 	bl	d5336 <_ZN6AB180513registersToTmEPKhP2tmb>
            _log.info("getRtcAsTm %s", tmToString(timeptr).c_str());
   d53ba:	a804      	add	r0, sp, #16
   d53bc:	f7ff ff9c 	bl	d52f8 <_ZN6AB180510tmToStringEPK2tm>
   d53c0:	4808      	ldr	r0, [pc, #32]	; (d53e4 <_ZN6AB180510getRtcAsTmEP2tm+0x60>)
   d53c2:	9a04      	ldr	r2, [sp, #16]
   d53c4:	4908      	ldr	r1, [pc, #32]	; (d53e8 <_ZN6AB180510getRtcAsTmEP2tm+0x64>)
   d53c6:	f7fe febb 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d53ca:	a804      	add	r0, sp, #16
   d53cc:	f002 f920 	bl	d7610 <_ZN6StringD1Ev>
}
   d53d0:	4620      	mov	r0, r4
   d53d2:	b008      	add	sp, #32
   d53d4:	bd70      	pop	{r4, r5, r6, pc}
        memset(timeptr, 0, sizeof(*timeptr));
   d53d6:	2224      	movs	r2, #36	; 0x24
   d53d8:	2100      	movs	r1, #0
   d53da:	4628      	mov	r0, r5
   d53dc:	f002 fddc 	bl	d7f98 <memset>
   d53e0:	2400      	movs	r4, #0
   d53e2:	e7f5      	b.n	d53d0 <_ZN6AB180510getRtcAsTmEP2tm+0x4c>
   d53e4:	2003e534 	.word	0x2003e534
   d53e8:	000d8836 	.word	0x000d8836

000d53ec <_ZN6AB180512getRtcAsTimeERx>:
bool AB1805::getRtcAsTime(time_t &time) {
   d53ec:	b530      	push	{r4, r5, lr}
   d53ee:	b08b      	sub	sp, #44	; 0x2c
   d53f0:	460d      	mov	r5, r1
    bool bResult = getRtcAsTm(&tmstruct);
   d53f2:	a901      	add	r1, sp, #4
   d53f4:	f7ff ffc6 	bl	d5384 <_ZN6AB180510getRtcAsTmEP2tm>
    if (bResult) {
   d53f8:	4604      	mov	r4, r0
   d53fa:	b120      	cbz	r0, d5406 <_ZN6AB180512getRtcAsTimeERx+0x1a>
        time = mktime(&tmstruct);
   d53fc:	a801      	add	r0, sp, #4
   d53fe:	f000 fc59 	bl	d5cb4 <mktime>
   d5402:	e9c5 0100 	strd	r0, r1, [r5]
}
   d5406:	4620      	mov	r0, r4
   d5408:	b00b      	add	sp, #44	; 0x2c
   d540a:	bd30      	pop	{r4, r5, pc}

000d540c <_ZN6AB18055setupEb>:
void AB1805::setup(bool callBegin) {
   d540c:	b510      	push	{r4, lr}
   d540e:	4604      	mov	r4, r0
   d5410:	b088      	sub	sp, #32
    if (callBegin) {
   d5412:	b111      	cbz	r1, d541a <_ZN6AB18055setupEb+0xe>
        wire.begin();
   d5414:	6840      	ldr	r0, [r0, #4]
   d5416:	f000 fd4b 	bl	d5eb0 <_ZN7TwoWire5beginEv>
    if (detectChip()) {
   d541a:	4620      	mov	r0, r4
   d541c:	f7ff fd54 	bl	d4ec8 <_ZN6AB180510detectChipEv>
   d5420:	b370      	cbz	r0, d5480 <_ZN6AB18055setupEb+0x74>
        updateWakeReason();
   d5422:	4620      	mov	r0, r4
   d5424:	f7ff fe82 	bl	d512c <_ZN6AB180516updateWakeReasonEv>
        if (isBitClear(REG_CTRL_1, REG_CTRL_1_WRTC) && !Time.isValid()) {
   d5428:	2301      	movs	r3, #1
   d542a:	461a      	mov	r2, r3
   d542c:	2110      	movs	r1, #16
   d542e:	4620      	mov	r0, r4
   d5430:	f7ff fe53 	bl	d50da <_ZN6AB180510isBitClearEhhb>
   d5434:	b1d8      	cbz	r0, d546e <_ZN6AB18055setupEb+0x62>
   d5436:	f002 facd 	bl	d79d4 <_ZN9TimeClass7isValidEv>
   d543a:	b9c0      	cbnz	r0, d546e <_ZN6AB18055setupEb+0x62>
            getRtcAsTime(time);
   d543c:	a902      	add	r1, sp, #8
   d543e:	4620      	mov	r0, r4
   d5440:	f7ff ffd4 	bl	d53ec <_ZN6AB180512getRtcAsTimeERx>
            Time.setTime(time);
   d5444:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   d5448:	f002 f9cb 	bl	d77e2 <_ZN9TimeClass7setTimeEx>
            _log.info("set system clock from RTC %s", Time.format(time, TIME_FORMAT_DEFAULT).c_str());
   d544c:	4b0f      	ldr	r3, [pc, #60]	; (d548c <_ZN6AB18055setupEb+0x80>)
   d544e:	4910      	ldr	r1, [pc, #64]	; (d5490 <_ZN6AB18055setupEb+0x84>)
   d5450:	681b      	ldr	r3, [r3, #0]
   d5452:	9300      	str	r3, [sp, #0]
   d5454:	a804      	add	r0, sp, #16
   d5456:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d545a:	f002 fa79 	bl	d7950 <_ZN9TimeClass6formatExPKc>
   d545e:	480d      	ldr	r0, [pc, #52]	; (d5494 <_ZN6AB18055setupEb+0x88>)
   d5460:	9a04      	ldr	r2, [sp, #16]
   d5462:	490d      	ldr	r1, [pc, #52]	; (d5498 <_ZN6AB18055setupEb+0x8c>)
   d5464:	f7fe fe6c 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
   d5468:	a804      	add	r0, sp, #16
   d546a:	f002 f8d1 	bl	d7610 <_ZN6StringD1Ev>
        return system_subscribe_event(events, reinterpret_cast<system_event_handler_t*>(handler), NULL);
   d546e:	4a0b      	ldr	r2, [pc, #44]	; (d549c <_ZN6AB18055setupEb+0x90>)
   d5470:	2300      	movs	r3, #0
   d5472:	2100      	movs	r1, #0
   d5474:	f44f 6000 	mov.w	r0, #2048	; 0x800
   d5478:	f000 fb20 	bl	d5abc <system_subscribe_event>
}
   d547c:	b008      	add	sp, #32
   d547e:	bd10      	pop	{r4, pc}
        _log.error("failed to detect AB1805");
   d5480:	4907      	ldr	r1, [pc, #28]	; (d54a0 <_ZN6AB18055setupEb+0x94>)
   d5482:	4804      	ldr	r0, [pc, #16]	; (d5494 <_ZN6AB18055setupEb+0x88>)
   d5484:	f7ff fc9e 	bl	d4dc4 <_ZNK5spark6Logger5errorEPKcz>
   d5488:	e7f1      	b.n	d546e <_ZN6AB18055setupEb+0x62>
   d548a:	bf00      	nop
   d548c:	2003e430 	.word	0x2003e430
   d5490:	2003e5d8 	.word	0x2003e5d8
   d5494:	2003e534 	.word	0x2003e534
   d5498:	000d8844 	.word	0x000d8844
   d549c:	000d5059 	.word	0x000d5059
   d54a0:	000d8861 	.word	0x000d8861

000d54a4 <_GLOBAL__sub_I__ZN6AB18058instanceE>:
        name_(name) {
   d54a4:	4b01      	ldr	r3, [pc, #4]	; (d54ac <_GLOBAL__sub_I__ZN6AB18058instanceE+0x8>)
   d54a6:	4a02      	ldr	r2, [pc, #8]	; (d54b0 <_GLOBAL__sub_I__ZN6AB18058instanceE+0xc>)
   d54a8:	601a      	str	r2, [r3, #0]
}
   d54aa:	4770      	bx	lr
   d54ac:	2003e534 	.word	0x2003e534
   d54b0:	000d8879 	.word	0x000d8879

000d54b4 <_ZN6MB85RCD1Ev>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
	wire(wire), memorySize(memorySize), addr(addr) {
}

MB85RC::~MB85RC() {
}
   d54b4:	4770      	bx	lr

000d54b6 <_ZN6MB85RCD0Ev>:
MB85RC::~MB85RC() {
   d54b6:	b510      	push	{r4, lr}
}
   d54b8:	2110      	movs	r1, #16
MB85RC::~MB85RC() {
   d54ba:	4604      	mov	r4, r0
}
   d54bc:	f002 fd12 	bl	d7ee4 <_ZdlPvj>
   d54c0:	4620      	mov	r0, r4
   d54c2:	bd10      	pop	{r4, pc}

000d54c4 <_ZN7TwoWire5writeEj>:
  bool lock();
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
   d54c4:	6803      	ldr	r3, [r0, #0]
   d54c6:	b2c9      	uxtb	r1, r1
   d54c8:	689b      	ldr	r3, [r3, #8]
   d54ca:	4718      	bx	r3

000d54cc <_ZN6MB85RCC1ER7TwoWireji>:
MB85RC::MB85RC(TwoWire &wire, size_t memorySize, int addr) :
   d54cc:	b530      	push	{r4, r5, lr}
	wire(wire), memorySize(memorySize), addr(addr) {
   d54ce:	4d03      	ldr	r5, [pc, #12]	; (d54dc <_ZN6MB85RCC1ER7TwoWireji+0x10>)
   d54d0:	e9c0 2302 	strd	r2, r3, [r0, #8]
   d54d4:	e9c0 5100 	strd	r5, r1, [r0]
}
   d54d8:	bd30      	pop	{r4, r5, pc}
   d54da:	bf00      	nop
   d54dc:	000d88d0 	.word	0x000d88d0

000d54e0 <_ZN6MB85RC5beginEv>:

void MB85RC::begin() {
	wire.begin();
   d54e0:	6840      	ldr	r0, [r0, #4]
   d54e2:	f000 bce5 	b.w	d5eb0 <_ZN7TwoWire5beginEv>

000d54e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) noexcept : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
   d54e6:	b510      	push	{r4, lr}
   d54e8:	4604      	mov	r4, r0
      { _M_device.unlock(); }
   d54ea:	6800      	ldr	r0, [r0, #0]
   d54ec:	f000 fd29 	bl	d5f42 <_ZN7TwoWire6unlockEv>
   d54f0:	4620      	mov	r0, r4
   d54f2:	bd10      	pop	{r4, pc}

000d54f4 <_ZN6MB85RC5eraseEv>:
}

bool MB85RC::erase() {
   d54f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d54f8:	b08a      	sub	sp, #40	; 0x28
   d54fa:	4604      	mov	r4, r0

	WITH_LOCK(wire) {
   d54fc:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d54fe:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
   d5500:	f000 fd16 	bl	d5f30 <_ZN7TwoWire4lockEv>
		size_t framAddr = 0;
		size_t totalLen = memorySize;

		uint8_t zero[30];
		memset(zero, 0, sizeof(zero));
   d5504:	221e      	movs	r2, #30
   d5506:	2100      	movs	r1, #0
   d5508:	a802      	add	r0, sp, #8
		size_t totalLen = memorySize;
   d550a:	68a7      	ldr	r7, [r4, #8]
		memset(zero, 0, sizeof(zero));
   d550c:	f002 fd44 	bl	d7f98 <memset>
		size_t framAddr = 0;
   d5510:	2600      	movs	r6, #0

		while(totalLen > 0) {
   d5512:	b1ef      	cbz	r7, d5550 <_ZN6MB85RC5eraseEv+0x5c>
			size_t count = totalLen;
			if (count > sizeof(zero)) {
				count = sizeof(zero);
			}

			bool result = writeData(framAddr, zero, count);
   d5514:	6823      	ldr	r3, [r4, #0]
   d5516:	2f1e      	cmp	r7, #30
   d5518:	46b8      	mov	r8, r7
   d551a:	bf28      	it	cs
   d551c:	f04f 081e 	movcs.w	r8, #30
   d5520:	68dd      	ldr	r5, [r3, #12]
   d5522:	aa02      	add	r2, sp, #8
   d5524:	4643      	mov	r3, r8
   d5526:	4631      	mov	r1, r6
   d5528:	4620      	mov	r0, r4
   d552a:	47a8      	blx	r5
			if (!result) {
   d552c:	4605      	mov	r5, r0
   d552e:	b958      	cbnz	r0, d5548 <_ZN6MB85RC5eraseEv+0x54>
				Log.info("writeData failed during erase framAddr=%u", framAddr);
   d5530:	480a      	ldr	r0, [pc, #40]	; (d555c <_ZN6MB85RC5eraseEv+0x68>)
   d5532:	490b      	ldr	r1, [pc, #44]	; (d5560 <_ZN6MB85RC5eraseEv+0x6c>)
   d5534:	4632      	mov	r2, r6
   d5536:	f7fe fe03 	bl	d4140 <_ZNK5spark6Logger4infoEPKcz>
	WITH_LOCK(wire) {
   d553a:	a801      	add	r0, sp, #4
   d553c:	f7ff ffd3 	bl	d54e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
			framAddr += count;
		}
	}

	return true;
}
   d5540:	4628      	mov	r0, r5
   d5542:	b00a      	add	sp, #40	; 0x28
   d5544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			totalLen -= count;
   d5548:	eba7 0708 	sub.w	r7, r7, r8
			framAddr += count;
   d554c:	4446      	add	r6, r8
		while(totalLen > 0) {
   d554e:	e7e0      	b.n	d5512 <_ZN6MB85RC5eraseEv+0x1e>
	WITH_LOCK(wire) {
   d5550:	a801      	add	r0, sp, #4
   d5552:	f7ff ffc8 	bl	d54e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
	return true;
   d5556:	2501      	movs	r5, #1
   d5558:	e7f2      	b.n	d5540 <_ZN6MB85RC5eraseEv+0x4c>
   d555a:	bf00      	nop
   d555c:	2003e584 	.word	0x2003e584
   d5560:	000d889c 	.word	0x000d889c

000d5564 <_ZN6MB85RC8readDataEjPhj>:


bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d5564:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   d5568:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d556a:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d556c:	9001      	str	r0, [sp, #4]
bool MB85RC::readData(size_t framAddr, uint8_t *data, size_t dataLen) {
   d556e:	460d      	mov	r5, r1
   d5570:	4616      	mov	r6, r2
   d5572:	461f      	mov	r7, r3
      { _M_device.lock(); }
   d5574:	f000 fcdc 	bl	d5f30 <_ZN7TwoWire4lockEv>

		while(dataLen > 0) {
   d5578:	b1a7      	cbz	r7, d55a4 <_ZN6MB85RC8readDataEjPhj+0x40>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d557a:	68e1      	ldr	r1, [r4, #12]
   d557c:	6860      	ldr	r0, [r4, #4]
   d557e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5582:	f000 fccb 	bl	d5f1c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5586:	0a29      	lsrs	r1, r5, #8
   d5588:	6860      	ldr	r0, [r4, #4]
   d558a:	f7ff ff9b 	bl	d54c4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d558e:	4629      	mov	r1, r5
   d5590:	6860      	ldr	r0, [r4, #4]
   d5592:	f7ff ff97 	bl	d54c4 <_ZN7TwoWire5writeEj>
			int stat = wire.endTransmission(false);
   d5596:	6860      	ldr	r0, [r4, #4]
   d5598:	2100      	movs	r1, #0
   d559a:	f000 fcc2 	bl	d5f22 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d559e:	b148      	cbz	r0, d55b4 <_ZN6MB85RC8readDataEjPhj+0x50>
				//Serial.printlnf("read set address failed %d", stat);
				result = false;
   d55a0:	2400      	movs	r4, #0
   d55a2:	e000      	b.n	d55a6 <_ZN6MB85RC8readDataEjPhj+0x42>
   d55a4:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d55a6:	a801      	add	r0, sp, #4
   d55a8:	f7ff ff9d 	bl	d54e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				dataLen--;
			}
		}
	}
	return result;
}
   d55ac:	4620      	mov	r0, r4
   d55ae:	b003      	add	sp, #12
   d55b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			if (bytesToRead > 32) {
   d55b4:	2f20      	cmp	r7, #32
			wire.requestFrom((uint8_t)(addr | DEVICE_ADDR), bytesToRead, (uint8_t) true);
   d55b6:	7b21      	ldrb	r1, [r4, #12]
   d55b8:	6860      	ldr	r0, [r4, #4]
   d55ba:	46b8      	mov	r8, r7
   d55bc:	bf28      	it	cs
   d55be:	f04f 0820 	movcs.w	r8, #32
   d55c2:	2301      	movs	r3, #1
   d55c4:	4642      	mov	r2, r8
   d55c6:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d55ca:	f000 fc8e 	bl	d5eea <_ZN7TwoWire11requestFromEhjh>
			if (Wire.available() < (int) bytesToRead) {
   d55ce:	f002 fc65 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d55d2:	6803      	ldr	r3, [r0, #0]
   d55d4:	691b      	ldr	r3, [r3, #16]
   d55d6:	4798      	blx	r3
   d55d8:	4540      	cmp	r0, r8
   d55da:	dbe1      	blt.n	d55a0 <_ZN6MB85RC8readDataEjPhj+0x3c>
   d55dc:	eb06 0908 	add.w	r9, r6, r8
				*data++ = Wire.read();    // receive a byte as character
   d55e0:	f002 fc5c 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d55e4:	6803      	ldr	r3, [r0, #0]
   d55e6:	695b      	ldr	r3, [r3, #20]
   d55e8:	4798      	blx	r3
   d55ea:	f806 0b01 	strb.w	r0, [r6], #1
			for(size_t ii = 0; ii < bytesToRead; ii++) {
   d55ee:	454e      	cmp	r6, r9
   d55f0:	d1f6      	bne.n	d55e0 <_ZN6MB85RC8readDataEjPhj+0x7c>
   d55f2:	4445      	add	r5, r8
   d55f4:	eba7 0708 	sub.w	r7, r7, r8
   d55f8:	e7be      	b.n	d5578 <_ZN6MB85RC8readDataEjPhj+0x14>

000d55fa <_ZN6MB85RC9writeDataEjPKhj>:


bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d55fa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d55fe:	4604      	mov	r4, r0
	bool result = true;

	WITH_LOCK(wire) {
   d5600:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d5602:	9001      	str	r0, [sp, #4]
bool MB85RC::writeData(size_t framAddr, const uint8_t *data, size_t dataLen) {
   d5604:	460e      	mov	r6, r1
   d5606:	4690      	mov	r8, r2
   d5608:	461d      	mov	r5, r3
      { _M_device.lock(); }
   d560a:	f000 fc91 	bl	d5f30 <_ZN7TwoWire4lockEv>
   d560e:	f04f 0901 	mov.w	r9, #1
	WITH_LOCK(wire) {
   d5612:	f1b9 0f00 	cmp.w	r9, #0
   d5616:	d02a      	beq.n	d566e <_ZN6MB85RC9writeDataEjPKhj+0x74>
		while(dataLen > 0) {
   d5618:	b34d      	cbz	r5, d566e <_ZN6MB85RC9writeDataEjPKhj+0x74>
			wire.beginTransmission(addr | DEVICE_ADDR);
   d561a:	68e1      	ldr	r1, [r4, #12]
   d561c:	6860      	ldr	r0, [r4, #4]
   d561e:	f041 0150 	orr.w	r1, r1, #80	; 0x50
   d5622:	f000 fc7b 	bl	d5f1c <_ZN7TwoWire17beginTransmissionEi>
			wire.write(framAddr >> 8);
   d5626:	0a31      	lsrs	r1, r6, #8
   d5628:	6860      	ldr	r0, [r4, #4]
   d562a:	f7ff ff4b 	bl	d54c4 <_ZN7TwoWire5writeEj>
			wire.write(framAddr);
   d562e:	6860      	ldr	r0, [r4, #4]
   d5630:	4631      	mov	r1, r6
   d5632:	f7ff ff47 	bl	d54c4 <_ZN7TwoWire5writeEj>

			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5636:	f1a5 0a1e 	sub.w	sl, r5, #30
			wire.write(framAddr);
   d563a:	4647      	mov	r7, r8
   d563c:	eba6 0b08 	sub.w	fp, r6, r8
				wire.write(*data);
   d5640:	6860      	ldr	r0, [r4, #4]
   d5642:	f817 1b01 	ldrb.w	r1, [r7], #1
   d5646:	6803      	ldr	r3, [r0, #0]
				framAddr++;
				data++;
				dataLen--;
   d5648:	3d01      	subs	r5, #1
				wire.write(*data);
   d564a:	689b      	ldr	r3, [r3, #8]
   d564c:	4798      	blx	r3
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d564e:	4555      	cmp	r5, sl
   d5650:	eb0b 0607 	add.w	r6, fp, r7
				data++;
   d5654:	46b8      	mov	r8, r7
			for(size_t ii = 0; ii < 30 && dataLen > 0; ii++) {
   d5656:	d001      	beq.n	d565c <_ZN6MB85RC9writeDataEjPKhj+0x62>
   d5658:	2d00      	cmp	r5, #0
   d565a:	d1f1      	bne.n	d5640 <_ZN6MB85RC9writeDataEjPKhj+0x46>
			}

			int stat = wire.endTransmission(true);
   d565c:	6860      	ldr	r0, [r4, #4]
   d565e:	2101      	movs	r1, #1
   d5660:	f000 fc5f 	bl	d5f22 <_ZN7TwoWire15endTransmissionEh>
			if (stat != 0) {
   d5664:	2800      	cmp	r0, #0
   d5666:	d0d7      	beq.n	d5618 <_ZN6MB85RC9writeDataEjPKhj+0x1e>
				//Serial.printlnf("write failed %d", stat);
				result = false;
   d5668:	f04f 0900 	mov.w	r9, #0
   d566c:	e7d1      	b.n	d5612 <_ZN6MB85RC9writeDataEjPKhj+0x18>
	WITH_LOCK(wire) {
   d566e:	a801      	add	r0, sp, #4
   d5670:	f7ff ff39 	bl	d54e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				break;
			}
		}
	}
	return result;
}
   d5674:	4648      	mov	r0, r9
   d5676:	b003      	add	sp, #12
   d5678:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d567c <_ZN6MB85RC8moveDataEjjj>:


bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d567c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5680:	b08b      	sub	sp, #44	; 0x2c
   d5682:	460e      	mov	r6, r1
   d5684:	4615      	mov	r5, r2
   d5686:	4680      	mov	r8, r0
	bool result = true;

	// Maximum number of bytes we can write is 30
	uint8_t buf[30];

	WITH_LOCK(wire) {
   d5688:	6840      	ldr	r0, [r0, #4]
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d568a:	9001      	str	r0, [sp, #4]
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d568c:	461c      	mov	r4, r3
      { _M_device.lock(); }
   d568e:	f000 fc4f 	bl	d5f30 <_ZN7TwoWire4lockEv>
		if (framAddrFrom < framAddrTo) {
   d5692:	42ae      	cmp	r6, r5
   d5694:	d229      	bcs.n	d56ea <_ZN6MB85RC8moveDataEjjj+0x6e>
			// Moving to a higher address - copy from the end of the from buffer
			framAddrFrom += numBytes;
   d5696:	4426      	add	r6, r4
			framAddrTo += numBytes;
   d5698:	4425      	add	r5, r4
			while(numBytes > 0) {
   d569a:	b18c      	cbz	r4, d56c0 <_ZN6MB85RC8moveDataEjjj+0x44>
				size_t count = numBytes;
				if (count > sizeof(buf)) {
   d569c:	2c1e      	cmp	r4, #30
   d569e:	4627      	mov	r7, r4
					count = sizeof(buf);
				}
				framAddrFrom -= count;
				framAddrTo -= count;

				result = readData(framAddrFrom, buf, count);
   d56a0:	f8d8 3000 	ldr.w	r3, [r8]
   d56a4:	bf28      	it	cs
   d56a6:	271e      	movcs	r7, #30
				framAddrFrom -= count;
   d56a8:	1bf6      	subs	r6, r6, r7
				result = readData(framAddrFrom, buf, count);
   d56aa:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d56ae:	aa02      	add	r2, sp, #8
   d56b0:	463b      	mov	r3, r7
   d56b2:	4631      	mov	r1, r6
   d56b4:	4640      	mov	r0, r8
				framAddrTo -= count;
   d56b6:	1bed      	subs	r5, r5, r7
				result = readData(framAddrFrom, buf, count);
   d56b8:	47c8      	blx	r9
				if (!result) {
   d56ba:	b948      	cbnz	r0, d56d0 <_ZN6MB85RC8moveDataEjjj+0x54>
bool MB85RC::moveData(size_t framAddrFrom, size_t framAddrTo, size_t numBytes) {
   d56bc:	2400      	movs	r4, #0
   d56be:	e000      	b.n	d56c2 <_ZN6MB85RC8moveDataEjjj+0x46>
   d56c0:	2401      	movs	r4, #1
	WITH_LOCK(wire) {
   d56c2:	a801      	add	r0, sp, #4
   d56c4:	f7ff ff0f 	bl	d54e6 <_ZNSt10lock_guardIR7TwoWireED1Ev>
				numBytes -= count;
			}
		}
	}
	return result;
}
   d56c8:	4620      	mov	r0, r4
   d56ca:	b00b      	add	sp, #44	; 0x2c
   d56cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				result = writeData(framAddrTo, buf, count);
   d56d0:	f8d8 3000 	ldr.w	r3, [r8]
   d56d4:	aa02      	add	r2, sp, #8
   d56d6:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d56da:	4629      	mov	r1, r5
   d56dc:	463b      	mov	r3, r7
   d56de:	4640      	mov	r0, r8
   d56e0:	47c8      	blx	r9
				if (!result) {
   d56e2:	2800      	cmp	r0, #0
   d56e4:	d0ea      	beq.n	d56bc <_ZN6MB85RC8moveDataEjjj+0x40>
				numBytes -= count;
   d56e6:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d56e8:	e7d7      	b.n	d569a <_ZN6MB85RC8moveDataEjjj+0x1e>
		if (framAddrFrom > framAddrTo) {
   d56ea:	d9e9      	bls.n	d56c0 <_ZN6MB85RC8moveDataEjjj+0x44>
			while(numBytes > 0) {
   d56ec:	2c00      	cmp	r4, #0
   d56ee:	d0e7      	beq.n	d56c0 <_ZN6MB85RC8moveDataEjjj+0x44>
				result = readData(framAddrFrom, buf, count);
   d56f0:	f8d8 3000 	ldr.w	r3, [r8]
   d56f4:	2c1e      	cmp	r4, #30
   d56f6:	4627      	mov	r7, r4
   d56f8:	bf28      	it	cs
   d56fa:	271e      	movcs	r7, #30
   d56fc:	f8d3 9008 	ldr.w	r9, [r3, #8]
   d5700:	aa02      	add	r2, sp, #8
   d5702:	463b      	mov	r3, r7
   d5704:	4631      	mov	r1, r6
   d5706:	4640      	mov	r0, r8
   d5708:	47c8      	blx	r9
				if (!result) {
   d570a:	2800      	cmp	r0, #0
   d570c:	d0d6      	beq.n	d56bc <_ZN6MB85RC8moveDataEjjj+0x40>
				result = writeData(framAddrTo, buf, count);
   d570e:	f8d8 3000 	ldr.w	r3, [r8]
   d5712:	aa02      	add	r2, sp, #8
   d5714:	f8d3 900c 	ldr.w	r9, [r3, #12]
   d5718:	4629      	mov	r1, r5
   d571a:	463b      	mov	r3, r7
   d571c:	4640      	mov	r0, r8
   d571e:	47c8      	blx	r9
				if (!result) {
   d5720:	2800      	cmp	r0, #0
   d5722:	d0cb      	beq.n	d56bc <_ZN6MB85RC8moveDataEjjj+0x40>
				framAddrFrom += count;
   d5724:	443e      	add	r6, r7
				framAddrTo += count;
   d5726:	443d      	add	r5, r7
				numBytes -= count;
   d5728:	1be4      	subs	r4, r4, r7
			while(numBytes > 0) {
   d572a:	e7df      	b.n	d56ec <_ZN6MB85RC8moveDataEjjj+0x70>

000d572c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d572c:	b508      	push	{r3, lr}
   d572e:	4b02      	ldr	r3, [pc, #8]	; (d5738 <os_mutex_recursive_create+0xc>)
   d5730:	681b      	ldr	r3, [r3, #0]
   d5732:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5734:	9301      	str	r3, [sp, #4]
   d5736:	bd08      	pop	{r3, pc}
   d5738:	00030248 	.word	0x00030248

000d573c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d573c:	b508      	push	{r3, lr}
   d573e:	4b02      	ldr	r3, [pc, #8]	; (d5748 <os_mutex_recursive_destroy+0xc>)
   d5740:	681b      	ldr	r3, [r3, #0]
   d5742:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5744:	9301      	str	r3, [sp, #4]
   d5746:	bd08      	pop	{r3, pc}
   d5748:	00030248 	.word	0x00030248

000d574c <os_mutex_recursive_lock>:
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d574c:	b508      	push	{r3, lr}
   d574e:	4b02      	ldr	r3, [pc, #8]	; (d5758 <os_mutex_recursive_lock+0xc>)
   d5750:	681b      	ldr	r3, [r3, #0]
   d5752:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5754:	9301      	str	r3, [sp, #4]
   d5756:	bd08      	pop	{r3, pc}
   d5758:	00030248 	.word	0x00030248

000d575c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d575c:	b508      	push	{r3, lr}
   d575e:	4b02      	ldr	r3, [pc, #8]	; (d5768 <os_mutex_recursive_unlock+0xc>)
   d5760:	681b      	ldr	r3, [r3, #0]
   d5762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5764:	9301      	str	r3, [sp, #4]
   d5766:	bd08      	pop	{r3, pc}
   d5768:	00030248 	.word	0x00030248

000d576c <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
   d576c:	b508      	push	{r3, lr}
   d576e:	4b02      	ldr	r3, [pc, #8]	; (d5778 <HAL_Feature_Set+0xc>)
   d5770:	681b      	ldr	r3, [r3, #0]
   d5772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
   d5774:	9301      	str	r3, [sp, #4]
   d5776:	bd08      	pop	{r3, pc}
   d5778:	00030234 	.word	0x00030234

000d577c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d577c:	b508      	push	{r3, lr}
   d577e:	4b02      	ldr	r3, [pc, #8]	; (d5788 <HAL_RNG_GetRandomNumber+0xc>)
   d5780:	681b      	ldr	r3, [r3, #0]
   d5782:	685b      	ldr	r3, [r3, #4]
   d5784:	9301      	str	r3, [sp, #4]
   d5786:	bd08      	pop	{r3, pc}
   d5788:	00030218 	.word	0x00030218

000d578c <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
   d578c:	b508      	push	{r3, lr}
   d578e:	4b02      	ldr	r3, [pc, #8]	; (d5798 <HAL_Delay_Microseconds+0xc>)
   d5790:	681b      	ldr	r3, [r3, #0]
   d5792:	68db      	ldr	r3, [r3, #12]
   d5794:	9301      	str	r3, [sp, #4]
   d5796:	bd08      	pop	{r3, pc}
   d5798:	00030218 	.word	0x00030218

000d579c <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d579c:	b508      	push	{r3, lr}
   d579e:	4b02      	ldr	r3, [pc, #8]	; (d57a8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d57a0:	681b      	ldr	r3, [r3, #0]
   d57a2:	695b      	ldr	r3, [r3, #20]
   d57a4:	9301      	str	r3, [sp, #4]
   d57a6:	bd08      	pop	{r3, pc}
   d57a8:	00030218 	.word	0x00030218

000d57ac <hal_rtc_time_is_valid>:
DYNALIB_FN(BASE_IDX + 15, hal, HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal, HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
DYNALIB_FN(BASE_IDX + 17, hal, HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal, HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal, HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, hal_rtc_time_is_valid, bool(void*))
   d57ac:	b508      	push	{r3, lr}
   d57ae:	4b02      	ldr	r3, [pc, #8]	; (d57b8 <hal_rtc_time_is_valid+0xc>)
   d57b0:	681b      	ldr	r3, [r3, #0]
   d57b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d57b4:	9301      	str	r3, [sp, #4]
   d57b6:	bd08      	pop	{r3, pc}
   d57b8:	00030218 	.word	0x00030218

000d57bc <hal_rtc_set_time>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
DYNALIB_FN(BASE_IDX + 22, hal, hal_timer_micros, uint64_t(void*))

DYNALIB_FN(BASE_IDX + 23, hal, hal_rtc_get_time, int(struct timeval*, void*))
DYNALIB_FN(BASE_IDX + 24, hal, hal_rtc_set_time, int(const struct timeval*, void*))
   d57bc:	b508      	push	{r3, lr}
   d57be:	4b02      	ldr	r3, [pc, #8]	; (d57c8 <hal_rtc_set_time+0xc>)
   d57c0:	681b      	ldr	r3, [r3, #0]
   d57c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   d57c4:	9301      	str	r3, [sp, #4]
   d57c6:	bd08      	pop	{r3, pc}
   d57c8:	00030218 	.word	0x00030218

000d57cc <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d57cc:	b508      	push	{r3, lr}
   d57ce:	4b02      	ldr	r3, [pc, #8]	; (d57d8 <HAL_Pin_Mode+0xc>)
   d57d0:	681b      	ldr	r3, [r3, #0]
   d57d2:	689b      	ldr	r3, [r3, #8]
   d57d4:	9301      	str	r3, [sp, #4]
   d57d6:	bd08      	pop	{r3, pc}
   d57d8:	0003022c 	.word	0x0003022c

000d57dc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d57dc:	b508      	push	{r3, lr}
   d57de:	4b02      	ldr	r3, [pc, #8]	; (d57e8 <HAL_Get_Pin_Mode+0xc>)
   d57e0:	681b      	ldr	r3, [r3, #0]
   d57e2:	68db      	ldr	r3, [r3, #12]
   d57e4:	9301      	str	r3, [sp, #4]
   d57e6:	bd08      	pop	{r3, pc}
   d57e8:	0003022c 	.word	0x0003022c

000d57ec <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d57ec:	b508      	push	{r3, lr}
   d57ee:	4b02      	ldr	r3, [pc, #8]	; (d57f8 <HAL_GPIO_Write+0xc>)
   d57f0:	681b      	ldr	r3, [r3, #0]
   d57f2:	691b      	ldr	r3, [r3, #16]
   d57f4:	9301      	str	r3, [sp, #4]
   d57f6:	bd08      	pop	{r3, pc}
   d57f8:	0003022c 	.word	0x0003022c

000d57fc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d57fc:	b508      	push	{r3, lr}
   d57fe:	4b02      	ldr	r3, [pc, #8]	; (d5808 <HAL_GPIO_Read+0xc>)
   d5800:	681b      	ldr	r3, [r3, #0]
   d5802:	695b      	ldr	r3, [r3, #20]
   d5804:	9301      	str	r3, [sp, #4]
   d5806:	bd08      	pop	{r3, pc}
   d5808:	0003022c 	.word	0x0003022c

000d580c <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d580c:	b508      	push	{r3, lr}
   d580e:	4b02      	ldr	r3, [pc, #8]	; (d5818 <hal_i2c_begin+0xc>)
   d5810:	681b      	ldr	r3, [r3, #0]
   d5812:	68db      	ldr	r3, [r3, #12]
   d5814:	9301      	str	r3, [sp, #4]
   d5816:	bd08      	pop	{r3, pc}
   d5818:	00030228 	.word	0x00030228

000d581c <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d581c:	b508      	push	{r3, lr}
   d581e:	4b02      	ldr	r3, [pc, #8]	; (d5828 <hal_i2c_begin_transmission+0xc>)
   d5820:	681b      	ldr	r3, [r3, #0]
   d5822:	699b      	ldr	r3, [r3, #24]
   d5824:	9301      	str	r3, [sp, #4]
   d5826:	bd08      	pop	{r3, pc}
   d5828:	00030228 	.word	0x00030228

000d582c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d582c:	b508      	push	{r3, lr}
   d582e:	4b02      	ldr	r3, [pc, #8]	; (d5838 <hal_i2c_end_transmission+0xc>)
   d5830:	681b      	ldr	r3, [r3, #0]
   d5832:	69db      	ldr	r3, [r3, #28]
   d5834:	9301      	str	r3, [sp, #4]
   d5836:	bd08      	pop	{r3, pc}
   d5838:	00030228 	.word	0x00030228

000d583c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d583c:	b508      	push	{r3, lr}
   d583e:	4b02      	ldr	r3, [pc, #8]	; (d5848 <hal_i2c_write+0xc>)
   d5840:	681b      	ldr	r3, [r3, #0]
   d5842:	6a1b      	ldr	r3, [r3, #32]
   d5844:	9301      	str	r3, [sp, #4]
   d5846:	bd08      	pop	{r3, pc}
   d5848:	00030228 	.word	0x00030228

000d584c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d584c:	b508      	push	{r3, lr}
   d584e:	4b02      	ldr	r3, [pc, #8]	; (d5858 <hal_i2c_available+0xc>)
   d5850:	681b      	ldr	r3, [r3, #0]
   d5852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5854:	9301      	str	r3, [sp, #4]
   d5856:	bd08      	pop	{r3, pc}
   d5858:	00030228 	.word	0x00030228

000d585c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d585c:	b508      	push	{r3, lr}
   d585e:	4b02      	ldr	r3, [pc, #8]	; (d5868 <hal_i2c_read+0xc>)
   d5860:	681b      	ldr	r3, [r3, #0]
   d5862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d5864:	9301      	str	r3, [sp, #4]
   d5866:	bd08      	pop	{r3, pc}
   d5868:	00030228 	.word	0x00030228

000d586c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d586c:	b508      	push	{r3, lr}
   d586e:	4b02      	ldr	r3, [pc, #8]	; (d5878 <hal_i2c_peek+0xc>)
   d5870:	681b      	ldr	r3, [r3, #0]
   d5872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5874:	9301      	str	r3, [sp, #4]
   d5876:	bd08      	pop	{r3, pc}
   d5878:	00030228 	.word	0x00030228

000d587c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d587c:	b508      	push	{r3, lr}
   d587e:	4b02      	ldr	r3, [pc, #8]	; (d5888 <hal_i2c_flush+0xc>)
   d5880:	681b      	ldr	r3, [r3, #0]
   d5882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5884:	9301      	str	r3, [sp, #4]
   d5886:	bd08      	pop	{r3, pc}
   d5888:	00030228 	.word	0x00030228

000d588c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d588c:	b508      	push	{r3, lr}
   d588e:	4b02      	ldr	r3, [pc, #8]	; (d5898 <hal_i2c_is_enabled+0xc>)
   d5890:	681b      	ldr	r3, [r3, #0]
   d5892:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5894:	9301      	str	r3, [sp, #4]
   d5896:	bd08      	pop	{r3, pc}
   d5898:	00030228 	.word	0x00030228

000d589c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d589c:	b508      	push	{r3, lr}
   d589e:	4b02      	ldr	r3, [pc, #8]	; (d58a8 <hal_i2c_init+0xc>)
   d58a0:	681b      	ldr	r3, [r3, #0]
   d58a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d58a4:	9301      	str	r3, [sp, #4]
   d58a6:	bd08      	pop	{r3, pc}
   d58a8:	00030228 	.word	0x00030228

000d58ac <hal_i2c_lock>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
   d58ac:	b508      	push	{r3, lr}
   d58ae:	4b02      	ldr	r3, [pc, #8]	; (d58b8 <hal_i2c_lock+0xc>)
   d58b0:	681b      	ldr	r3, [r3, #0]
   d58b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d58b4:	9301      	str	r3, [sp, #4]
   d58b6:	bd08      	pop	{r3, pc}
   d58b8:	00030228 	.word	0x00030228

000d58bc <hal_i2c_unlock>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
   d58bc:	b508      	push	{r3, lr}
   d58be:	4b02      	ldr	r3, [pc, #8]	; (d58c8 <hal_i2c_unlock+0xc>)
   d58c0:	681b      	ldr	r3, [r3, #0]
   d58c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d58c4:	9301      	str	r3, [sp, #4]
   d58c6:	bd08      	pop	{r3, pc}
   d58c8:	00030228 	.word	0x00030228

000d58cc <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d58cc:	b508      	push	{r3, lr}
   d58ce:	4b02      	ldr	r3, [pc, #8]	; (d58d8 <hal_i2c_request_ex+0xc>)
   d58d0:	681b      	ldr	r3, [r3, #0]
   d58d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d58d4:	9301      	str	r3, [sp, #4]
   d58d6:	bd08      	pop	{r3, pc}
   d58d8:	00030228 	.word	0x00030228

000d58dc <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d58dc:	b508      	push	{r3, lr}
   d58de:	4b02      	ldr	r3, [pc, #8]	; (d58e8 <inet_inet_ntop+0xc>)
   d58e0:	681b      	ldr	r3, [r3, #0]
   d58e2:	695b      	ldr	r3, [r3, #20]
   d58e4:	9301      	str	r3, [sp, #4]
   d58e6:	bd08      	pop	{r3, pc}
   d58e8:	00030264 	.word	0x00030264

000d58ec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d58ec:	b508      	push	{r3, lr}
   d58ee:	4b02      	ldr	r3, [pc, #8]	; (d58f8 <netdb_freeaddrinfo+0xc>)
   d58f0:	681b      	ldr	r3, [r3, #0]
   d58f2:	689b      	ldr	r3, [r3, #8]
   d58f4:	9301      	str	r3, [sp, #4]
   d58f6:	bd08      	pop	{r3, pc}
   d58f8:	00030268 	.word	0x00030268

000d58fc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d58fc:	b508      	push	{r3, lr}
   d58fe:	4b02      	ldr	r3, [pc, #8]	; (d5908 <netdb_getaddrinfo+0xc>)
   d5900:	681b      	ldr	r3, [r3, #0]
   d5902:	68db      	ldr	r3, [r3, #12]
   d5904:	9301      	str	r3, [sp, #4]
   d5906:	bd08      	pop	{r3, pc}
   d5908:	00030268 	.word	0x00030268

000d590c <hal_spi_init>:
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d590c:	b508      	push	{r3, lr}
   d590e:	4b02      	ldr	r3, [pc, #8]	; (d5918 <hal_spi_init+0xc>)
   d5910:	681b      	ldr	r3, [r3, #0]
   d5912:	69db      	ldr	r3, [r3, #28]
   d5914:	9301      	str	r3, [sp, #4]
   d5916:	bd08      	pop	{r3, pc}
   d5918:	00030230 	.word	0x00030230

000d591c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d591c:	b508      	push	{r3, lr}
   d591e:	4b02      	ldr	r3, [pc, #8]	; (d5928 <hal_spi_is_enabled+0xc>)
   d5920:	681b      	ldr	r3, [r3, #0]
   d5922:	6a1b      	ldr	r3, [r3, #32]
   d5924:	9301      	str	r3, [sp, #4]
   d5926:	bd08      	pop	{r3, pc}
   d5928:	00030230 	.word	0x00030230

000d592c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d592c:	b508      	push	{r3, lr}
   d592e:	4b02      	ldr	r3, [pc, #8]	; (d5938 <hal_usart_init+0xc>)
   d5930:	681b      	ldr	r3, [r3, #0]
   d5932:	681b      	ldr	r3, [r3, #0]
   d5934:	9301      	str	r3, [sp, #4]
   d5936:	bd08      	pop	{r3, pc}
   d5938:	0003023c 	.word	0x0003023c

000d593c <hal_usart_end>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
   d593c:	b508      	push	{r3, lr}
   d593e:	4b02      	ldr	r3, [pc, #8]	; (d5948 <hal_usart_end+0xc>)
   d5940:	681b      	ldr	r3, [r3, #0]
   d5942:	689b      	ldr	r3, [r3, #8]
   d5944:	9301      	str	r3, [sp, #4]
   d5946:	bd08      	pop	{r3, pc}
   d5948:	0003023c 	.word	0x0003023c

000d594c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d594c:	b508      	push	{r3, lr}
   d594e:	4b02      	ldr	r3, [pc, #8]	; (d5958 <hal_usart_write+0xc>)
   d5950:	681b      	ldr	r3, [r3, #0]
   d5952:	68db      	ldr	r3, [r3, #12]
   d5954:	9301      	str	r3, [sp, #4]
   d5956:	bd08      	pop	{r3, pc}
   d5958:	0003023c 	.word	0x0003023c

000d595c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d595c:	b508      	push	{r3, lr}
   d595e:	4b02      	ldr	r3, [pc, #8]	; (d5968 <hal_usart_available+0xc>)
   d5960:	681b      	ldr	r3, [r3, #0]
   d5962:	691b      	ldr	r3, [r3, #16]
   d5964:	9301      	str	r3, [sp, #4]
   d5966:	bd08      	pop	{r3, pc}
   d5968:	0003023c 	.word	0x0003023c

000d596c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d596c:	b508      	push	{r3, lr}
   d596e:	4b02      	ldr	r3, [pc, #8]	; (d5978 <hal_usart_read+0xc>)
   d5970:	681b      	ldr	r3, [r3, #0]
   d5972:	695b      	ldr	r3, [r3, #20]
   d5974:	9301      	str	r3, [sp, #4]
   d5976:	bd08      	pop	{r3, pc}
   d5978:	0003023c 	.word	0x0003023c

000d597c <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d597c:	b508      	push	{r3, lr}
   d597e:	4b02      	ldr	r3, [pc, #8]	; (d5988 <hal_usart_peek+0xc>)
   d5980:	681b      	ldr	r3, [r3, #0]
   d5982:	699b      	ldr	r3, [r3, #24]
   d5984:	9301      	str	r3, [sp, #4]
   d5986:	bd08      	pop	{r3, pc}
   d5988:	0003023c 	.word	0x0003023c

000d598c <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d598c:	b508      	push	{r3, lr}
   d598e:	4b02      	ldr	r3, [pc, #8]	; (d5998 <hal_usart_flush+0xc>)
   d5990:	681b      	ldr	r3, [r3, #0]
   d5992:	69db      	ldr	r3, [r3, #28]
   d5994:	9301      	str	r3, [sp, #4]
   d5996:	bd08      	pop	{r3, pc}
   d5998:	0003023c 	.word	0x0003023c

000d599c <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d599c:	b508      	push	{r3, lr}
   d599e:	4b02      	ldr	r3, [pc, #8]	; (d59a8 <hal_usart_is_enabled+0xc>)
   d59a0:	681b      	ldr	r3, [r3, #0]
   d59a2:	6a1b      	ldr	r3, [r3, #32]
   d59a4:	9301      	str	r3, [sp, #4]
   d59a6:	bd08      	pop	{r3, pc}
   d59a8:	0003023c 	.word	0x0003023c

000d59ac <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d59ac:	b508      	push	{r3, lr}
   d59ae:	4b02      	ldr	r3, [pc, #8]	; (d59b8 <hal_usart_available_data_for_write+0xc>)
   d59b0:	681b      	ldr	r3, [r3, #0]
   d59b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d59b4:	9301      	str	r3, [sp, #4]
   d59b6:	bd08      	pop	{r3, pc}
   d59b8:	0003023c 	.word	0x0003023c

000d59bc <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d59bc:	b508      	push	{r3, lr}
   d59be:	4b02      	ldr	r3, [pc, #8]	; (d59c8 <hal_usart_begin_config+0xc>)
   d59c0:	681b      	ldr	r3, [r3, #0]
   d59c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d59c4:	9301      	str	r3, [sp, #4]
   d59c6:	bd08      	pop	{r3, pc}
   d59c8:	0003023c 	.word	0x0003023c

000d59cc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d59cc:	b508      	push	{r3, lr}
   d59ce:	4b02      	ldr	r3, [pc, #8]	; (d59d8 <HAL_USB_USART_Init+0xc>)
   d59d0:	681b      	ldr	r3, [r3, #0]
   d59d2:	681b      	ldr	r3, [r3, #0]
   d59d4:	9301      	str	r3, [sp, #4]
   d59d6:	bd08      	pop	{r3, pc}
   d59d8:	0003024c 	.word	0x0003024c

000d59dc <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d59dc:	b508      	push	{r3, lr}
   d59de:	4b02      	ldr	r3, [pc, #8]	; (d59e8 <HAL_USB_USART_Begin+0xc>)
   d59e0:	681b      	ldr	r3, [r3, #0]
   d59e2:	685b      	ldr	r3, [r3, #4]
   d59e4:	9301      	str	r3, [sp, #4]
   d59e6:	bd08      	pop	{r3, pc}
   d59e8:	0003024c 	.word	0x0003024c

000d59ec <HAL_USB_USART_End>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
   d59ec:	b508      	push	{r3, lr}
   d59ee:	4b02      	ldr	r3, [pc, #8]	; (d59f8 <HAL_USB_USART_End+0xc>)
   d59f0:	681b      	ldr	r3, [r3, #0]
   d59f2:	689b      	ldr	r3, [r3, #8]
   d59f4:	9301      	str	r3, [sp, #4]
   d59f6:	bd08      	pop	{r3, pc}
   d59f8:	0003024c 	.word	0x0003024c

000d59fc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d59fc:	b508      	push	{r3, lr}
   d59fe:	4b02      	ldr	r3, [pc, #8]	; (d5a08 <HAL_USB_USART_Available_Data+0xc>)
   d5a00:	681b      	ldr	r3, [r3, #0]
   d5a02:	691b      	ldr	r3, [r3, #16]
   d5a04:	9301      	str	r3, [sp, #4]
   d5a06:	bd08      	pop	{r3, pc}
   d5a08:	0003024c 	.word	0x0003024c

000d5a0c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d5a0c:	b508      	push	{r3, lr}
   d5a0e:	4b02      	ldr	r3, [pc, #8]	; (d5a18 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d5a10:	681b      	ldr	r3, [r3, #0]
   d5a12:	695b      	ldr	r3, [r3, #20]
   d5a14:	9301      	str	r3, [sp, #4]
   d5a16:	bd08      	pop	{r3, pc}
   d5a18:	0003024c 	.word	0x0003024c

000d5a1c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a1c:	b508      	push	{r3, lr}
   d5a1e:	4b02      	ldr	r3, [pc, #8]	; (d5a28 <HAL_USB_USART_Receive_Data+0xc>)
   d5a20:	681b      	ldr	r3, [r3, #0]
   d5a22:	699b      	ldr	r3, [r3, #24]
   d5a24:	9301      	str	r3, [sp, #4]
   d5a26:	bd08      	pop	{r3, pc}
   d5a28:	0003024c 	.word	0x0003024c

000d5a2c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d5a2c:	b508      	push	{r3, lr}
   d5a2e:	4b02      	ldr	r3, [pc, #8]	; (d5a38 <HAL_USB_USART_Send_Data+0xc>)
   d5a30:	681b      	ldr	r3, [r3, #0]
   d5a32:	69db      	ldr	r3, [r3, #28]
   d5a34:	9301      	str	r3, [sp, #4]
   d5a36:	bd08      	pop	{r3, pc}
   d5a38:	0003024c 	.word	0x0003024c

000d5a3c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d5a3c:	b508      	push	{r3, lr}
   d5a3e:	4b02      	ldr	r3, [pc, #8]	; (d5a48 <HAL_USB_USART_Flush_Data+0xc>)
   d5a40:	681b      	ldr	r3, [r3, #0]
   d5a42:	6a1b      	ldr	r3, [r3, #32]
   d5a44:	9301      	str	r3, [sp, #4]
   d5a46:	bd08      	pop	{r3, pc}
   d5a48:	0003024c 	.word	0x0003024c

000d5a4c <panic_>:
DYNALIB_FN(9, services, LED_Toggle, void(Led_TypeDef))
DYNALIB_FN(10, services, LED_Fade, void(Led_TypeDef))
DYNALIB_FN(11, services, Get_LED_Brightness, uint8_t(void))

DYNALIB_FN(12, services, set_logger_output, void(debug_output_fn, LoggerOutputLevel)) // Deprecated
DYNALIB_FN(13, services, panic_, void(ePanicCode, void*, void(*)(uint32_t)))
   d5a4c:	b508      	push	{r3, lr}
   d5a4e:	4b02      	ldr	r3, [pc, #8]	; (d5a58 <panic_+0xc>)
   d5a50:	681b      	ldr	r3, [r3, #0]
   d5a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5a54:	9301      	str	r3, [sp, #4]
   d5a56:	bd08      	pop	{r3, pc}
   d5a58:	00030260 	.word	0x00030260

000d5a5c <log_message_v>:
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
DYNALIB_FN(21, services, log_message_v, void(int, const char*, LogAttributes*, void*, const char*, va_list))
   d5a5c:	b508      	push	{r3, lr}
   d5a5e:	4b02      	ldr	r3, [pc, #8]	; (d5a68 <log_message_v+0xc>)
   d5a60:	681b      	ldr	r3, [r3, #0]
   d5a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5a64:	9301      	str	r3, [sp, #4]
   d5a66:	bd08      	pop	{r3, pc}
   d5a68:	00030260 	.word	0x00030260

000d5a6c <log_level_name>:
DYNALIB_FN(22, services, log_write, void(int, const char*, const char*, size_t, void*))
DYNALIB_FN(23, services, log_printf, void(int, const char*, void*, const char*, ...))
DYNALIB_FN(24, services, log_printf_v, void(int, const char*, void*, const char*, va_list))
DYNALIB_FN(25, services, log_dump, void(int, const char*, const void*, size_t, int, void*))
DYNALIB_FN(26, services, log_enabled, int(int, const char*, void*))
DYNALIB_FN(27, services, log_level_name, const char*(int, void*))
   d5a6c:	b508      	push	{r3, lr}
   d5a6e:	4b02      	ldr	r3, [pc, #8]	; (d5a78 <log_level_name+0xc>)
   d5a70:	681b      	ldr	r3, [r3, #0]
   d5a72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d5a74:	9301      	str	r3, [sp, #4]
   d5a76:	bd08      	pop	{r3, pc}
   d5a78:	00030260 	.word	0x00030260

000d5a7c <log_set_callbacks>:
DYNALIB_FN(28, services, log_set_callbacks, void(log_message_callback_type, log_write_callback_type, log_enabled_callback_type, void*))
   d5a7c:	b508      	push	{r3, lr}
   d5a7e:	4b02      	ldr	r3, [pc, #8]	; (d5a88 <log_set_callbacks+0xc>)
   d5a80:	681b      	ldr	r3, [r3, #0]
   d5a82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   d5a84:	9301      	str	r3, [sp, #4]
   d5a86:	bd08      	pop	{r3, pc}
   d5a88:	00030260 	.word	0x00030260

000d5a8c <system_mode>:
#include "system_power.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
   d5a8c:	b508      	push	{r3, lr}
   d5a8e:	4b02      	ldr	r3, [pc, #8]	; (d5a98 <system_mode+0xc>)
   d5a90:	681b      	ldr	r3, [r3, #0]
   d5a92:	681b      	ldr	r3, [r3, #0]
   d5a94:	9301      	str	r3, [sp, #4]
   d5a96:	bd08      	pop	{r3, pc}
   d5a98:	00030220 	.word	0x00030220

000d5a9c <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d5a9c:	b508      	push	{r3, lr}
   d5a9e:	4b02      	ldr	r3, [pc, #8]	; (d5aa8 <set_system_mode+0xc>)
   d5aa0:	681b      	ldr	r3, [r3, #0]
   d5aa2:	685b      	ldr	r3, [r3, #4]
   d5aa4:	9301      	str	r3, [sp, #4]
   d5aa6:	bd08      	pop	{r3, pc}
   d5aa8:	00030220 	.word	0x00030220

000d5aac <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d5aac:	b508      	push	{r3, lr}
   d5aae:	4b02      	ldr	r3, [pc, #8]	; (d5ab8 <system_delay_ms+0xc>)
   d5ab0:	681b      	ldr	r3, [r3, #0]
   d5ab2:	695b      	ldr	r3, [r3, #20]
   d5ab4:	9301      	str	r3, [sp, #4]
   d5ab6:	bd08      	pop	{r3, pc}
   d5ab8:	00030220 	.word	0x00030220

000d5abc <system_subscribe_event>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
   d5abc:	b508      	push	{r3, lr}
   d5abe:	4b02      	ldr	r3, [pc, #8]	; (d5ac8 <system_subscribe_event+0xc>)
   d5ac0:	681b      	ldr	r3, [r3, #0]
   d5ac2:	6a1b      	ldr	r3, [r3, #32]
   d5ac4:	9301      	str	r3, [sp, #4]
   d5ac6:	bd08      	pop	{r3, pc}
   d5ac8:	00030220 	.word	0x00030220

000d5acc <system_thread_set_state>:
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
   d5acc:	b508      	push	{r3, lr}
   d5ace:	4b02      	ldr	r3, [pc, #8]	; (d5ad8 <system_thread_set_state+0xc>)
   d5ad0:	681b      	ldr	r3, [r3, #0]
   d5ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d5ad4:	9301      	str	r3, [sp, #4]
   d5ad6:	bd08      	pop	{r3, pc}
   d5ad8:	00030220 	.word	0x00030220

000d5adc <system_thread_get_state>:
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
   d5adc:	b508      	push	{r3, lr}
   d5ade:	4b02      	ldr	r3, [pc, #8]	; (d5ae8 <system_thread_get_state+0xc>)
   d5ae0:	681b      	ldr	r3, [r3, #0]
   d5ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d5ae4:	9301      	str	r3, [sp, #4]
   d5ae6:	bd08      	pop	{r3, pc}
   d5ae8:	00030220 	.word	0x00030220

000d5aec <system_notify_time_changed>:
DYNALIB_FN(23, system, system_notify_time_changed, void(uint32_t, void*, void*))
   d5aec:	b508      	push	{r3, lr}
   d5aee:	4b02      	ldr	r3, [pc, #8]	; (d5af8 <system_notify_time_changed+0xc>)
   d5af0:	681b      	ldr	r3, [r3, #0]
   d5af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
   d5af4:	9301      	str	r3, [sp, #4]
   d5af6:	bd08      	pop	{r3, pc}
   d5af8:	00030220 	.word	0x00030220

000d5afc <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d5afc:	b508      	push	{r3, lr}
   d5afe:	4b03      	ldr	r3, [pc, #12]	; (d5b0c <system_ctrl_set_app_request_handler+0x10>)
   d5b00:	681b      	ldr	r3, [r3, #0]
   d5b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d5b06:	9301      	str	r3, [sp, #4]
   d5b08:	bd08      	pop	{r3, pc}
   d5b0a:	0000      	.short	0x0000
   d5b0c:	00030220 	.word	0x00030220

000d5b10 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d5b10:	b508      	push	{r3, lr}
   d5b12:	4b03      	ldr	r3, [pc, #12]	; (d5b20 <system_ctrl_set_result+0x10>)
   d5b14:	681b      	ldr	r3, [r3, #0]
   d5b16:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d5b1a:	9301      	str	r3, [sp, #4]
   d5b1c:	bd08      	pop	{r3, pc}
   d5b1e:	0000      	.short	0x0000
   d5b20:	00030220 	.word	0x00030220

000d5b24 <spark_process>:

DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
DYNALIB_FN(2, system_cloud, spark_process, void(void))
   d5b24:	b508      	push	{r3, lr}
   d5b26:	4b02      	ldr	r3, [pc, #8]	; (d5b30 <spark_process+0xc>)
   d5b28:	681b      	ldr	r3, [r3, #0]
   d5b2a:	689b      	ldr	r3, [r3, #8]
   d5b2c:	9301      	str	r3, [sp, #4]
   d5b2e:	bd08      	pop	{r3, pc}
   d5b30:	00030244 	.word	0x00030244

000d5b34 <spark_cloud_flag_connected>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
   d5b34:	b508      	push	{r3, lr}
   d5b36:	4b02      	ldr	r3, [pc, #8]	; (d5b40 <spark_cloud_flag_connected+0xc>)
   d5b38:	681b      	ldr	r3, [r3, #0]
   d5b3a:	695b      	ldr	r3, [r3, #20]
   d5b3c:	9301      	str	r3, [sp, #4]
   d5b3e:	bd08      	pop	{r3, pc}
   d5b40:	00030244 	.word	0x00030244

000d5b44 <spark_sync_time_pending>:
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
   d5b44:	b508      	push	{r3, lr}
   d5b46:	4b02      	ldr	r3, [pc, #8]	; (d5b50 <spark_sync_time_pending+0xc>)
   d5b48:	681b      	ldr	r3, [r3, #0]
   d5b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5b4c:	9301      	str	r3, [sp, #4]
   d5b4e:	bd08      	pop	{r3, pc}
   d5b50:	00030244 	.word	0x00030244

000d5b54 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d5b54:	b508      	push	{r3, lr}
   d5b56:	4b02      	ldr	r3, [pc, #8]	; (d5b60 <spark_set_random_seed_from_cloud_handler+0xc>)
   d5b58:	681b      	ldr	r3, [r3, #0]
   d5b5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d5b5c:	9301      	str	r3, [sp, #4]
   d5b5e:	bd08      	pop	{r3, pc}
   d5b60:	00030244 	.word	0x00030244

000d5b64 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d5b64:	b508      	push	{r3, lr}
   d5b66:	4b02      	ldr	r3, [pc, #8]	; (d5b70 <network_connect+0xc>)
   d5b68:	681b      	ldr	r3, [r3, #0]
   d5b6a:	685b      	ldr	r3, [r3, #4]
   d5b6c:	9301      	str	r3, [sp, #4]
   d5b6e:	bd08      	pop	{r3, pc}
   d5b70:	00030240 	.word	0x00030240

000d5b74 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5b74:	b508      	push	{r3, lr}
   d5b76:	4b02      	ldr	r3, [pc, #8]	; (d5b80 <network_connecting+0xc>)
   d5b78:	681b      	ldr	r3, [r3, #0]
   d5b7a:	689b      	ldr	r3, [r3, #8]
   d5b7c:	9301      	str	r3, [sp, #4]
   d5b7e:	bd08      	pop	{r3, pc}
   d5b80:	00030240 	.word	0x00030240

000d5b84 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5b84:	b508      	push	{r3, lr}
   d5b86:	4b02      	ldr	r3, [pc, #8]	; (d5b90 <network_disconnect+0xc>)
   d5b88:	681b      	ldr	r3, [r3, #0]
   d5b8a:	68db      	ldr	r3, [r3, #12]
   d5b8c:	9301      	str	r3, [sp, #4]
   d5b8e:	bd08      	pop	{r3, pc}
   d5b90:	00030240 	.word	0x00030240

000d5b94 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5b94:	b508      	push	{r3, lr}
   d5b96:	4b02      	ldr	r3, [pc, #8]	; (d5ba0 <network_ready+0xc>)
   d5b98:	681b      	ldr	r3, [r3, #0]
   d5b9a:	691b      	ldr	r3, [r3, #16]
   d5b9c:	9301      	str	r3, [sp, #4]
   d5b9e:	bd08      	pop	{r3, pc}
   d5ba0:	00030240 	.word	0x00030240

000d5ba4 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5ba4:	b508      	push	{r3, lr}
   d5ba6:	4b02      	ldr	r3, [pc, #8]	; (d5bb0 <network_on+0xc>)
   d5ba8:	681b      	ldr	r3, [r3, #0]
   d5baa:	695b      	ldr	r3, [r3, #20]
   d5bac:	9301      	str	r3, [sp, #4]
   d5bae:	bd08      	pop	{r3, pc}
   d5bb0:	00030240 	.word	0x00030240

000d5bb4 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5bb4:	b508      	push	{r3, lr}
   d5bb6:	4b02      	ldr	r3, [pc, #8]	; (d5bc0 <network_off+0xc>)
   d5bb8:	681b      	ldr	r3, [r3, #0]
   d5bba:	699b      	ldr	r3, [r3, #24]
   d5bbc:	9301      	str	r3, [sp, #4]
   d5bbe:	bd08      	pop	{r3, pc}
   d5bc0:	00030240 	.word	0x00030240

000d5bc4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5bc4:	b508      	push	{r3, lr}
   d5bc6:	4b02      	ldr	r3, [pc, #8]	; (d5bd0 <network_listen+0xc>)
   d5bc8:	681b      	ldr	r3, [r3, #0]
   d5bca:	69db      	ldr	r3, [r3, #28]
   d5bcc:	9301      	str	r3, [sp, #4]
   d5bce:	bd08      	pop	{r3, pc}
   d5bd0:	00030240 	.word	0x00030240

000d5bd4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5bd4:	b508      	push	{r3, lr}
   d5bd6:	4b02      	ldr	r3, [pc, #8]	; (d5be0 <network_listening+0xc>)
   d5bd8:	681b      	ldr	r3, [r3, #0]
   d5bda:	6a1b      	ldr	r3, [r3, #32]
   d5bdc:	9301      	str	r3, [sp, #4]
   d5bde:	bd08      	pop	{r3, pc}
   d5be0:	00030240 	.word	0x00030240

000d5be4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5be4:	b508      	push	{r3, lr}
   d5be6:	4b02      	ldr	r3, [pc, #8]	; (d5bf0 <network_set_listen_timeout+0xc>)
   d5be8:	681b      	ldr	r3, [r3, #0]
   d5bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d5bec:	9301      	str	r3, [sp, #4]
   d5bee:	bd08      	pop	{r3, pc}
   d5bf0:	00030240 	.word	0x00030240

000d5bf4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5bf4:	b508      	push	{r3, lr}
   d5bf6:	4b02      	ldr	r3, [pc, #8]	; (d5c00 <network_get_listen_timeout+0xc>)
   d5bf8:	681b      	ldr	r3, [r3, #0]
   d5bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d5bfc:	9301      	str	r3, [sp, #4]
   d5bfe:	bd08      	pop	{r3, pc}
   d5c00:	00030240 	.word	0x00030240

000d5c04 <network_is_on>:
DYNALIB_FN(14, system_net, network_set_hostname, int(network_handle_t, uint32_t, const char*, void*))
DYNALIB_FN(15, system_net, network_get_hostname, int(network_handle_t, uint32_t, char*, size_t, void*))
DYNALIB_FN(16, system_net, network_is_on, bool(network_handle_t, void*))
   d5c04:	b508      	push	{r3, lr}
   d5c06:	4b02      	ldr	r3, [pc, #8]	; (d5c10 <network_is_on+0xc>)
   d5c08:	681b      	ldr	r3, [r3, #0]
   d5c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5c0c:	9301      	str	r3, [sp, #4]
   d5c0e:	bd08      	pop	{r3, pc}
   d5c10:	00030240 	.word	0x00030240

000d5c14 <network_is_off>:
DYNALIB_FN(17, system_net, network_is_off, bool(network_handle_t, void*))
   d5c14:	b508      	push	{r3, lr}
   d5c16:	4b02      	ldr	r3, [pc, #8]	; (d5c20 <network_is_off+0xc>)
   d5c18:	681b      	ldr	r3, [r3, #0]
   d5c1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c1c:	9301      	str	r3, [sp, #4]
   d5c1e:	bd08      	pop	{r3, pc}
   d5c20:	00030240 	.word	0x00030240

000d5c24 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5c24:	b508      	push	{r3, lr}
   d5c26:	4b02      	ldr	r3, [pc, #8]	; (d5c30 <malloc+0xc>)
   d5c28:	681b      	ldr	r3, [r3, #0]
   d5c2a:	681b      	ldr	r3, [r3, #0]
   d5c2c:	9301      	str	r3, [sp, #4]
   d5c2e:	bd08      	pop	{r3, pc}
   d5c30:	0003021c 	.word	0x0003021c

000d5c34 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d5c34:	b508      	push	{r3, lr}
   d5c36:	4b02      	ldr	r3, [pc, #8]	; (d5c40 <free+0xc>)
   d5c38:	681b      	ldr	r3, [r3, #0]
   d5c3a:	685b      	ldr	r3, [r3, #4]
   d5c3c:	9301      	str	r3, [sp, #4]
   d5c3e:	bd08      	pop	{r3, pc}
   d5c40:	0003021c 	.word	0x0003021c

000d5c44 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d5c44:	b508      	push	{r3, lr}
   d5c46:	4b02      	ldr	r3, [pc, #8]	; (d5c50 <realloc+0xc>)
   d5c48:	681b      	ldr	r3, [r3, #0]
   d5c4a:	689b      	ldr	r3, [r3, #8]
   d5c4c:	9301      	str	r3, [sp, #4]
   d5c4e:	bd08      	pop	{r3, pc}
   d5c50:	0003021c 	.word	0x0003021c

000d5c54 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
   d5c54:	b508      	push	{r3, lr}
   d5c56:	4b02      	ldr	r3, [pc, #8]	; (d5c60 <siprintf+0xc>)
   d5c58:	681b      	ldr	r3, [r3, #0]
   d5c5a:	691b      	ldr	r3, [r3, #16]
   d5c5c:	9301      	str	r3, [sp, #4]
   d5c5e:	bd08      	pop	{r3, pc}
   d5c60:	0003021c 	.word	0x0003021c

000d5c64 <snprintf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
   d5c64:	b508      	push	{r3, lr}
   d5c66:	4b02      	ldr	r3, [pc, #8]	; (d5c70 <snprintf+0xc>)
   d5c68:	681b      	ldr	r3, [r3, #0]
   d5c6a:	69db      	ldr	r3, [r3, #28]
   d5c6c:	9301      	str	r3, [sp, #4]
   d5c6e:	bd08      	pop	{r3, pc}
   d5c70:	0003021c 	.word	0x0003021c

000d5c74 <vsnprintf>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d5c74:	b508      	push	{r3, lr}
   d5c76:	4b02      	ldr	r3, [pc, #8]	; (d5c80 <vsnprintf+0xc>)
   d5c78:	681b      	ldr	r3, [r3, #0]
   d5c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d5c7c:	9301      	str	r3, [sp, #4]
   d5c7e:	bd08      	pop	{r3, pc}
   d5c80:	0003021c 	.word	0x0003021c

000d5c84 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d5c84:	b508      	push	{r3, lr}
   d5c86:	4b02      	ldr	r3, [pc, #8]	; (d5c90 <newlib_impure_ptr_callback+0xc>)
   d5c88:	681b      	ldr	r3, [r3, #0]
   d5c8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d5c8c:	9301      	str	r3, [sp, #4]
   d5c8e:	bd08      	pop	{r3, pc}
   d5c90:	0003021c 	.word	0x0003021c

000d5c94 <strftime>:
// Electron has some of these exported from a different system part through services2 dynalib
// Photon/P1 do not have enough space in system-part2
#if HAL_PLATFORM_EXPORT_STDLIB_RT_DYNALIB
DYNALIB_FN(18, rt, strftime, size_t(char* __restrict, size_t, const char* __restrict, const struct tm* __restrict))
   d5c94:	b508      	push	{r3, lr}
   d5c96:	4b02      	ldr	r3, [pc, #8]	; (d5ca0 <strftime+0xc>)
   d5c98:	681b      	ldr	r3, [r3, #0]
   d5c9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5c9c:	9301      	str	r3, [sp, #4]
   d5c9e:	bd08      	pop	{r3, pc}
   d5ca0:	0003021c 	.word	0x0003021c

000d5ca4 <localtime_r>:
DYNALIB_FN(19, rt, localtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
   d5ca4:	b508      	push	{r3, lr}
   d5ca6:	4b02      	ldr	r3, [pc, #8]	; (d5cb0 <localtime_r+0xc>)
   d5ca8:	681b      	ldr	r3, [r3, #0]
   d5caa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d5cac:	9301      	str	r3, [sp, #4]
   d5cae:	bd08      	pop	{r3, pc}
   d5cb0:	0003021c 	.word	0x0003021c

000d5cb4 <mktime>:
DYNALIB_FN(20, rt, gmtime_r, struct tm*(const time_t* __restrict, struct tm* __restrict))
DYNALIB_FN(21, rt, mktime, time_t(struct tm*))
   d5cb4:	b508      	push	{r3, lr}
   d5cb6:	4b02      	ldr	r3, [pc, #8]	; (d5cc0 <mktime+0xc>)
   d5cb8:	681b      	ldr	r3, [r3, #0]
   d5cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d5cbc:	9301      	str	r3, [sp, #4]
   d5cbe:	bd08      	pop	{r3, pc}
   d5cc0:	0003021c 	.word	0x0003021c

000d5cc4 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d5cc4:	2100      	movs	r1, #0
   d5cc6:	f7ff bef1 	b.w	d5aac <system_delay_ms>

000d5cca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5cca:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d5ccc:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d5cce:	4604      	mov	r4, r0
          _M_dispose();
   d5cd0:	689b      	ldr	r3, [r3, #8]
   d5cd2:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d5cd4:	68a3      	ldr	r3, [r4, #8]
   d5cd6:	3b01      	subs	r3, #1
   d5cd8:	60a3      	str	r3, [r4, #8]
   d5cda:	b92b      	cbnz	r3, d5ce8 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d5cdc:	6823      	ldr	r3, [r4, #0]
   d5cde:	4620      	mov	r0, r4
   d5ce0:	68db      	ldr	r3, [r3, #12]
        }
    }
   d5ce2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d5ce6:	4718      	bx	r3
    }
   d5ce8:	bd10      	pop	{r4, pc}

000d5cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d5cea:	680b      	ldr	r3, [r1, #0]
   d5cec:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d5cee:	b113      	cbz	r3, d5cf6 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    { ++_M_use_count; }
   d5cf0:	685a      	ldr	r2, [r3, #4]
   d5cf2:	3201      	adds	r2, #1
   d5cf4:	605a      	str	r2, [r3, #4]
	  _M_pi->_M_add_ref_copy();
      }
   d5cf6:	4770      	bx	lr

000d5cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~__shared_count() noexcept
   d5cf8:	b510      	push	{r4, lr}
   d5cfa:	4604      	mov	r4, r0
	if (_M_pi != nullptr)
   d5cfc:	6800      	ldr	r0, [r0, #0]
   d5cfe:	b128      	cbz	r0, d5d0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
      if (--_M_use_count == 0)
   d5d00:	6843      	ldr	r3, [r0, #4]
   d5d02:	3b01      	subs	r3, #1
   d5d04:	6043      	str	r3, [r0, #4]
   d5d06:	b90b      	cbnz	r3, d5d0c <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x14>
   d5d08:	f7ff ffdf 	bl	d5cca <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
      }
   d5d0c:	4620      	mov	r0, r4
   d5d0e:	bd10      	pop	{r4, pc}

000d5d10 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5d10:	4802      	ldr	r0, [pc, #8]	; (d5d1c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0xc>)
   d5d12:	2300      	movs	r3, #0
   d5d14:	6003      	str	r3, [r0, #0]
    {
        os_mutex_recursive_create(&handle_);
   d5d16:	f7ff bd09 	b.w	d572c <os_mutex_recursive_create>
   d5d1a:	bf00      	nop
   d5d1c:	2003e53c 	.word	0x2003e53c

000d5d20 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
   d5d20:	2200      	movs	r2, #0
   d5d22:	6840      	ldr	r0, [r0, #4]
   d5d24:	4611      	mov	r1, r2
   d5d26:	f7ff bf35 	b.w	d5b94 <network_ready>

000d5d2a <_ZN5spark13CellularClass9listeningEv>:
        return network_listening(*this, 0, NULL);
   d5d2a:	2200      	movs	r2, #0
   d5d2c:	6840      	ldr	r0, [r0, #4]
   d5d2e:	4611      	mov	r1, r2
   d5d30:	f7ff bf50 	b.w	d5bd4 <network_listening>

000d5d34 <_ZN5spark13CellularClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5d34:	2200      	movs	r2, #0
   d5d36:	6840      	ldr	r0, [r0, #4]
   d5d38:	4611      	mov	r1, r2
   d5d3a:	f7ff bf5b 	b.w	d5bf4 <network_get_listen_timeout>

000d5d3e <_ZN5spark13CellularClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5d3e:	6840      	ldr	r0, [r0, #4]
   d5d40:	2200      	movs	r2, #0
   d5d42:	f7ff bf4f 	b.w	d5be4 <network_set_listen_timeout>

000d5d46 <_ZN5spark13CellularClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5d46:	6840      	ldr	r0, [r0, #4]
   d5d48:	2200      	movs	r2, #0
   d5d4a:	f081 0101 	eor.w	r1, r1, #1
   d5d4e:	f7ff bf39 	b.w	d5bc4 <network_listen>

000d5d52 <_ZN5spark13CellularClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5d52:	2300      	movs	r3, #0
   d5d54:	6840      	ldr	r0, [r0, #4]
   d5d56:	461a      	mov	r2, r3
   d5d58:	4619      	mov	r1, r3
   d5d5a:	f7ff bf2b 	b.w	d5bb4 <network_off>

000d5d5e <_ZN5spark13CellularClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5d5e:	2300      	movs	r3, #0
   d5d60:	6840      	ldr	r0, [r0, #4]
   d5d62:	461a      	mov	r2, r3
   d5d64:	4619      	mov	r1, r3
   d5d66:	f7ff bf1d 	b.w	d5ba4 <network_on>

000d5d6a <_ZN5spark13CellularClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5d6a:	2200      	movs	r2, #0
   d5d6c:	6840      	ldr	r0, [r0, #4]
   d5d6e:	4611      	mov	r1, r2
   d5d70:	f7ff bf00 	b.w	d5b74 <network_connecting>

000d5d74 <_ZN5spark13CellularClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5d74:	6840      	ldr	r0, [r0, #4]
   d5d76:	2200      	movs	r2, #0
   d5d78:	2102      	movs	r1, #2
   d5d7a:	f7ff bf03 	b.w	d5b84 <network_disconnect>

000d5d7e <_ZN5spark13CellularClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5d7e:	2300      	movs	r3, #0
   d5d80:	6840      	ldr	r0, [r0, #4]
   d5d82:	461a      	mov	r2, r3
   d5d84:	f7ff beee 	b.w	d5b64 <network_connect>

000d5d88 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
   d5d88:	4b08      	ldr	r3, [pc, #32]	; (d5dac <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x24>)
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
   d5d8a:	b510      	push	{r4, lr}
   d5d8c:	2428      	movs	r4, #40	; 0x28
   d5d8e:	4622      	mov	r2, r4
   d5d90:	4618      	mov	r0, r3
   d5d92:	2100      	movs	r1, #0
   d5d94:	f002 f900 	bl	d7f98 <memset>
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d5d98:	4b05      	ldr	r3, [pc, #20]	; (d5db0 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x28>)
        cid = -1;
        size = sizeof(*this);
   d5d9a:	8004      	strh	r4, [r0, #0]
        cid = -1;
   d5d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d5da0:	6042      	str	r2, [r0, #4]
   d5da2:	2204      	movs	r2, #4
   d5da4:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
   d5da6:	4a03      	ldr	r2, [pc, #12]	; (d5db4 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x2c>)
   d5da8:	601a      	str	r2, [r3, #0]
   d5daa:	bd10      	pop	{r4, pc}
   d5dac:	2003e548 	.word	0x2003e548
   d5db0:	2003e540 	.word	0x2003e540
   d5db4:	000d88ec 	.word	0x000d88ec

000d5db8 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d5db8:	2200      	movs	r2, #0
   d5dba:	6840      	ldr	r0, [r0, #4]
   d5dbc:	4611      	mov	r1, r2
   d5dbe:	f7ff bf09 	b.w	d5bd4 <network_listening>

000d5dc2 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d5dc2:	2200      	movs	r2, #0
   d5dc4:	6840      	ldr	r0, [r0, #4]
   d5dc6:	4611      	mov	r1, r2
   d5dc8:	f7ff bf14 	b.w	d5bf4 <network_get_listen_timeout>

000d5dcc <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d5dcc:	6840      	ldr	r0, [r0, #4]
   d5dce:	2200      	movs	r2, #0
   d5dd0:	f7ff bf08 	b.w	d5be4 <network_set_listen_timeout>

000d5dd4 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d5dd4:	6840      	ldr	r0, [r0, #4]
   d5dd6:	2200      	movs	r2, #0
   d5dd8:	f081 0101 	eor.w	r1, r1, #1
   d5ddc:	f7ff bef2 	b.w	d5bc4 <network_listen>

000d5de0 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d5de0:	2300      	movs	r3, #0
   d5de2:	6840      	ldr	r0, [r0, #4]
   d5de4:	461a      	mov	r2, r3
   d5de6:	4619      	mov	r1, r3
   d5de8:	f7ff bee4 	b.w	d5bb4 <network_off>

000d5dec <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d5dec:	2300      	movs	r3, #0
   d5dee:	6840      	ldr	r0, [r0, #4]
   d5df0:	461a      	mov	r2, r3
   d5df2:	4619      	mov	r1, r3
   d5df4:	f7ff bed6 	b.w	d5ba4 <network_on>

000d5df8 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d5df8:	2200      	movs	r2, #0
   d5dfa:	6840      	ldr	r0, [r0, #4]
   d5dfc:	4611      	mov	r1, r2
   d5dfe:	f7ff bec9 	b.w	d5b94 <network_ready>

000d5e02 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d5e02:	2200      	movs	r2, #0
   d5e04:	6840      	ldr	r0, [r0, #4]
   d5e06:	4611      	mov	r1, r2
   d5e08:	f7ff beb4 	b.w	d5b74 <network_connecting>

000d5e0c <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5e0c:	6840      	ldr	r0, [r0, #4]
   d5e0e:	2200      	movs	r2, #0
   d5e10:	2102      	movs	r1, #2
   d5e12:	f7ff beb7 	b.w	d5b84 <network_disconnect>

000d5e16 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d5e16:	2300      	movs	r3, #0
   d5e18:	6840      	ldr	r0, [r0, #4]
   d5e1a:	461a      	mov	r2, r3
   d5e1c:	f7ff bea2 	b.w	d5b64 <network_connect>

000d5e20 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
   d5e20:	4b02      	ldr	r3, [pc, #8]	; (d5e2c <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d5e22:	2203      	movs	r2, #3
   d5e24:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d5e26:	4a02      	ldr	r2, [pc, #8]	; (d5e30 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d5e28:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d5e2a:	4770      	bx	lr
   d5e2c:	2003e570 	.word	0x2003e570
   d5e30:	000d8928 	.word	0x000d8928

000d5e34 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d5e34:	4770      	bx	lr

000d5e36 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5e36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5e38:	4606      	mov	r6, r0
   d5e3a:	4615      	mov	r5, r2
   d5e3c:	460c      	mov	r4, r1
   d5e3e:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5e40:	42bc      	cmp	r4, r7
   d5e42:	d006      	beq.n	d5e52 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5e44:	6833      	ldr	r3, [r6, #0]
   d5e46:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5e4a:	689b      	ldr	r3, [r3, #8]
   d5e4c:	4630      	mov	r0, r6
   d5e4e:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d5e50:	e7f6      	b.n	d5e40 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d5e52:	4628      	mov	r0, r5
   d5e54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5e56 <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d5e56:	7c00      	ldrb	r0, [r0, #16]
   d5e58:	2200      	movs	r2, #0
   d5e5a:	f7ff bcef 	b.w	d583c <hal_i2c_write>

000d5e5e <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d5e5e:	7c00      	ldrb	r0, [r0, #16]
   d5e60:	2100      	movs	r1, #0
   d5e62:	f7ff bcf3 	b.w	d584c <hal_i2c_available>

000d5e66 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d5e66:	7c00      	ldrb	r0, [r0, #16]
   d5e68:	2100      	movs	r1, #0
   d5e6a:	f7ff bcf7 	b.w	d585c <hal_i2c_read>

000d5e6e <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d5e6e:	7c00      	ldrb	r0, [r0, #16]
   d5e70:	2100      	movs	r1, #0
   d5e72:	f7ff bcfb 	b.w	d586c <hal_i2c_peek>

000d5e76 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d5e76:	7c00      	ldrb	r0, [r0, #16]
   d5e78:	2100      	movs	r1, #0
   d5e7a:	f7ff bcff 	b.w	d587c <hal_i2c_flush>

000d5e7e <_ZN7TwoWireD0Ev>:
   d5e7e:	b510      	push	{r4, lr}
   d5e80:	2114      	movs	r1, #20
   d5e82:	4604      	mov	r4, r0
   d5e84:	f002 f82e 	bl	d7ee4 <_ZdlPvj>
   d5e88:	4620      	mov	r0, r4
   d5e8a:	bd10      	pop	{r4, pc}

000d5e8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d5e8c:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5e8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5e92:	4604      	mov	r4, r0
   d5e94:	4608      	mov	r0, r1
   d5e96:	2100      	movs	r1, #0
   d5e98:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d5e9c:	4b03      	ldr	r3, [pc, #12]	; (d5eac <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d5e9e:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d5ea0:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d5ea2:	4611      	mov	r1, r2
   d5ea4:	f7ff fcfa 	bl	d589c <hal_i2c_init>
}
   d5ea8:	4620      	mov	r0, r4
   d5eaa:	bd10      	pop	{r4, pc}
   d5eac:	000d8964 	.word	0x000d8964

000d5eb0 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d5eb0:	2300      	movs	r3, #0
   d5eb2:	7c00      	ldrb	r0, [r0, #16]
   d5eb4:	461a      	mov	r2, r3
   d5eb6:	4619      	mov	r1, r3
   d5eb8:	f7ff bca8 	b.w	d580c <hal_i2c_begin>

000d5ebc <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d5ebc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d5ebe:	2200      	movs	r2, #0
   d5ec0:	2314      	movs	r3, #20
   d5ec2:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d5ec6:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d5eca:	780b      	ldrb	r3, [r1, #0]
   d5ecc:	f88d 3008 	strb.w	r3, [sp, #8]
   d5ed0:	684b      	ldr	r3, [r1, #4]
   d5ed2:	9303      	str	r3, [sp, #12]
   d5ed4:	68cb      	ldr	r3, [r1, #12]
   d5ed6:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d5ed8:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d5eda:	7a0b      	ldrb	r3, [r1, #8]
   d5edc:	9305      	str	r3, [sp, #20]
   d5ede:	a901      	add	r1, sp, #4
   d5ee0:	f7ff fcf4 	bl	d58cc <hal_i2c_request_ex>
}
   d5ee4:	b007      	add	sp, #28
   d5ee6:	f85d fb04 	ldr.w	pc, [sp], #4

000d5eea <_ZN7TwoWire11requestFromEhjh>:
{
   d5eea:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5eec:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d5eee:	f88d 1000 	strb.w	r1, [sp]
   d5ef2:	f04f 0164 	mov.w	r1, #100	; 0x64
   d5ef6:	9103      	str	r1, [sp, #12]
   d5ef8:	bf18      	it	ne
   d5efa:	2301      	movne	r3, #1
   d5efc:	4669      	mov	r1, sp
    size_ = size;
   d5efe:	9201      	str	r2, [sp, #4]
   d5f00:	f88d 3008 	strb.w	r3, [sp, #8]
   d5f04:	f7ff ffda 	bl	d5ebc <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d5f08:	b005      	add	sp, #20
   d5f0a:	f85d fb04 	ldr.w	pc, [sp], #4

000d5f0e <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d5f0e:	2301      	movs	r3, #1
   d5f10:	f7ff bfeb 	b.w	d5eea <_ZN7TwoWire11requestFromEhjh>

000d5f14 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d5f14:	7c00      	ldrb	r0, [r0, #16]
   d5f16:	2200      	movs	r2, #0
   d5f18:	f7ff bc80 	b.w	d581c <hal_i2c_begin_transmission>

000d5f1c <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d5f1c:	b2c9      	uxtb	r1, r1
   d5f1e:	f7ff bff9 	b.w	d5f14 <_ZN7TwoWire17beginTransmissionEh>

000d5f22 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d5f22:	7c00      	ldrb	r0, [r0, #16]
   d5f24:	2200      	movs	r2, #0
   d5f26:	f7ff bc81 	b.w	d582c <hal_i2c_end_transmission>

000d5f2a <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d5f2a:	2101      	movs	r1, #1
   d5f2c:	f7ff bff9 	b.w	d5f22 <_ZN7TwoWire15endTransmissionEh>

000d5f30 <_ZN7TwoWire4lockEv>:
{
  hal_i2c_reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
   d5f30:	b508      	push	{r3, lr}
  return hal_i2c_lock(_i2c, NULL) == 0;
   d5f32:	2100      	movs	r1, #0
   d5f34:	7c00      	ldrb	r0, [r0, #16]
   d5f36:	f7ff fcb9 	bl	d58ac <hal_i2c_lock>
}
   d5f3a:	fab0 f080 	clz	r0, r0
   d5f3e:	0940      	lsrs	r0, r0, #5
   d5f40:	bd08      	pop	{r3, pc}

000d5f42 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
   d5f42:	b508      	push	{r3, lr}
  return hal_i2c_unlock(_i2c, NULL) == 0;
   d5f44:	2100      	movs	r1, #0
   d5f46:	7c00      	ldrb	r0, [r0, #16]
   d5f48:	f7ff fcb8 	bl	d58bc <hal_i2c_unlock>
}
   d5f4c:	fab0 f080 	clz	r0, r0
   d5f50:	0940      	lsrs	r0, r0, #5
   d5f52:	bd08      	pop	{r3, pc}

000d5f54 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5f54:	4770      	bx	lr

000d5f56 <_ZN9IPAddressD0Ev>:
   d5f56:	b510      	push	{r4, lr}
   d5f58:	2118      	movs	r1, #24
   d5f5a:	4604      	mov	r4, r0
   d5f5c:	f001 ffc2 	bl	d7ee4 <_ZdlPvj>
   d5f60:	4620      	mov	r0, r4
   d5f62:	bd10      	pop	{r4, pc}

000d5f64 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5f64:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d5f66:	7d03      	ldrb	r3, [r0, #20]
   d5f68:	2b06      	cmp	r3, #6
{
   d5f6a:	b08d      	sub	sp, #52	; 0x34
   d5f6c:	460e      	mov	r6, r1
   d5f6e:	f100 0704 	add.w	r7, r0, #4
   d5f72:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d5f76:	d012      	beq.n	d5f9e <_ZNK9IPAddress7printToER5Print+0x3a>
   d5f78:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d5f7c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5f80:	220a      	movs	r2, #10
   d5f82:	4630      	mov	r0, r6
   d5f84:	f001 fae5 	bl	d7552 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d5f88:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d5f8a:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d5f8c:	d019      	beq.n	d5fc2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d5f8e:	2c00      	cmp	r4, #0
   d5f90:	d0f4      	beq.n	d5f7c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d5f92:	212e      	movs	r1, #46	; 0x2e
   d5f94:	4630      	mov	r0, r6
   d5f96:	f001 fac3 	bl	d7520 <_ZN5Print5printEc>
   d5f9a:	4404      	add	r4, r0
   d5f9c:	e7ee      	b.n	d5f7c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5f9e:	232f      	movs	r3, #47	; 0x2f
   d5fa0:	466a      	mov	r2, sp
   d5fa2:	4639      	mov	r1, r7
   d5fa4:	200a      	movs	r0, #10
		buf[0] = 0;
   d5fa6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5faa:	f7ff fc97 	bl	d58dc <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d5fae:	4668      	mov	r0, sp
   d5fb0:	f002 f847 	bl	d8042 <strlen>
   d5fb4:	6833      	ldr	r3, [r6, #0]
   d5fb6:	4602      	mov	r2, r0
   d5fb8:	68db      	ldr	r3, [r3, #12]
   d5fba:	4669      	mov	r1, sp
   d5fbc:	4630      	mov	r0, r6
   d5fbe:	4798      	blx	r3
   d5fc0:	4604      	mov	r4, r0
    }
    return n;
}
   d5fc2:	4620      	mov	r0, r4
   d5fc4:	b00d      	add	sp, #52	; 0x34
   d5fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5fc8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d5fc8:	b510      	push	{r4, lr}
   d5fca:	4b05      	ldr	r3, [pc, #20]	; (d5fe0 <_ZN9IPAddressC1Ev+0x18>)
   d5fcc:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d5fce:	2211      	movs	r2, #17
   d5fd0:	f840 3b04 	str.w	r3, [r0], #4
   d5fd4:	2100      	movs	r1, #0
   d5fd6:	f001 ffdf 	bl	d7f98 <memset>
}
   d5fda:	4620      	mov	r0, r4
   d5fdc:	bd10      	pop	{r4, pc}
   d5fde:	bf00      	nop
   d5fe0:	000d898c 	.word	0x000d898c

000d5fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d5fe4:	4603      	mov	r3, r0
   d5fe6:	4a07      	ldr	r2, [pc, #28]	; (d6004 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5fe8:	b510      	push	{r4, lr}
   d5fea:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d5fee:	f101 0210 	add.w	r2, r1, #16
   d5ff2:	f851 4b04 	ldr.w	r4, [r1], #4
   d5ff6:	f843 4b04 	str.w	r4, [r3], #4
   d5ffa:	4291      	cmp	r1, r2
   d5ffc:	d1f9      	bne.n	d5ff2 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5ffe:	780a      	ldrb	r2, [r1, #0]
   d6000:	701a      	strb	r2, [r3, #0]
}
   d6002:	bd10      	pop	{r4, pc}
   d6004:	000d898c 	.word	0x000d898c

000d6008 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6008:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d600a:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d600e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6012:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6016:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d601a:	2304      	movs	r3, #4
   d601c:	6041      	str	r1, [r0, #4]
   d601e:	7503      	strb	r3, [r0, #20]
}
   d6020:	bd10      	pop	{r4, pc}

000d6022 <_ZN9IPAddressaSEPKh>:
{
   d6022:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6024:	78cb      	ldrb	r3, [r1, #3]
   d6026:	9300      	str	r3, [sp, #0]
   d6028:	788b      	ldrb	r3, [r1, #2]
   d602a:	784a      	ldrb	r2, [r1, #1]
   d602c:	7809      	ldrb	r1, [r1, #0]
   d602e:	f7ff ffeb 	bl	d6008 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6032:	b002      	add	sp, #8
   d6034:	bd10      	pop	{r4, pc}

000d6036 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>:

namespace {

// Skips token and all its children tokens if any
const jsmntok_t* skipToken(const jsmntok_t *t) {
    size_t n = 1;
   d6036:	f100 0310 	add.w	r3, r0, #16
   d603a:	2201      	movs	r2, #1
    do {
        if (t->type == JSMN_OBJECT) {
   d603c:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   d6040:	2901      	cmp	r1, #1
   d6042:	4618      	mov	r0, r3
   d6044:	d108      	bne.n	d6058 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x22>
            n += t->size * 2; // Number of name and value tokens
   d6046:	f853 1c04 	ldr.w	r1, [r3, #-4]
   d604a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
        } else if (t->type == JSMN_ARRAY) {
            n += t->size; // Number of value tokens
        }
        ++t;
        --n;
    } while (n);
   d604e:	3a01      	subs	r2, #1
   d6050:	f103 0310 	add.w	r3, r3, #16
   d6054:	d1f2      	bne.n	d603c <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x6>
    return t;
}
   d6056:	4770      	bx	lr
        } else if (t->type == JSMN_ARRAY) {
   d6058:	2902      	cmp	r1, #2
            n += t->size; // Number of value tokens
   d605a:	bf04      	itt	eq
   d605c:	f853 1c04 	ldreq.w	r1, [r3, #-4]
   d6060:	1852      	addeq	r2, r2, r1
   d6062:	e7f4      	b.n	d604e <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t+0x18>

000d6064 <_ZN5spark10JSONWriter6printfEPKcz>:
    write("null", 4);
    state_ = NEXT;
    return *this;
}

void spark::JSONWriter::printf(const char *fmt, ...) {
   d6064:	b40e      	push	{r1, r2, r3}
   d6066:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6068:	b088      	sub	sp, #32
   d606a:	af00      	add	r7, sp, #0
   d606c:	f107 0534 	add.w	r5, r7, #52	; 0x34
    char buf[16];
    va_list args;
    va_start(args, fmt);
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6070:	2110      	movs	r1, #16
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6072:	f855 2b04 	ldr.w	r2, [r5], #4
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6076:	607a      	str	r2, [r7, #4]
void spark::JSONWriter::printf(const char *fmt, ...) {
   d6078:	4604      	mov	r4, r0
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d607a:	462b      	mov	r3, r5
   d607c:	1878      	adds	r0, r7, r1
    va_start(args, fmt);
   d607e:	60fd      	str	r5, [r7, #12]
    int n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6080:	f7ff fdf8 	bl	d5c74 <vsnprintf>
    va_end(args);
    if ((size_t)n >= sizeof(buf)) {
   d6084:	280f      	cmp	r0, #15
   d6086:	687a      	ldr	r2, [r7, #4]
   d6088:	d91a      	bls.n	d60c0 <_ZN5spark10JSONWriter6printfEPKcz+0x5c>
        char buf[n + 1]; // Use larger buffer
   d608a:	f100 0308 	add.w	r3, r0, #8
   d608e:	f023 0307 	bic.w	r3, r3, #7
        va_start(args, fmt);
        n = vsnprintf(buf, sizeof(buf), fmt, args);
        va_end(args);
        if (n > 0) {
            write(buf, n);
        }
   d6092:	466e      	mov	r6, sp
        char buf[n + 1]; // Use larger buffer
   d6094:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d6098:	1c41      	adds	r1, r0, #1
   d609a:	462b      	mov	r3, r5
   d609c:	4668      	mov	r0, sp
        va_start(args, fmt);
   d609e:	60fd      	str	r5, [r7, #12]
        n = vsnprintf(buf, sizeof(buf), fmt, args);
   d60a0:	f7ff fde8 	bl	d5c74 <vsnprintf>
        if (n > 0) {
   d60a4:	1e02      	subs	r2, r0, #0
   d60a6:	dd04      	ble.n	d60b2 <_ZN5spark10JSONWriter6printfEPKcz+0x4e>
            write(buf, n);
   d60a8:	6823      	ldr	r3, [r4, #0]
   d60aa:	4669      	mov	r1, sp
   d60ac:	689b      	ldr	r3, [r3, #8]
   d60ae:	4620      	mov	r0, r4
   d60b0:	4798      	blx	r3
   d60b2:	46b5      	mov	sp, r6
    } else if (n > 0) {
        write(buf, n);
    }
}
   d60b4:	3720      	adds	r7, #32
   d60b6:	46bd      	mov	sp, r7
   d60b8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d60bc:	b003      	add	sp, #12
   d60be:	4770      	bx	lr
    } else if (n > 0) {
   d60c0:	2800      	cmp	r0, #0
   d60c2:	d0f7      	beq.n	d60b4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>
        write(buf, n);
   d60c4:	6823      	ldr	r3, [r4, #0]
   d60c6:	4602      	mov	r2, r0
   d60c8:	689b      	ldr	r3, [r3, #8]
   d60ca:	f107 0110 	add.w	r1, r7, #16
   d60ce:	4620      	mov	r0, r4
   d60d0:	4798      	blx	r3
}
   d60d2:	e7ef      	b.n	d60b4 <_ZN5spark10JSONWriter6printfEPKcz+0x50>

000d60d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>:
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60d4:	b510      	push	{r4, lr}
          _M_dispose();
   d60d6:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d60d8:	4604      	mov	r4, r0
          _M_dispose();
   d60da:	689b      	ldr	r3, [r3, #8]
   d60dc:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d60de:	68a3      	ldr	r3, [r4, #8]
   d60e0:	3b01      	subs	r3, #1
   d60e2:	60a3      	str	r3, [r4, #8]
   d60e4:	b92b      	cbnz	r3, d60f2 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0+0x1e>
            _M_destroy();
   d60e6:	6823      	ldr	r3, [r4, #0]
   d60e8:	4620      	mov	r0, r4
   d60ea:	68db      	ldr	r3, [r3, #12]
    }
   d60ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            _M_destroy();
   d60f0:	4718      	bx	r3
    }
   d60f2:	bd10      	pop	{r4, pc}

000d60f4 <_ZN5spark10JSONWriter5writeEc>:

inline spark::JSONWriter& spark::JSONWriter::value(const String &val) {
    return value(val.c_str(), val.length());
}

inline void spark::JSONWriter::write(char c) {
   d60f4:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d60f6:	6803      	ldr	r3, [r0, #0]
inline void spark::JSONWriter::write(char c) {
   d60f8:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d60fc:	689b      	ldr	r3, [r3, #8]
   d60fe:	2201      	movs	r2, #1
   d6100:	f10d 0107 	add.w	r1, sp, #7
   d6104:	4798      	blx	r3
}
   d6106:	b003      	add	sp, #12
   d6108:	f85d fb04 	ldr.w	pc, [sp], #4

000d610c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>:
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
    };

  template<typename _Tp, _Lock_policy _Lp>
    class __shared_ptr
   d610c:	b538      	push	{r3, r4, r5, lr}
   d610e:	680b      	ldr	r3, [r1, #0]
   d6110:	6003      	str	r3, [r0, #0]
   d6112:	684d      	ldr	r5, [r1, #4]
	if (__tmp != _M_pi)
   d6114:	6843      	ldr	r3, [r0, #4]
   d6116:	429d      	cmp	r5, r3
    class __shared_ptr
   d6118:	4604      	mov	r4, r0
	if (__tmp != _M_pi)
   d611a:	d00c      	beq.n	d6136 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x2a>
	    if (__tmp != 0)
   d611c:	b115      	cbz	r5, d6124 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x18>
    { ++_M_use_count; }
   d611e:	686b      	ldr	r3, [r5, #4]
   d6120:	3301      	adds	r3, #1
   d6122:	606b      	str	r3, [r5, #4]
	    if (_M_pi != 0)
   d6124:	6860      	ldr	r0, [r4, #4]
   d6126:	b128      	cbz	r0, d6134 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
      if (--_M_use_count == 0)
   d6128:	6843      	ldr	r3, [r0, #4]
   d612a:	3b01      	subs	r3, #1
   d612c:	6043      	str	r3, [r0, #4]
   d612e:	b90b      	cbnz	r3, d6134 <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_+0x28>
   d6130:	f7ff ffd0 	bl	d60d4 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.0>
	    _M_pi = __tmp;
   d6134:	6065      	str	r5, [r4, #4]
    class __shared_ptr
   d6136:	4620      	mov	r0, r4
   d6138:	bd38      	pop	{r3, r4, r5, pc}

000d613a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONValue::JSONValue(const jsmntok_t *t, detail::JSONDataPtr d) :
   d613a:	460b      	mov	r3, r1
   d613c:	4611      	mov	r1, r2
#if __cplusplus > 201402L
      using weak_type = __weak_ptr<_Tp, _Lp>;
#endif

      constexpr __shared_ptr() noexcept
      : _M_ptr(0), _M_refcount()
   d613e:	2200      	movs	r2, #0
   d6140:	b510      	push	{r4, lr}
      constexpr __shared_count() noexcept : _M_pi(0)
   d6142:	e9c0 2200 	strd	r2, r2, [r0]
   d6146:	4604      	mov	r4, r0
        t_ = t;
   d6148:	6083      	str	r3, [r0, #8]
    if (t) {
   d614a:	b90b      	cbnz	r3, d6150 <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x16>
}
   d614c:	4620      	mov	r0, r4
   d614e:	bd10      	pop	{r4, pc}
   *
   *  The object pointed to is deleted when the last shared_ptr pointing to
   *  it is destroyed or reset.
  */
  template<typename _Tp>
    class shared_ptr : public __shared_ptr<_Tp>
   d6150:	f7ff ffdc 	bl	d610c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
   d6154:	e7fa      	b.n	d614c <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x12>

000d6156 <_ZNK5spark9JSONValue4typeEv>:
    if (!t_) {
   d6156:	6883      	ldr	r3, [r0, #8]
   d6158:	b1eb      	cbz	r3, d6196 <_ZNK5spark9JSONValue4typeEv+0x40>
    switch (t_->type) {
   d615a:	781a      	ldrb	r2, [r3, #0]
   d615c:	2a03      	cmp	r2, #3
   d615e:	d81a      	bhi.n	d6196 <_ZNK5spark9JSONValue4typeEv+0x40>
   d6160:	e8df f002 	tbb	[pc, r2]
   d6164:	1b021704 	.word	0x1b021704
   d6168:	2005      	movs	r0, #5
   d616a:	4770      	bx	lr
        const char c = d_->json[t_->start];
   d616c:	6802      	ldr	r2, [r0, #0]
   d616e:	685b      	ldr	r3, [r3, #4]
   d6170:	6852      	ldr	r2, [r2, #4]
   d6172:	5cd0      	ldrb	r0, [r2, r3]
        if (c == '-' || (c >= '0' && c <= '9')) {
   d6174:	282d      	cmp	r0, #45	; 0x2d
   d6176:	d012      	beq.n	d619e <_ZNK5spark9JSONValue4typeEv+0x48>
   d6178:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d617c:	2b09      	cmp	r3, #9
   d617e:	d90e      	bls.n	d619e <_ZNK5spark9JSONValue4typeEv+0x48>
        } else if (c == 't' || c == 'f') { // Literal names are always in lower case
   d6180:	2874      	cmp	r0, #116	; 0x74
   d6182:	d00e      	beq.n	d61a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
   d6184:	2866      	cmp	r0, #102	; 0x66
   d6186:	d00c      	beq.n	d61a2 <_ZNK5spark9JSONValue4typeEv+0x4c>
        return JSON_TYPE_INVALID;
   d6188:	f1a0 036e 	sub.w	r3, r0, #110	; 0x6e
   d618c:	4258      	negs	r0, r3
   d618e:	4158      	adcs	r0, r3
   d6190:	4770      	bx	lr
        return JSON_TYPE_OBJECT;
   d6192:	2006      	movs	r0, #6
   d6194:	4770      	bx	lr
        return JSON_TYPE_INVALID;
   d6196:	2000      	movs	r0, #0
   d6198:	4770      	bx	lr
        return JSON_TYPE_STRING;
   d619a:	2004      	movs	r0, #4
   d619c:	4770      	bx	lr
            return JSON_TYPE_NUMBER;
   d619e:	2003      	movs	r0, #3
   d61a0:	4770      	bx	lr
            return JSON_TYPE_BOOL;
   d61a2:	2002      	movs	r0, #2
}
   d61a4:	4770      	bx	lr

000d61a6 <_ZNK5spark9JSONValue5toIntEv>:
int spark::JSONValue::toInt() const {
   d61a6:	b510      	push	{r4, lr}
   d61a8:	4604      	mov	r4, r0
    switch (type()) {
   d61aa:	f7ff ffd4 	bl	d6156 <_ZNK5spark9JSONValue4typeEv>
   d61ae:	2802      	cmp	r0, #2
   d61b0:	d00e      	beq.n	d61d0 <_ZNK5spark9JSONValue5toIntEv+0x2a>
   d61b2:	1ec3      	subs	r3, r0, #3
   d61b4:	b2db      	uxtb	r3, r3
   d61b6:	2b01      	cmp	r3, #1
   d61b8:	d814      	bhi.n	d61e4 <_ZNK5spark9JSONValue5toIntEv+0x3e>
        const char* const s = d_->json + t_->start;
   d61ba:	6822      	ldr	r2, [r4, #0]
   d61bc:	68a3      	ldr	r3, [r4, #8]
   d61be:	6850      	ldr	r0, [r2, #4]
   d61c0:	685b      	ldr	r3, [r3, #4]
}
   d61c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return strtol(s, nullptr, 10);
   d61c6:	220a      	movs	r2, #10
   d61c8:	2100      	movs	r1, #0
   d61ca:	4418      	add	r0, r3
   d61cc:	f002 b808 	b.w	d81e0 <strtol>
        const char* const s = d_->json + t_->start;
   d61d0:	6822      	ldr	r2, [r4, #0]
   d61d2:	68a3      	ldr	r3, [r4, #8]
        return *s == 't';
   d61d4:	6852      	ldr	r2, [r2, #4]
   d61d6:	685b      	ldr	r3, [r3, #4]
   d61d8:	5cd0      	ldrb	r0, [r2, r3]
   d61da:	f1a0 0374 	sub.w	r3, r0, #116	; 0x74
   d61de:	4258      	negs	r0, r3
   d61e0:	4158      	adcs	r0, r3
}
   d61e2:	bd10      	pop	{r4, pc}
    switch (type()) {
   d61e4:	2000      	movs	r0, #0
   d61e6:	e7fc      	b.n	d61e2 <_ZNK5spark9JSONValue5toIntEv+0x3c>

000d61e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONString::JSONString(const jsmntok_t *t, detail::JSONDataPtr d) :
   d61e8:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d61ea:	2300      	movs	r3, #0
      constexpr __shared_count() noexcept : _M_pi(0)
   d61ec:	e9c0 3300 	strd	r3, r3, [r0]
   d61f0:	4604      	mov	r4, r0
        n_(0) {
   d61f2:	480e      	ldr	r0, [pc, #56]	; (d622c <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x44>)
   d61f4:	e9c4 0302 	strd	r0, r3, [r4, #8]
    if (t && (t->type == JSMN_STRING || t->type == JSMN_PRIMITIVE)) {
   d61f8:	b1a9      	cbz	r1, d6226 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
   d61fa:	780b      	ldrb	r3, [r1, #0]
   d61fc:	2b03      	cmp	r3, #3
   d61fe:	d006      	beq.n	d620e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x26>
   d6200:	b98b      	cbnz	r3, d6226 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x3e>
        if (t->type != JSMN_PRIMITIVE || d->json[t->start] != 'n') { // Nulls are treated as empty strings
   d6202:	6813      	ldr	r3, [r2, #0]
   d6204:	6858      	ldr	r0, [r3, #4]
   d6206:	684b      	ldr	r3, [r1, #4]
   d6208:	5cc3      	ldrb	r3, [r0, r3]
   d620a:	2b6e      	cmp	r3, #110	; 0x6e
   d620c:	d007      	beq.n	d621e <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x36>
            s_ = d->json + t->start;
   d620e:	6813      	ldr	r3, [r2, #0]
   d6210:	684d      	ldr	r5, [r1, #4]
   d6212:	6858      	ldr	r0, [r3, #4]
            n_ = t->end - t->start;
   d6214:	688b      	ldr	r3, [r1, #8]
            s_ = d->json + t->start;
   d6216:	4428      	add	r0, r5
            n_ = t->end - t->start;
   d6218:	1b5b      	subs	r3, r3, r5
            s_ = d->json + t->start;
   d621a:	60a0      	str	r0, [r4, #8]
            n_ = t->end - t->start;
   d621c:	60e3      	str	r3, [r4, #12]
   d621e:	4611      	mov	r1, r2
   d6220:	4620      	mov	r0, r4
   d6222:	f7ff ff73 	bl	d610c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d6226:	4620      	mov	r0, r4
   d6228:	bd38      	pop	{r3, r4, r5, pc}
   d622a:	bf00      	nop
   d622c:	000d89f5 	.word	0x000d89f5

000d6230 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>:
spark::JSONObjectIterator::JSONObjectIterator(const jsmntok_t *t, detail::JSONDataPtr d) :
   d6230:	b538      	push	{r3, r4, r5, lr}
      : _M_ptr(0), _M_refcount()
   d6232:	2500      	movs	r5, #0
   d6234:	460b      	mov	r3, r1
      constexpr __shared_count() noexcept : _M_pi(0)
   d6236:	e9c0 5500 	strd	r5, r5, [r0]
        n_(0) {
   d623a:	e9c0 5502 	strd	r5, r5, [r0, #8]
   d623e:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6242:	4604      	mov	r4, r0
   d6244:	4611      	mov	r1, r2
    if (t && t->type == JSMN_OBJECT) {
   d6246:	b14b      	cbz	r3, d625c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
   d6248:	781a      	ldrb	r2, [r3, #0]
   d624a:	2a01      	cmp	r2, #1
   d624c:	d106      	bne.n	d625c <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE+0x2c>
        t_ = t + 1; // First property's name
   d624e:	f103 0210 	add.w	r2, r3, #16
        n_ = t->size; // Number of properties
   d6252:	68db      	ldr	r3, [r3, #12]
        t_ = t + 1; // First property's name
   d6254:	6082      	str	r2, [r0, #8]
        n_ = t->size; // Number of properties
   d6256:	6143      	str	r3, [r0, #20]
   d6258:	f7ff ff58 	bl	d610c <_ZNSt12__shared_ptrIN5spark6detail8JSONDataELN9__gnu_cxx12_Lock_policyE0EEaSERKS5_>
}
   d625c:	4620      	mov	r0, r4
   d625e:	bd38      	pop	{r3, r4, r5, pc}

000d6260 <_ZN5spark18JSONObjectIterator4nextEv>:
bool spark::JSONObjectIterator::next() {
   d6260:	b510      	push	{r4, lr}
    if (!n_) {
   d6262:	6943      	ldr	r3, [r0, #20]
bool spark::JSONObjectIterator::next() {
   d6264:	4604      	mov	r4, r0
    if (!n_) {
   d6266:	b163      	cbz	r3, d6282 <_ZN5spark18JSONObjectIterator4nextEv+0x22>
    k_ = t_; // Name
   d6268:	6880      	ldr	r0, [r0, #8]
   d626a:	60e0      	str	r0, [r4, #12]
    --n_;
   d626c:	3b01      	subs	r3, #1
    ++t_;
   d626e:	3010      	adds	r0, #16
   d6270:	60a0      	str	r0, [r4, #8]
    v_ = t_; // Value
   d6272:	6120      	str	r0, [r4, #16]
    --n_;
   d6274:	6163      	str	r3, [r4, #20]
    if (n_) {
   d6276:	b113      	cbz	r3, d627e <_ZN5spark18JSONObjectIterator4nextEv+0x1e>
        t_ = skipToken(t_);
   d6278:	f7ff fedd 	bl	d6036 <_ZN12_GLOBAL__N_19skipTokenEPK9jsmntok_t>
   d627c:	60a0      	str	r0, [r4, #8]
    return true;
   d627e:	2001      	movs	r0, #1
   d6280:	e000      	b.n	d6284 <_ZN5spark18JSONObjectIterator4nextEv+0x24>
        return false;
   d6282:	4618      	mov	r0, r3
}
   d6284:	bd10      	pop	{r4, pc}

000d6286 <_ZN5spark10JSONWriter9endObjectEv>:
spark::JSONWriter& spark::JSONWriter::endObject() {
   d6286:	b510      	push	{r4, lr}
    write('}');
   d6288:	217d      	movs	r1, #125	; 0x7d
spark::JSONWriter& spark::JSONWriter::endObject() {
   d628a:	4604      	mov	r4, r0
    write('}');
   d628c:	f7ff ff32 	bl	d60f4 <_ZN5spark10JSONWriter5writeEc>
    state_ = NEXT;
   d6290:	2301      	movs	r3, #1
   d6292:	7123      	strb	r3, [r4, #4]
}
   d6294:	4620      	mov	r0, r4
   d6296:	bd10      	pop	{r4, pc}

000d6298 <_ZN5spark10JSONWriter14writeSeparatorEv>:

void spark::JSONWriter::writeSeparator() {
   d6298:	b508      	push	{r3, lr}
    switch (state_) {
   d629a:	7903      	ldrb	r3, [r0, #4]
   d629c:	2b01      	cmp	r3, #1
   d629e:	d002      	beq.n	d62a6 <_ZN5spark10JSONWriter14writeSeparatorEv+0xe>
   d62a0:	2b02      	cmp	r3, #2
   d62a2:	d004      	beq.n	d62ae <_ZN5spark10JSONWriter14writeSeparatorEv+0x16>
        write(':');
        break;
    default:
        break;
    }
}
   d62a4:	bd08      	pop	{r3, pc}
        write(',');
   d62a6:	212c      	movs	r1, #44	; 0x2c
        write(':');
   d62a8:	f7ff ff24 	bl	d60f4 <_ZN5spark10JSONWriter5writeEc>
}
   d62ac:	e7fa      	b.n	d62a4 <_ZN5spark10JSONWriter14writeSeparatorEv+0xc>
        write(':');
   d62ae:	213a      	movs	r1, #58	; 0x3a
   d62b0:	e7fa      	b.n	d62a8 <_ZN5spark10JSONWriter14writeSeparatorEv+0x10>

000d62b2 <_ZN5spark10JSONWriter11beginObjectEv>:
spark::JSONWriter& spark::JSONWriter::beginObject() {
   d62b2:	b510      	push	{r4, lr}
   d62b4:	4604      	mov	r4, r0
    writeSeparator();
   d62b6:	f7ff ffef 	bl	d6298 <_ZN5spark10JSONWriter14writeSeparatorEv>
    write('{');
   d62ba:	4620      	mov	r0, r4
   d62bc:	217b      	movs	r1, #123	; 0x7b
   d62be:	f7ff ff19 	bl	d60f4 <_ZN5spark10JSONWriter5writeEc>
    state_ = BEGIN;
   d62c2:	2300      	movs	r3, #0
   d62c4:	7123      	strb	r3, [r4, #4]
}
   d62c6:	4620      	mov	r0, r4
   d62c8:	bd10      	pop	{r4, pc}
	...

000d62cc <_ZN5spark10JSONWriter5valueEi>:
spark::JSONWriter& spark::JSONWriter::value(int val) {
   d62cc:	b513      	push	{r0, r1, r4, lr}
   d62ce:	4604      	mov	r4, r0
   d62d0:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d62d2:	f7ff ffe1 	bl	d6298 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%d", val);
   d62d6:	6823      	ldr	r3, [r4, #0]
   d62d8:	9a01      	ldr	r2, [sp, #4]
   d62da:	68db      	ldr	r3, [r3, #12]
   d62dc:	4903      	ldr	r1, [pc, #12]	; (d62ec <_ZN5spark10JSONWriter5valueEi+0x20>)
   d62de:	4620      	mov	r0, r4
   d62e0:	4798      	blx	r3
    state_ = NEXT;
   d62e2:	2301      	movs	r3, #1
}
   d62e4:	4620      	mov	r0, r4
    state_ = NEXT;
   d62e6:	7123      	strb	r3, [r4, #4]
}
   d62e8:	b002      	add	sp, #8
   d62ea:	bd10      	pop	{r4, pc}
   d62ec:	000d8776 	.word	0x000d8776

000d62f0 <_ZN5spark10JSONWriter5valueEj>:
spark::JSONWriter& spark::JSONWriter::value(unsigned val) {
   d62f0:	b513      	push	{r0, r1, r4, lr}
   d62f2:	4604      	mov	r4, r0
   d62f4:	9101      	str	r1, [sp, #4]
    writeSeparator();
   d62f6:	f7ff ffcf 	bl	d6298 <_ZN5spark10JSONWriter14writeSeparatorEv>
    printf("%u", val);
   d62fa:	6823      	ldr	r3, [r4, #0]
   d62fc:	9a01      	ldr	r2, [sp, #4]
   d62fe:	68db      	ldr	r3, [r3, #12]
   d6300:	4903      	ldr	r1, [pc, #12]	; (d6310 <_ZN5spark10JSONWriter5valueEj+0x20>)
   d6302:	4620      	mov	r0, r4
   d6304:	4798      	blx	r3
    state_ = NEXT;
   d6306:	2301      	movs	r3, #1
}
   d6308:	4620      	mov	r0, r4
    state_ = NEXT;
   d630a:	7123      	strb	r3, [r4, #4]
}
   d630c:	b002      	add	sp, #8
   d630e:	bd10      	pop	{r4, pc}
   d6310:	000d88c3 	.word	0x000d88c3

000d6314 <_ZN5spark10JSONWriter12writeEscapedEPKcj>:

void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6318:	460d      	mov	r5, r1
   d631a:	4617      	mov	r7, r2
    write('"');
   d631c:	2122      	movs	r1, #34	; 0x22
            case 0x0d: // Carriage return
                write('r');
                break;
            default:
                // All other control characters are written in hex, e.g. "\u001f"
                printf("u%04x", (unsigned)c);
   d631e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; d63c0 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0xac>
void spark::JSONWriter::writeEscaped(const char *str, size_t size) {
   d6322:	4604      	mov	r4, r0
    const char* const end = str + size;
   d6324:	442f      	add	r7, r5
    write('"');
   d6326:	f7ff fee5 	bl	d60f4 <_ZN5spark10JSONWriter5writeEc>
    const char* const end = str + size;
   d632a:	4629      	mov	r1, r5
    while (s != end) {
   d632c:	42bd      	cmp	r5, r7
   d632e:	462a      	mov	r2, r5
   d6330:	d038      	beq.n	d63a4 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x90>
        const char c = *s;
   d6332:	f815 6b01 	ldrb.w	r6, [r5], #1
        if (c == '"' || c == '\\' || (c >= 0 && c <= 0x1f)) {
   d6336:	2e22      	cmp	r6, #34	; 0x22
   d6338:	d003      	beq.n	d6342 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d633a:	2e5c      	cmp	r6, #92	; 0x5c
   d633c:	d001      	beq.n	d6342 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x2e>
   d633e:	2e1f      	cmp	r6, #31
   d6340:	d8f4      	bhi.n	d632c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
            write(str, s - str); // Write preceeding characters
   d6342:	6823      	ldr	r3, [r4, #0]
   d6344:	1a52      	subs	r2, r2, r1
   d6346:	689b      	ldr	r3, [r3, #8]
   d6348:	4620      	mov	r0, r4
   d634a:	4798      	blx	r3
            write('\\');
   d634c:	215c      	movs	r1, #92	; 0x5c
   d634e:	4620      	mov	r0, r4
   d6350:	f7ff fed0 	bl	d60f4 <_ZN5spark10JSONWriter5writeEc>
            switch (c) {
   d6354:	2e0d      	cmp	r6, #13
   d6356:	d80a      	bhi.n	d636e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x5a>
   d6358:	2e07      	cmp	r6, #7
   d635a:	d91c      	bls.n	d6396 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d635c:	f1a6 0308 	sub.w	r3, r6, #8
   d6360:	2b05      	cmp	r3, #5
   d6362:	d818      	bhi.n	d6396 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
   d6364:	e8df f003 	tbb	[pc, r3]
   d6368:	17110f0d 	.word	0x17110f0d
   d636c:	1513      	.short	0x1513
   d636e:	2e22      	cmp	r6, #34	; 0x22
   d6370:	d001      	beq.n	d6376 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x62>
   d6372:	2e5c      	cmp	r6, #92	; 0x5c
   d6374:	d10f      	bne.n	d6396 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x82>
                write(c);
   d6376:	4631      	mov	r1, r6
                write('b');
   d6378:	4620      	mov	r0, r4
   d637a:	f7ff febb 	bl	d60f4 <_ZN5spark10JSONWriter5writeEc>
                break;
            }
            str = s + 1;
   d637e:	4629      	mov	r1, r5
    while (s != end) {
   d6380:	e7d4      	b.n	d632c <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x18>
                write('b');
   d6382:	2162      	movs	r1, #98	; 0x62
   d6384:	e7f8      	b.n	d6378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('t');
   d6386:	2174      	movs	r1, #116	; 0x74
   d6388:	e7f6      	b.n	d6378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('n');
   d638a:	216e      	movs	r1, #110	; 0x6e
   d638c:	e7f4      	b.n	d6378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('f');
   d638e:	2166      	movs	r1, #102	; 0x66
   d6390:	e7f2      	b.n	d6378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                write('r');
   d6392:	2172      	movs	r1, #114	; 0x72
   d6394:	e7f0      	b.n	d6378 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x64>
                printf("u%04x", (unsigned)c);
   d6396:	6823      	ldr	r3, [r4, #0]
   d6398:	4632      	mov	r2, r6
   d639a:	68db      	ldr	r3, [r3, #12]
   d639c:	4641      	mov	r1, r8
   d639e:	4620      	mov	r0, r4
   d63a0:	4798      	blx	r3
                break;
   d63a2:	e7ec      	b.n	d637e <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x6a>
        }
        ++s;
    }
    if (s != str) {
   d63a4:	428d      	cmp	r5, r1
   d63a6:	d004      	beq.n	d63b2 <_ZN5spark10JSONWriter12writeEscapedEPKcj+0x9e>
        write(str, s - str); // Write remaining characters
   d63a8:	6823      	ldr	r3, [r4, #0]
   d63aa:	1a6a      	subs	r2, r5, r1
   d63ac:	689b      	ldr	r3, [r3, #8]
   d63ae:	4620      	mov	r0, r4
   d63b0:	4798      	blx	r3
    }
    write('"');
   d63b2:	2122      	movs	r1, #34	; 0x22
   d63b4:	4620      	mov	r0, r4
   d63b6:	f7ff fe9d 	bl	d60f4 <_ZN5spark10JSONWriter5writeEc>
}
   d63ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d63be:	bf00      	nop
   d63c0:	000d8998 	.word	0x000d8998

000d63c4 <_ZN5spark10JSONWriter4nameEPKcj>:
spark::JSONWriter& spark::JSONWriter::name(const char *name, size_t size) {
   d63c4:	b513      	push	{r0, r1, r4, lr}
   d63c6:	4604      	mov	r4, r0
   d63c8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d63cc:	f7ff ff64 	bl	d6298 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(name, size);
   d63d0:	4620      	mov	r0, r4
   d63d2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d63d6:	f7ff ff9d 	bl	d6314 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = VALUE;
   d63da:	2302      	movs	r3, #2
}
   d63dc:	4620      	mov	r0, r4
    state_ = VALUE;
   d63de:	7123      	strb	r3, [r4, #4]
}
   d63e0:	b002      	add	sp, #8
   d63e2:	bd10      	pop	{r4, pc}

000d63e4 <_ZN5spark10JSONWriter5valueEPKcj>:
spark::JSONWriter& spark::JSONWriter::value(const char *val, size_t size) {
   d63e4:	b513      	push	{r0, r1, r4, lr}
   d63e6:	4604      	mov	r4, r0
   d63e8:	e9cd 2100 	strd	r2, r1, [sp]
    writeSeparator();
   d63ec:	f7ff ff54 	bl	d6298 <_ZN5spark10JSONWriter14writeSeparatorEv>
    writeEscaped(val, size);
   d63f0:	4620      	mov	r0, r4
   d63f2:	e9dd 2100 	ldrd	r2, r1, [sp]
   d63f6:	f7ff ff8d 	bl	d6314 <_ZN5spark10JSONWriter12writeEscapedEPKcj>
    state_ = NEXT;
   d63fa:	2301      	movs	r3, #1
}
   d63fc:	4620      	mov	r0, r4
    state_ = NEXT;
   d63fe:	7123      	strb	r3, [r4, #4]
}
   d6400:	b002      	add	sp, #8
   d6402:	bd10      	pop	{r4, pc}

000d6404 <_ZN5spark16JSONStreamWriter5writeEPKcj>:
inline Print* spark::JSONStreamWriter::stream() const {
    return &strm_;
}

inline void spark::JSONStreamWriter::write(const char *data, size_t size) {
    strm_.write((const uint8_t*)data, size);
   d6404:	6880      	ldr	r0, [r0, #8]
   d6406:	6803      	ldr	r3, [r0, #0]
   d6408:	68db      	ldr	r3, [r3, #12]
   d640a:	4718      	bx	r3

000d640c <_ZN5spark20JSONStreamLogHandler5writeEPKcj>:
}

// spark::JSONStreamLogHandler
inline void spark::JSONStreamLogHandler::write(const char *data, size_t size) {
    // This handler doesn't support direct logging
}
   d640c:	4770      	bx	lr

000d640e <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE>:

#if Wiring_LogConfig

// spark::LogHandlerFactory
inline void spark::LogHandlerFactory::destroyHandler(LogHandler *handler) {
    delete handler;
   d640e:	4608      	mov	r0, r1
   d6410:	b111      	cbz	r1, d6418 <_ZN5spark17LogHandlerFactory14destroyHandlerEPNS_10LogHandlerE+0xa>
   d6412:	680b      	ldr	r3, [r1, #0]
   d6414:	685b      	ldr	r3, [r3, #4]
   d6416:	4718      	bx	r3
}
   d6418:	4770      	bx	lr

000d641a <__tcf_0>:
    }
    return nullptr; // Unknown handler type
}

spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
    static DefaultLogHandlerFactory factory;
   d641a:	4770      	bx	lr

000d641c <_ZN5spark26DefaultOutputStreamFactoryD1Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d641c:	4770      	bx	lr

000d641e <_ZN5spark24DefaultLogHandlerFactoryD1Ev>:
class DefaultLogHandlerFactory: public LogHandlerFactory {
   d641e:	4770      	bx	lr

000d6420 <_ZN5spark16JSONStreamWriterD1Ev>:
class JSONStreamWriter: public JSONWriter {
   d6420:	4770      	bx	lr

000d6422 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>:
const char* nextSubcategoryName(const char* &category, size_t &size) {
   d6422:	b538      	push	{r3, r4, r5, lr}
   d6424:	4604      	mov	r4, r0
   d6426:	460d      	mov	r5, r1
    const char *s = strchrnul(category, '.');
   d6428:	6800      	ldr	r0, [r0, #0]
   d642a:	212e      	movs	r1, #46	; 0x2e
   d642c:	f001 fded 	bl	d800a <strchrnul>
    size = s - category;
   d6430:	6823      	ldr	r3, [r4, #0]
   d6432:	1ac3      	subs	r3, r0, r3
   d6434:	602b      	str	r3, [r5, #0]
    if (size) {
   d6436:	b123      	cbz	r3, d6442 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x20>
        if (*s) {
   d6438:	7803      	ldrb	r3, [r0, #0]
   d643a:	b103      	cbz	r3, d643e <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj+0x1c>
            ++s;
   d643c:	3001      	adds	r0, #1
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d643e:	6823      	ldr	r3, [r4, #0]
      __b = _GLIBCXX_MOVE(__tmp);
   d6440:	6020      	str	r0, [r4, #0]
}
   d6442:	4618      	mov	r0, r3
   d6444:	bd38      	pop	{r3, r4, r5, pc}

000d6446 <_ZN5spark16JSONStreamWriterD0Ev>:
   d6446:	b510      	push	{r4, lr}
   d6448:	210c      	movs	r1, #12
   d644a:	4604      	mov	r4, r0
   d644c:	f001 fd4a 	bl	d7ee4 <_ZdlPvj>
   d6450:	4620      	mov	r0, r4
   d6452:	bd10      	pop	{r4, pc}

000d6454 <_ZN5spark24DefaultLogHandlerFactoryD0Ev>:
   d6454:	b510      	push	{r4, lr}
   d6456:	2104      	movs	r1, #4
   d6458:	4604      	mov	r4, r0
   d645a:	f001 fd43 	bl	d7ee4 <_ZdlPvj>
   d645e:	4620      	mov	r0, r4
   d6460:	bd10      	pop	{r4, pc}

000d6462 <_ZN5spark26DefaultOutputStreamFactoryD0Ev>:
class DefaultOutputStreamFactory: public OutputStreamFactory {
   d6462:	b510      	push	{r4, lr}
   d6464:	2104      	movs	r1, #4
   d6466:	4604      	mov	r4, r0
   d6468:	f001 fd3c 	bl	d7ee4 <_ZdlPvj>
   d646c:	4620      	mov	r0, r4
   d646e:	bd10      	pop	{r4, pc}

000d6470 <_ZNK5spark10JSONStringeqEPKc.isra.0>:
inline bool spark::JSONString::operator==(const char *str) const {
   d6470:	b508      	push	{r3, lr}
    return strcmp(s_, str) == 0;
   d6472:	f001 fdd4 	bl	d801e <strcmp>
}
   d6476:	fab0 f080 	clz	r0, r0
   d647a:	0940      	lsrs	r0, r0, #5
   d647c:	bd08      	pop	{r3, pc}

000d647e <__tcf_1>:
   d647e:	4770      	bx	lr

000d6480 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print>:
    }
#endif // PLATFORM_ID != 3
    return nullptr;
}

void spark::DefaultOutputStreamFactory::destroyStream(Print *stream) {
   d6480:	b510      	push	{r4, lr}
   d6482:	460c      	mov	r4, r1
#if PLATFORM_ID != 3
    if (stream == &Serial) {
   d6484:	f001 fbb4 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d6488:	4284      	cmp	r4, r0
   d648a:	d010      	beq.n	d64ae <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
    if (stream == &USBSerial1) {
        USBSerial1.end();
        return;
    }
#endif
    if (stream == &Serial1) {
   d648c:	f001 fb28 	bl	d7ae0 <_Z22__fetch_global_Serial1v>
   d6490:	4284      	cmp	r4, r0
   d6492:	d105      	bne.n	d64a0 <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x20>
        Serial1.end();
   d6494:	f001 fb24 	bl	d7ae0 <_Z22__fetch_global_Serial1v>
        return;
    }
#endif // PLATFORM_ID != 3
    OutputStreamFactory::destroyStream(stream);
}
   d6498:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Serial1.end();
   d649c:	f001 bb1d 	b.w	d7ada <_ZN11USARTSerial3endEv>

// spark::OutputStreamFactory
inline void spark::OutputStreamFactory::destroyStream(Print *stream) {
    delete stream;
   d64a0:	b12c      	cbz	r4, d64ae <_ZN5spark26DefaultOutputStreamFactory13destroyStreamEP5Print+0x2e>
   d64a2:	6823      	ldr	r3, [r4, #0]
   d64a4:	4620      	mov	r0, r4
   d64a6:	685b      	ldr	r3, [r3, #4]
}
   d64a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d64ac:	4718      	bx	r3
   d64ae:	bd10      	pop	{r4, pc}

000d64b0 <_ZN5spark10JSONWriter5valueEPKc>:
inline spark::JSONWriter& spark::JSONWriter::value(const char *val) {
   d64b0:	b513      	push	{r0, r1, r4, lr}
   d64b2:	4604      	mov	r4, r0
    return value(val, strlen(val));
   d64b4:	4608      	mov	r0, r1
   d64b6:	9101      	str	r1, [sp, #4]
   d64b8:	f001 fdc3 	bl	d8042 <strlen>
   d64bc:	9901      	ldr	r1, [sp, #4]
   d64be:	4602      	mov	r2, r0
   d64c0:	4620      	mov	r0, r4
}
   d64c2:	b002      	add	sp, #8
   d64c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return value(val, strlen(val));
   d64c8:	f7ff bf8c 	b.w	d63e4 <_ZN5spark10JSONWriter5valueEPKcj>

000d64cc <_ZN5spark16StreamLogHandler5writeEPKc>:
inline void spark::StreamLogHandler::write(const char *str) {
   d64cc:	b513      	push	{r0, r1, r4, lr}
   d64ce:	4604      	mov	r4, r0
    write(str, strlen(str));
   d64d0:	4608      	mov	r0, r1
   d64d2:	9101      	str	r1, [sp, #4]
   d64d4:	f001 fdb5 	bl	d8042 <strlen>
   d64d8:	6823      	ldr	r3, [r4, #0]
   d64da:	9901      	ldr	r1, [sp, #4]
   d64dc:	68db      	ldr	r3, [r3, #12]
   d64de:	4602      	mov	r2, r0
   d64e0:	4620      	mov	r0, r4
}
   d64e2:	b002      	add	sp, #8
   d64e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    write(str, strlen(str));
   d64e8:	4718      	bx	r3

000d64ea <_ZN5spark16StreamLogHandler5writeEc>:
inline void spark::StreamLogHandler::write(char c) {
   d64ea:	b507      	push	{r0, r1, r2, lr}
    write(&c, 1);
   d64ec:	6803      	ldr	r3, [r0, #0]
inline void spark::StreamLogHandler::write(char c) {
   d64ee:	f88d 1007 	strb.w	r1, [sp, #7]
    write(&c, 1);
   d64f2:	68db      	ldr	r3, [r3, #12]
   d64f4:	2201      	movs	r2, #1
   d64f6:	f10d 0107 	add.w	r1, sp, #7
   d64fa:	4798      	blx	r3
}
   d64fc:	b003      	add	sp, #12
   d64fe:	f85d fb04 	ldr.w	pc, [sp], #4

000d6502 <_ZN5spark16StreamLogHandler6printfEPKcz>:
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d6502:	b40e      	push	{r1, r2, r3}
   d6504:	b503      	push	{r0, r1, lr}
   d6506:	ab03      	add	r3, sp, #12
    stream_->vprintf(false, fmt, args);
   d6508:	2100      	movs	r1, #0
inline void spark::StreamLogHandler::printf(const char *fmt, ...) {
   d650a:	f853 2b04 	ldr.w	r2, [r3], #4
    stream_->vprintf(false, fmt, args);
   d650e:	6a00      	ldr	r0, [r0, #32]
    va_start(args, fmt);
   d6510:	9301      	str	r3, [sp, #4]
    stream_->vprintf(false, fmt, args);
   d6512:	f001 f83c 	bl	d758e <_ZN5Print7vprintfEbPKcSt9__va_list>
}
   d6516:	b002      	add	sp, #8
   d6518:	f85d eb04 	ldr.w	lr, [sp], #4
   d651c:	b003      	add	sp, #12
   d651e:	4770      	bx	lr

000d6520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>:
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d6520:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return data_ + size_;
}

template<typename T, typename AllocatorT>
const T* spark::Vector<T, AllocatorT>::end() const {
    return data_ + size_;
   d6524:	e9d0 9500 	ldrd	r9, r5, [r0]
   d6528:	f04f 0814 	mov.w	r8, #20
   d652c:	fb08 f505 	mul.w	r5, r8, r5
   d6530:	9300      	str	r3, [sp, #0]
               random_access_iterator_tag)
    {
      // concept requirements
      __glibcxx_function_requires(_RandomAccessIteratorConcept<
				  _RandomAccessIterator>)
      return __last - __first;
   d6532:	10ab      	asrs	r3, r5, #2
   d6534:	4d18      	ldr	r5, [pc, #96]	; (d6598 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d6536:	4617      	mov	r7, r2
   d6538:	435d      	muls	r5, r3
   d653a:	464c      	mov	r4, r9
      typedef typename iterator_traits<_ForwardIterator>::difference_type
	_DistanceType;

      _DistanceType __len = std::distance(__first, __last);

      while (__len > 0)
   d653c:	2d00      	cmp	r5, #0
   d653e:	dd23      	ble.n	d6588 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x68>
	{
	  _DistanceType __half = __len >> 1;
   d6540:	106e      	asrs	r6, r5, #1
      if (__builtin_constant_p(__n) && __n == 1)
	++__i;
      else if (__builtin_constant_p(__n) && __n == -1)
	--__i;
      else
	__i += __n;
   d6542:	fb08 f006 	mul.w	r0, r8, r6
   d6546:	eb04 0a00 	add.w	sl, r4, r0
                const int cmp = strncmp(node.name, value.first, std::min<size_t>(node.size, value.second));
   d654a:	463a      	mov	r2, r7
   d654c:	f8ba b004 	ldrh.w	fp, [sl, #4]
   d6550:	5820      	ldr	r0, [r4, r0]
   d6552:	9101      	str	r1, [sp, #4]
   d6554:	455f      	cmp	r7, fp
   d6556:	bf28      	it	cs
   d6558:	465a      	movcs	r2, fp
   d655a:	f001 fd8d 	bl	d8078 <strncmp>
                if (cmp == 0) {
   d655e:	9901      	ldr	r1, [sp, #4]
   d6560:	2301      	movs	r3, #1
   d6562:	b978      	cbnz	r0, d6584 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x64>
                    if (node.size == value.second) { // Lengths are equal
   d6564:	455f      	cmp	r7, fp
   d6566:	d103      	bne.n	d6570 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x50>
                        found = true; // Allows caller code to avoid extra call to strncmp()
   d6568:	9a00      	ldr	r2, [sp, #0]
   d656a:	7013      	strb	r3, [r2, #0]
int spark::detail::LogFilter::nodeIndex(const Vector<Node> &nodes, const char *name, size_t size, bool &found) {
   d656c:	4635      	mov	r5, r6
   d656e:	e7e5      	b.n	d653c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x1c>
                    return node.size < value.second;
   d6570:	bf8c      	ite	hi
   d6572:	2001      	movhi	r0, #1
   d6574:	2000      	movls	r0, #0
	  _ForwardIterator __middle = __first;
	  std::advance(__middle, __half);
	  if (__comp(__middle, __val))
   d6576:	2800      	cmp	r0, #0
   d6578:	d0f8      	beq.n	d656c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
	    {
	      __first = __middle;
	      ++__first;
	      __len = __len - __half - 1;
   d657a:	1bae      	subs	r6, r5, r6
	      ++__first;
   d657c:	f10a 0414 	add.w	r4, sl, #20
	      __len = __len - __half - 1;
   d6580:	3e01      	subs	r6, #1
   d6582:	e7f3      	b.n	d656c <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x4c>
                return cmp < 0;
   d6584:	0fc0      	lsrs	r0, r0, #31
   d6586:	e7f6      	b.n	d6576 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x56>
      return __last - __first;
   d6588:	eba4 0409 	sub.w	r4, r4, r9
}
   d658c:	4802      	ldr	r0, [pc, #8]	; (d6598 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb+0x78>)
   d658e:	10a4      	asrs	r4, r4, #2
   d6590:	4360      	muls	r0, r4
   d6592:	b003      	add	sp, #12
   d6594:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6598:	cccccccd 	.word	0xcccccccd

000d659c <_ZNK5spark6detail9LogFilter5levelEPKc>:
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d659c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (!nodes_.isEmpty() && category) {
   d659e:	6903      	ldr	r3, [r0, #16]
    LogLevel level = level_; // Default level
   d65a0:	7e06      	ldrb	r6, [r0, #24]
LogLevel spark::detail::LogFilter::level(const char *category) const {
   d65a2:	9101      	str	r1, [sp, #4]
    if (!nodes_.isEmpty() && category) {
   d65a4:	b30b      	cbz	r3, d65ea <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
   d65a6:	b301      	cbz	r1, d65ea <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
        size_t size = 0; // Name length
   d65a8:	2500      	movs	r5, #0
        const Vector<Node> *pNodes = &nodes_; // Root nodes
   d65aa:	f100 040c 	add.w	r4, r0, #12
        size_t size = 0; // Name length
   d65ae:	9503      	str	r5, [sp, #12]
        while ((name = nextSubcategoryName(category, size))) {
   d65b0:	a903      	add	r1, sp, #12
   d65b2:	a801      	add	r0, sp, #4
   d65b4:	f7ff ff35 	bl	d6422 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d65b8:	4601      	mov	r1, r0
   d65ba:	b1b0      	cbz	r0, d65ea <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
            const int index = nodeIndex(*pNodes, name, size, found);
   d65bc:	f10d 030b 	add.w	r3, sp, #11
   d65c0:	9a03      	ldr	r2, [sp, #12]
            bool found = false;
   d65c2:	f88d 500b 	strb.w	r5, [sp, #11]
            const int index = nodeIndex(*pNodes, name, size, found);
   d65c6:	4620      	mov	r0, r4
   d65c8:	f7ff ffaa 	bl	d6520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found) {
   d65cc:	f89d 300b 	ldrb.w	r3, [sp, #11]
   d65d0:	b15b      	cbz	r3, d65ea <_ZNK5spark6detail9LogFilter5levelEPKc+0x4e>
    return data_[i];
   d65d2:	6824      	ldr	r4, [r4, #0]
   d65d4:	2314      	movs	r3, #20
   d65d6:	fb03 4000 	mla	r0, r3, r0, r4
            pNodes = &node.nodes;
   d65da:	f100 0408 	add.w	r4, r0, #8
            if (node.level >= 0) {
   d65de:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
   d65e2:	2b00      	cmp	r3, #0
                level = (LogLevel)node.level;
   d65e4:	bfa8      	it	ge
   d65e6:	b2de      	uxtbge	r6, r3
        while ((name = nextSubcategoryName(category, size))) {
   d65e8:	e7e2      	b.n	d65b0 <_ZNK5spark6detail9LogFilter5levelEPKc+0x14>
}
   d65ea:	4630      	mov	r0, r6
   d65ec:	b004      	add	sp, #16
   d65ee:	bd70      	pop	{r4, r5, r6, pc}

000d65f0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>:
spark::DefaultLogHandlerFactory* spark::DefaultLogHandlerFactory::instance() {
   d65f0:	b510      	push	{r4, lr}
    static DefaultLogHandlerFactory factory;
   d65f2:	4c09      	ldr	r4, [pc, #36]	; (d6618 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x28>)
   d65f4:	7823      	ldrb	r3, [r4, #0]
   d65f6:	f3bf 8f5b 	dmb	ish
   d65fa:	07db      	lsls	r3, r3, #31
   d65fc:	d409      	bmi.n	d6612 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d65fe:	4620      	mov	r0, r4
   d6600:	f7fd fd58 	bl	d40b4 <__cxa_guard_acquire>
   d6604:	b128      	cbz	r0, d6612 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x22>
   d6606:	4620      	mov	r0, r4
   d6608:	f7fd fd59 	bl	d40be <__cxa_guard_release>
   d660c:	4803      	ldr	r0, [pc, #12]	; (d661c <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x2c>)
   d660e:	f001 fc95 	bl	d7f3c <atexit>
}
   d6612:	4803      	ldr	r0, [pc, #12]	; (d6620 <_ZN5spark24DefaultLogHandlerFactory8instanceEv+0x30>)
   d6614:	bd10      	pop	{r4, pc}
   d6616:	bf00      	nop
   d6618:	2003e57c 	.word	0x2003e57c
   d661c:	000d641b 	.word	0x000d641b
   d6620:	2003e428 	.word	0x2003e428

000d6624 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>:

spark::DefaultOutputStreamFactory* spark::DefaultOutputStreamFactory::instance() {
   d6624:	b510      	push	{r4, lr}
    static DefaultOutputStreamFactory factory;
   d6626:	4c09      	ldr	r4, [pc, #36]	; (d664c <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x28>)
   d6628:	7823      	ldrb	r3, [r4, #0]
   d662a:	f3bf 8f5b 	dmb	ish
   d662e:	07db      	lsls	r3, r3, #31
   d6630:	d409      	bmi.n	d6646 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d6632:	4620      	mov	r0, r4
   d6634:	f7fd fd3e 	bl	d40b4 <__cxa_guard_acquire>
   d6638:	b128      	cbz	r0, d6646 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x22>
   d663a:	4620      	mov	r0, r4
   d663c:	f7fd fd3f 	bl	d40be <__cxa_guard_release>
   d6640:	4803      	ldr	r0, [pc, #12]	; (d6650 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x2c>)
   d6642:	f001 fc7b 	bl	d7f3c <atexit>
    return &factory;
}
   d6646:	4803      	ldr	r0, [pc, #12]	; (d6654 <_ZN5spark26DefaultOutputStreamFactory8instanceEv+0x30>)
   d6648:	bd10      	pop	{r4, pc}
   d664a:	bf00      	nop
   d664c:	2003e580 	.word	0x2003e580
   d6650:	000d647f 	.word	0x000d647f
   d6654:	2003e42c 	.word	0x2003e42c

000d6658 <_ZN5spark10LogManagerC1Ev>:
    Print *stream;
};

#endif // Wiring_LogConfig

spark::LogManager::LogManager() {
   d6658:	b538      	push	{r3, r4, r5, lr}
        capacity_(0) {
   d665a:	2500      	movs	r5, #0
   d665c:	4604      	mov	r4, r0
   d665e:	e9c0 5500 	strd	r5, r5, [r0]
   d6662:	e9c0 5504 	strd	r5, r5, [r0, #16]
   d6666:	6085      	str	r5, [r0, #8]
   d6668:	6185      	str	r5, [r0, #24]
    RecursiveMutex() : handle_(nullptr)
   d666a:	f840 5f24 	str.w	r5, [r0, #36]!
        os_mutex_recursive_create(&handle_);
   d666e:	f7ff f85d 	bl	d572c <os_mutex_recursive_create>
#if Wiring_LogConfig
    handlerFactory_ = DefaultLogHandlerFactory::instance();
   d6672:	f7ff ffbd 	bl	d65f0 <_ZN5spark24DefaultLogHandlerFactory8instanceEv>
   d6676:	61e0      	str	r0, [r4, #28]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d6678:	f7ff ffd4 	bl	d6624 <_ZN5spark26DefaultOutputStreamFactory8instanceEv>
#endif
    outputActive_ = false;
   d667c:	7325      	strb	r5, [r4, #12]
    streamFactory_ = DefaultOutputStreamFactory::instance();
   d667e:	6220      	str	r0, [r4, #32]
}
   d6680:	4620      	mov	r0, r4
   d6682:	bd38      	pop	{r3, r4, r5, pc}

000d6684 <_ZN5spark10LogManager8instanceEv>:
            resetSystemCallbacks();
        }
    }
}

spark::LogManager* spark::LogManager::instance() {
   d6684:	b510      	push	{r4, lr}
    static LogManager mgr;
   d6686:	4c0a      	ldr	r4, [pc, #40]	; (d66b0 <_ZN5spark10LogManager8instanceEv+0x2c>)
   d6688:	7823      	ldrb	r3, [r4, #0]
   d668a:	f3bf 8f5b 	dmb	ish
   d668e:	07db      	lsls	r3, r3, #31
   d6690:	d40c      	bmi.n	d66ac <_ZN5spark10LogManager8instanceEv+0x28>
   d6692:	4620      	mov	r0, r4
   d6694:	f7fd fd0e 	bl	d40b4 <__cxa_guard_acquire>
   d6698:	b140      	cbz	r0, d66ac <_ZN5spark10LogManager8instanceEv+0x28>
   d669a:	4806      	ldr	r0, [pc, #24]	; (d66b4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d669c:	f7ff ffdc 	bl	d6658 <_ZN5spark10LogManagerC1Ev>
   d66a0:	4620      	mov	r0, r4
   d66a2:	f7fd fd0c 	bl	d40be <__cxa_guard_release>
   d66a6:	4804      	ldr	r0, [pc, #16]	; (d66b8 <_ZN5spark10LogManager8instanceEv+0x34>)
   d66a8:	f001 fc48 	bl	d7f3c <atexit>
    return &mgr;
}
   d66ac:	4801      	ldr	r0, [pc, #4]	; (d66b4 <_ZN5spark10LogManager8instanceEv+0x30>)
   d66ae:	bd10      	pop	{r4, pc}
   d66b0:	2003e578 	.word	0x2003e578
   d66b4:	2003e588 	.word	0x2003e588
   d66b8:	000d6b65 	.word	0x000d6b65

000d66bc <_ZN5spark10LogManager18setSystemCallbacksEv>:
}

#endif // Wiring_LogConfig

void spark::LogManager::setSystemCallbacks() {
    log_set_callbacks(logMessage, logWrite, logEnabled, nullptr);
   d66bc:	4a02      	ldr	r2, [pc, #8]	; (d66c8 <_ZN5spark10LogManager18setSystemCallbacksEv+0xc>)
   d66be:	4903      	ldr	r1, [pc, #12]	; (d66cc <_ZN5spark10LogManager18setSystemCallbacksEv+0x10>)
   d66c0:	4803      	ldr	r0, [pc, #12]	; (d66d0 <_ZN5spark10LogManager18setSystemCallbacksEv+0x14>)
   d66c2:	2300      	movs	r3, #0
   d66c4:	f7ff b9da 	b.w	d5a7c <log_set_callbacks>
   d66c8:	000d69ed 	.word	0x000d69ed
   d66cc:	000d6979 	.word	0x000d6979
   d66d0:	000d68f9 	.word	0x000d68f9

000d66d4 <_ZN5spark10LogManager20resetSystemCallbacksEv>:
}

void spark::LogManager::resetSystemCallbacks() {
    log_set_callbacks(nullptr, nullptr, nullptr, nullptr);
   d66d4:	2300      	movs	r3, #0
   d66d6:	461a      	mov	r2, r3
   d66d8:	4619      	mov	r1, r3
   d66da:	4618      	mov	r0, r3
   d66dc:	f7ff b9ce 	b.w	d5a7c <log_set_callbacks>

000d66e0 <_ZNK5spark18JSONObjectIterator5valueEv>:
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d66e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONValue(v_, d_);
   d66e2:	690d      	ldr	r5, [r1, #16]
	__shared_ptr(const __shared_ptr<_Yp, _Lp>& __r,
		     element_type* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d66e4:	f851 3b04 	ldr.w	r3, [r1], #4
   d66e8:	9300      	str	r3, [sp, #0]
inline spark::JSONValue spark::JSONObjectIterator::value() const {
   d66ea:	4604      	mov	r4, r0
   d66ec:	a801      	add	r0, sp, #4
   d66ee:	f7ff fafc 	bl	d5cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONValue(v_, d_);
   d66f2:	466a      	mov	r2, sp
   d66f4:	4629      	mov	r1, r5
   d66f6:	4620      	mov	r0, r4
   d66f8:	f7ff fd1f 	bl	d613a <_ZN5spark9JSONValueC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d66fc:	a801      	add	r0, sp, #4
   d66fe:	f7ff fafb 	bl	d5cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6702:	4620      	mov	r0, r4
   d6704:	b003      	add	sp, #12
   d6706:	bd30      	pop	{r4, r5, pc}

000d6708 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>:
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6708:	b537      	push	{r0, r1, r2, r4, r5, lr}
        JSONObjectIterator(value.t_, value.d_) {
   d670a:	688d      	ldr	r5, [r1, #8]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d670c:	f851 3b04 	ldr.w	r3, [r1], #4
   d6710:	9300      	str	r3, [sp, #0]
inline spark::JSONObjectIterator::JSONObjectIterator(const JSONValue &value) :
   d6712:	4604      	mov	r4, r0
   d6714:	a801      	add	r0, sp, #4
   d6716:	f7ff fae8 	bl	d5cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        JSONObjectIterator(value.t_, value.d_) {
   d671a:	466a      	mov	r2, sp
   d671c:	4629      	mov	r1, r5
   d671e:	4620      	mov	r0, r4
   d6720:	f7ff fd86 	bl	d6230 <_ZN5spark18JSONObjectIteratorC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d6724:	a801      	add	r0, sp, #4
   d6726:	f7ff fae7 	bl	d5cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d672a:	4620      	mov	r0, r4
   d672c:	b003      	add	sp, #12
   d672e:	bd30      	pop	{r4, r5, pc}

000d6730 <_ZNK5spark18JSONObjectIterator4nameEv>:
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d6730:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return JSONString(k_, d_);
   d6732:	68cd      	ldr	r5, [r1, #12]
      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6734:	f851 3b04 	ldr.w	r3, [r1], #4
   d6738:	9300      	str	r3, [sp, #0]
inline spark::JSONString spark::JSONObjectIterator::name() const {
   d673a:	4604      	mov	r4, r0
   d673c:	a801      	add	r0, sp, #4
   d673e:	f7ff fad4 	bl	d5cea <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    return JSONString(k_, d_);
   d6742:	466a      	mov	r2, sp
   d6744:	4629      	mov	r1, r5
   d6746:	4620      	mov	r0, r4
   d6748:	f7ff fd4e 	bl	d61e8 <_ZN5spark10JSONStringC1EPK9jsmntok_tSt10shared_ptrINS_6detail8JSONDataEE>
      ~__shared_ptr() = default;
   d674c:	a801      	add	r0, sp, #4
   d674e:	f7ff fad3 	bl	d5cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d6752:	4620      	mov	r0, r4
   d6754:	b003      	add	sp, #12
   d6756:	bd30      	pop	{r4, r5, pc}

000d6758 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>:
void spark::DefaultOutputStreamFactory::getParams(const JSONValue &params, int *baudRate) {
   d6758:	b570      	push	{r4, r5, r6, lr}
   d675a:	b08a      	sub	sp, #40	; 0x28
   d675c:	460d      	mov	r5, r1
    JSONObjectIterator it(params);
   d675e:	4601      	mov	r1, r0
   d6760:	a804      	add	r0, sp, #16
   d6762:	f7ff ffd1 	bl	d6708 <_ZN5spark18JSONObjectIteratorC1ERKNS_9JSONValueE>
        if (it.name() == "baud" && baudRate) {
   d6766:	4e14      	ldr	r6, [pc, #80]	; (d67b8 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x60>)
    while (it.next()) {
   d6768:	a804      	add	r0, sp, #16
   d676a:	f7ff fd79 	bl	d6260 <_ZN5spark18JSONObjectIterator4nextEv>
   d676e:	b1e8      	cbz	r0, d67ac <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x54>
        if (it.name() == "baud" && baudRate) {
   d6770:	a904      	add	r1, sp, #16
   d6772:	4668      	mov	r0, sp
   d6774:	f7ff ffdc 	bl	d6730 <_ZNK5spark18JSONObjectIterator4nameEv>
   d6778:	9802      	ldr	r0, [sp, #8]
   d677a:	4631      	mov	r1, r6
   d677c:	f7ff fe78 	bl	d6470 <_ZNK5spark10JSONStringeqEPKc.isra.0>
   d6780:	4604      	mov	r4, r0
   d6782:	b110      	cbz	r0, d678a <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x32>
   d6784:	1e2c      	subs	r4, r5, #0
   d6786:	bf18      	it	ne
   d6788:	2401      	movne	r4, #1
   d678a:	a801      	add	r0, sp, #4
   d678c:	f7ff fab4 	bl	d5cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6790:	2c00      	cmp	r4, #0
   d6792:	d0e9      	beq.n	d6768 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
            *baudRate = it.value().toInt();
   d6794:	a904      	add	r1, sp, #16
   d6796:	4668      	mov	r0, sp
   d6798:	f7ff ffa2 	bl	d66e0 <_ZNK5spark18JSONObjectIterator5valueEv>
   d679c:	4668      	mov	r0, sp
   d679e:	f7ff fd02 	bl	d61a6 <_ZNK5spark9JSONValue5toIntEv>
   d67a2:	6028      	str	r0, [r5, #0]
   d67a4:	a801      	add	r0, sp, #4
   d67a6:	f7ff faa7 	bl	d5cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67aa:	e7dd      	b.n	d6768 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi+0x10>
   d67ac:	a805      	add	r0, sp, #20
   d67ae:	f7ff faa3 	bl	d5cf8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
}
   d67b2:	b00a      	add	sp, #40	; 0x28
   d67b4:	bd70      	pop	{r4, r5, r6, pc}
   d67b6:	bf00      	nop
   d67b8:	000d899e 	.word	0x000d899e

000d67bc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE>:
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d67bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d67be:	460c      	mov	r4, r1
    if (strcmp(type, "Serial") == 0) {
   d67c0:	4620      	mov	r0, r4
   d67c2:	4912      	ldr	r1, [pc, #72]	; (d680c <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x50>)
Print* spark::DefaultOutputStreamFactory::createStream(const char *type, const JSONValue &params) {
   d67c4:	4615      	mov	r5, r2
    if (strcmp(type, "Serial") == 0) {
   d67c6:	f001 fc2a 	bl	d801e <strcmp>
   d67ca:	b948      	cbnz	r0, d67e0 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x24>
        Serial.begin();
   d67cc:	f001 fa10 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d67d0:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d67d4:	f001 f9fc 	bl	d7bd0 <_ZN9USBSerial5beginEl>
        return &Serial;
   d67d8:	f001 fa0a 	bl	d7bf0 <_Z16_fetch_usbserialv>
}
   d67dc:	b003      	add	sp, #12
   d67de:	bd30      	pop	{r4, r5, pc}
    if (strcmp(type, "Serial1") == 0) {
   d67e0:	490b      	ldr	r1, [pc, #44]	; (d6810 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x54>)
   d67e2:	4620      	mov	r0, r4
   d67e4:	f001 fc1b 	bl	d801e <strcmp>
   d67e8:	b970      	cbnz	r0, d6808 <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x4c>
        int baud = 9600;
   d67ea:	f44f 5316 	mov.w	r3, #9600	; 0x2580
        getParams(params, &baud);
   d67ee:	a901      	add	r1, sp, #4
   d67f0:	4628      	mov	r0, r5
        int baud = 9600;
   d67f2:	9301      	str	r3, [sp, #4]
        getParams(params, &baud);
   d67f4:	f7ff ffb0 	bl	d6758 <_ZN5spark26DefaultOutputStreamFactory9getParamsERKNS_9JSONValueEPi>
        Serial1.begin(baud);
   d67f8:	f001 f972 	bl	d7ae0 <_Z22__fetch_global_Serial1v>
   d67fc:	9901      	ldr	r1, [sp, #4]
   d67fe:	f001 f969 	bl	d7ad4 <_ZN11USARTSerial5beginEm>
        return &Serial1;
   d6802:	f001 f96d 	bl	d7ae0 <_Z22__fetch_global_Serial1v>
   d6806:	e7e9      	b.n	d67dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
    return nullptr;
   d6808:	2000      	movs	r0, #0
   d680a:	e7e7      	b.n	d67dc <_ZN5spark26DefaultOutputStreamFactory12createStreamEPKcRKNS_9JSONValueE+0x20>
   d680c:	000d89a3 	.word	0x000d89a3
   d6810:	000d89aa 	.word	0x000d89aa

000d6814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6814:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d6816:	e9d0 5300 	ldrd	r5, r3, [r0]
   d681a:	2614      	movs	r6, #20
inline spark::Vector<T, AllocatorT>::~Vector() {
   d681c:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d681e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d6822:	42ae      	cmp	r6, r5
   d6824:	d005      	beq.n	d6832 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0x1e>
struct spark::detail::LogFilter::Node {
   d6826:	f105 0008 	add.w	r0, r5, #8
   d682a:	f7ff fff3 	bl	d6814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d682e:	3514      	adds	r5, #20
   d6830:	e7f7      	b.n	d6822 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev+0xe>
    ::free(ptr);
   d6832:	6820      	ldr	r0, [r4, #0]
   d6834:	f7ff f9fe 	bl	d5c34 <free>
}
   d6838:	4620      	mov	r0, r4
   d683a:	bd70      	pop	{r4, r5, r6, pc}

000d683c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>:
inline spark::Vector<T, AllocatorT>::~Vector() {
   d683c:	b570      	push	{r4, r5, r6, lr}
    destruct(data_, data_ + size_);
   d683e:	e9d0 5300 	ldrd	r5, r3, [r0]
inline spark::Vector<T, AllocatorT>::~Vector() {
   d6842:	4604      	mov	r4, r0
    destruct(data_, data_ + size_);
   d6844:	eb05 1603 	add.w	r6, r5, r3, lsl #4
        for (; p != end; ++p) {
   d6848:	42ae      	cmp	r6, r5
   d684a:	d004      	beq.n	d6856 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0x1a>
            p->~T();
   d684c:	4628      	mov	r0, r5
   d684e:	f000 fedf 	bl	d7610 <_ZN6StringD1Ev>
        for (; p != end; ++p) {
   d6852:	3510      	adds	r5, #16
   d6854:	e7f8      	b.n	d6848 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev+0xc>
    ::free(ptr);
   d6856:	6820      	ldr	r0, [r4, #0]
   d6858:	f7ff f9ec 	bl	d5c34 <free>
}
   d685c:	4620      	mov	r0, r4
   d685e:	bd70      	pop	{r4, r5, r6, pc}

000d6860 <_ZN5spark6detail9LogFilterD1Ev>:
spark::detail::LogFilter::~LogFilter() {
   d6860:	b510      	push	{r4, lr}
   d6862:	4604      	mov	r4, r0
   d6864:	300c      	adds	r0, #12
   d6866:	f7ff ffd5 	bl	d6814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d686a:	4620      	mov	r0, r4
   d686c:	f7ff ffe6 	bl	d683c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6870:	4620      	mov	r0, r4
   d6872:	bd10      	pop	{r4, pc}

000d6874 <_ZN5spark16StreamLogHandlerD1Ev>:
class StreamLogHandler: public LogHandler {
   d6874:	b510      	push	{r4, lr}
    virtual ~LogHandler() = default;
   d6876:	4b04      	ldr	r3, [pc, #16]	; (d6888 <_ZN5spark16StreamLogHandlerD1Ev+0x14>)
class StreamLogHandler: public LogHandler {
   d6878:	4604      	mov	r4, r0
    virtual ~LogHandler() = default;
   d687a:	f840 3b04 	str.w	r3, [r0], #4
   d687e:	f7ff ffef 	bl	d6860 <_ZN5spark6detail9LogFilterD1Ev>
class StreamLogHandler: public LogHandler {
   d6882:	4620      	mov	r0, r4
   d6884:	bd10      	pop	{r4, pc}
   d6886:	bf00      	nop
   d6888:	000d85e8 	.word	0x000d85e8

000d688c <_ZN5spark16StreamLogHandlerD0Ev>:
   d688c:	b510      	push	{r4, lr}
   d688e:	4604      	mov	r4, r0
   d6890:	f7ff fff0 	bl	d6874 <_ZN5spark16StreamLogHandlerD1Ev>
   d6894:	4620      	mov	r0, r4
   d6896:	2124      	movs	r1, #36	; 0x24
   d6898:	f001 fb24 	bl	d7ee4 <_ZdlPvj>
   d689c:	4620      	mov	r0, r4
   d689e:	bd10      	pop	{r4, pc}

000d68a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>:
class JSONStreamLogHandler: public StreamLogHandler {
   d68a0:	b510      	push	{r4, lr}
   d68a2:	4b03      	ldr	r3, [pc, #12]	; (d68b0 <_ZN5spark20JSONStreamLogHandlerD1Ev+0x10>)
   d68a4:	6003      	str	r3, [r0, #0]
   d68a6:	4604      	mov	r4, r0
   d68a8:	f7ff ffe4 	bl	d6874 <_ZN5spark16StreamLogHandlerD1Ev>
   d68ac:	4620      	mov	r0, r4
   d68ae:	bd10      	pop	{r4, pc}
   d68b0:	000d8a48 	.word	0x000d8a48

000d68b4 <_ZN5spark20JSONStreamLogHandlerD0Ev>:
   d68b4:	b510      	push	{r4, lr}
   d68b6:	4604      	mov	r4, r0
   d68b8:	f7ff fff2 	bl	d68a0 <_ZN5spark20JSONStreamLogHandlerD1Ev>
   d68bc:	4620      	mov	r0, r4
   d68be:	2124      	movs	r1, #36	; 0x24
   d68c0:	f001 fb10 	bl	d7ee4 <_ZdlPvj>
   d68c4:	4620      	mov	r0, r4
   d68c6:	bd10      	pop	{r4, pc}

000d68c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>:
        capacity_(0) {
   d68c8:	2200      	movs	r2, #0
   d68ca:	e9c0 2200 	strd	r2, r2, [r0]
inline spark::Vector<T, AllocatorT>::Vector(Vector<T, AllocatorT>&& vector) : Vector() {
   d68ce:	b510      	push	{r4, lr}
        capacity_(0) {
   d68d0:	6082      	str	r2, [r0, #8]
      __a = _GLIBCXX_MOVE(__b);
   d68d2:	680c      	ldr	r4, [r1, #0]
   d68d4:	6004      	str	r4, [r0, #0]
   d68d6:	684c      	ldr	r4, [r1, #4]
   d68d8:	6044      	str	r4, [r0, #4]
   d68da:	688c      	ldr	r4, [r1, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68dc:	600a      	str	r2, [r1, #0]
   d68de:	604a      	str	r2, [r1, #4]
      __a = _GLIBCXX_MOVE(__b);
   d68e0:	6084      	str	r4, [r0, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d68e2:	608a      	str	r2, [r1, #8]
}
   d68e4:	bd10      	pop	{r4, pc}

000d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>:
      ~lock_guard()
   d68e6:	b510      	push	{r4, lr}
      { _M_device.unlock(); }
   d68e8:	6803      	ldr	r3, [r0, #0]
      ~lock_guard()
   d68ea:	4604      	mov	r4, r0
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    bool try_lock() { return trylock(); }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d68ec:	6818      	ldr	r0, [r3, #0]
   d68ee:	f7fe ff35 	bl	d575c <os_mutex_recursive_unlock>
      { _M_device.unlock(); }
   d68f2:	4620      	mov	r0, r4
   d68f4:	bd10      	pop	{r4, pc}
	...

000d68f8 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv>:
}

void spark::LogManager::logMessage(const char *msg, int level, const char *category, const LogAttributes *attr, void *reserved) {
   d68f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d68fc:	b087      	sub	sp, #28
   d68fe:	4680      	mov	r8, r0
   d6900:	9303      	str	r3, [sp, #12]
#endif /* nRF52840 */

#if defined(STM32F10X_MD) || defined(STM32F10X_HD) || defined(STM32F2XX) || defined(nRF52840)
static inline bool HAL_IsISR() 
{
	return (SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) != 0;
   d6902:	4b1c      	ldr	r3, [pc, #112]	; (d6974 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x7c>)
   d6904:	685b      	ldr	r3, [r3, #4]
   d6906:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d690a:	4689      	mov	r9, r1
   d690c:	4616      	mov	r6, r2
#ifndef LOG_FROM_ISR
    if (HAL_IsISR()) {
   d690e:	b96b      	cbnz	r3, d692c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x34>
        return;
    }
#endif
    LogManager *that = instance();
   d6910:	f7ff feb8 	bl	d6684 <_ZN5spark10LogManager8instanceEv>
   d6914:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6916:	f100 0324 	add.w	r3, r0, #36	; 0x24
    void lock() { os_mutex_recursive_lock(handle_); }
   d691a:	6a40      	ldr	r0, [r0, #36]	; 0x24
      explicit lock_guard(mutex_type& __m) : _M_device(__m)
   d691c:	9305      	str	r3, [sp, #20]
   d691e:	f7fe ff15 	bl	d574c <os_mutex_recursive_lock>
        // prevent re-entry
        if (that->isActive()) {
   d6922:	7b23      	ldrb	r3, [r4, #12]
   d6924:	b12b      	cbz	r3, d6932 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x3a>
    LOG_WITH_LOCK(that->mutex_) {
   d6926:	a805      	add	r0, sp, #20
   d6928:	f7ff ffdd 	bl	d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        for (LogHandler *handler: that->activeHandlers_) {
            handler->message(msg, (LogLevel)level, category, *attr);
        }
        that->setActive(false);
    }
}
   d692c:	b007      	add	sp, #28
   d692e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
inline bool spark::LogManager::isActive() const {
    return outputActive_;
}

inline void spark::LogManager::setActive(bool outputActive) {
    outputActive_ = outputActive;
   d6932:	2301      	movs	r3, #1
   d6934:	7323      	strb	r3, [r4, #12]
    return data_ + size_;
   d6936:	e9d4 5300 	ldrd	r5, r3, [r4]
            handler->message(msg, (LogLevel)level, category, *attr);
   d693a:	fa5f f989 	uxtb.w	r9, r9
   d693e:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6942:	45aa      	cmp	sl, r5
   d6944:	d012      	beq.n	d696c <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x74>
   d6946:	f855 7b04 	ldr.w	r7, [r5], #4
    if (level >= filter_.level(category)) {
   d694a:	4631      	mov	r1, r6
   d694c:	1d38      	adds	r0, r7, #4
   d694e:	f7ff fe25 	bl	d659c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d6952:	4581      	cmp	r9, r0
   d6954:	d3f5      	bcc.n	d6942 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
        logMessage(msg, level, category, attr);
   d6956:	683b      	ldr	r3, [r7, #0]
   d6958:	9a03      	ldr	r2, [sp, #12]
   d695a:	9200      	str	r2, [sp, #0]
   d695c:	f8d3 b008 	ldr.w	fp, [r3, #8]
   d6960:	464a      	mov	r2, r9
   d6962:	4633      	mov	r3, r6
   d6964:	4641      	mov	r1, r8
   d6966:	4638      	mov	r0, r7
   d6968:	47d8      	blx	fp
   d696a:	e7ea      	b.n	d6942 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x4a>
    outputActive_ = outputActive;
   d696c:	2300      	movs	r3, #0
   d696e:	7323      	strb	r3, [r4, #12]
   d6970:	e7d9      	b.n	d6926 <_ZN5spark10LogManager10logMessageEPKciS2_PK13LogAttributesPv+0x2e>
   d6972:	bf00      	nop
   d6974:	e000ed00 	.word	0xe000ed00

000d6978 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv>:
void spark::LogManager::logWrite(const char *data, size_t size, int level, const char *category, void *reserved) {
   d6978:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d697c:	469b      	mov	fp, r3
   d697e:	4b1a      	ldr	r3, [pc, #104]	; (d69e8 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x70>)
   d6980:	685b      	ldr	r3, [r3, #4]
   d6982:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d6986:	4680      	mov	r8, r0
   d6988:	4689      	mov	r9, r1
   d698a:	4616      	mov	r6, r2
    if (HAL_IsISR()) {
   d698c:	b96b      	cbnz	r3, d69aa <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x32>
    LogManager *that = instance();
   d698e:	f7ff fe79 	bl	d6684 <_ZN5spark10LogManager8instanceEv>
   d6992:	4604      	mov	r4, r0
    LOG_WITH_LOCK(that->mutex_) {
   d6994:	f100 0324 	add.w	r3, r0, #36	; 0x24
   d6998:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d699a:	9301      	str	r3, [sp, #4]
   d699c:	f7fe fed6 	bl	d574c <os_mutex_recursive_lock>
        if (that->isActive()) {
   d69a0:	7b23      	ldrb	r3, [r4, #12]
   d69a2:	b12b      	cbz	r3, d69b0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x38>
    LOG_WITH_LOCK(that->mutex_) {
   d69a4:	a801      	add	r0, sp, #4
   d69a6:	f7ff ff9e 	bl	d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d69aa:	b003      	add	sp, #12
   d69ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    outputActive_ = outputActive;
   d69b0:	2301      	movs	r3, #1
   d69b2:	7323      	strb	r3, [r4, #12]
   d69b4:	e9d4 5300 	ldrd	r5, r3, [r4]
    if (level >= filter_.level(category)) {
   d69b8:	b2f6      	uxtb	r6, r6
   d69ba:	eb05 0a83 	add.w	sl, r5, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d69be:	4555      	cmp	r5, sl
   d69c0:	d00e      	beq.n	d69e0 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x68>
   d69c2:	f855 7b04 	ldr.w	r7, [r5], #4
   d69c6:	4659      	mov	r1, fp
   d69c8:	1d38      	adds	r0, r7, #4
   d69ca:	f7ff fde7 	bl	d659c <_ZNK5spark6detail9LogFilter5levelEPKc>
   d69ce:	4286      	cmp	r6, r0
   d69d0:	d3f5      	bcc.n	d69be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
        write(data, size);
   d69d2:	683b      	ldr	r3, [r7, #0]
   d69d4:	464a      	mov	r2, r9
   d69d6:	68db      	ldr	r3, [r3, #12]
   d69d8:	4641      	mov	r1, r8
   d69da:	4638      	mov	r0, r7
   d69dc:	4798      	blx	r3
   d69de:	e7ee      	b.n	d69be <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x46>
    outputActive_ = outputActive;
   d69e0:	2300      	movs	r3, #0
   d69e2:	7323      	strb	r3, [r4, #12]
   d69e4:	e7de      	b.n	d69a4 <_ZN5spark10LogManager8logWriteEPKcjiS2_Pv+0x2c>
   d69e6:	bf00      	nop
   d69e8:	e000ed00 	.word	0xe000ed00

000d69ec <_ZN5spark10LogManager10logEnabledEiPKcPv>:
int spark::LogManager::logEnabled(int level, const char *category, void *reserved) {
   d69ec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d69f0:	4b16      	ldr	r3, [pc, #88]	; (d6a4c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x60>)
   d69f2:	685b      	ldr	r3, [r3, #4]
   d69f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
   d69f8:	4605      	mov	r5, r0
   d69fa:	460f      	mov	r7, r1
    if (HAL_IsISR()) {
   d69fc:	bb1b      	cbnz	r3, d6a46 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x5a>
    LogManager *that = instance();
   d69fe:	f7ff fe41 	bl	d6684 <_ZN5spark10LogManager8instanceEv>
    LOG_WITH_LOCK(that->mutex_) {
   d6a02:	f100 0324 	add.w	r3, r0, #36	; 0x24
    LogManager *that = instance();
   d6a06:	4604      	mov	r4, r0
   d6a08:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6a0a:	9301      	str	r3, [sp, #4]
   d6a0c:	f7fe fe9e 	bl	d574c <os_mutex_recursive_lock>
   d6a10:	e9d4 6300 	ldrd	r6, r3, [r4]
    int minLevel = LOG_LEVEL_NONE;
   d6a14:	2446      	movs	r4, #70	; 0x46
   d6a16:	eb06 0883 	add.w	r8, r6, r3, lsl #2
        for (LogHandler *handler: that->activeHandlers_) {
   d6a1a:	45b0      	cmp	r8, r6
   d6a1c:	d109      	bne.n	d6a32 <_ZN5spark10LogManager10logEnabledEiPKcPv+0x46>
    LOG_WITH_LOCK(that->mutex_) {
   d6a1e:	a801      	add	r0, sp, #4
   d6a20:	f7ff ff61 	bl	d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
    return (level >= minLevel);
   d6a24:	42a5      	cmp	r5, r4
   d6a26:	bfb4      	ite	lt
   d6a28:	2000      	movlt	r0, #0
   d6a2a:	2001      	movge	r0, #1
}
   d6a2c:	b002      	add	sp, #8
   d6a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return filter_.level(category);
   d6a32:	f856 0b04 	ldr.w	r0, [r6], #4
   d6a36:	4639      	mov	r1, r7
   d6a38:	3004      	adds	r0, #4
   d6a3a:	f7ff fdaf 	bl	d659c <_ZNK5spark6detail9LogFilter5levelEPKc>
            if (level < minLevel) {
   d6a3e:	4284      	cmp	r4, r0
   d6a40:	bfa8      	it	ge
   d6a42:	4604      	movge	r4, r0
        for (LogHandler *handler: that->activeHandlers_) {
   d6a44:	e7e9      	b.n	d6a1a <_ZN5spark10LogManager10logEnabledEiPKcPv+0x2e>
        return 0;
   d6a46:	2000      	movs	r0, #0
   d6a48:	e7f0      	b.n	d6a2c <_ZN5spark10LogManager10logEnabledEiPKcPv+0x40>
   d6a4a:	bf00      	nop
   d6a4c:	e000ed00 	.word	0xe000ed00

000d6a50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>:
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6a50:	b570      	push	{r4, r5, r6, lr}
   d6a52:	4604      	mov	r4, r0
    T* const p = find(data_, data_ + size_, value);
   d6a54:	e9d0 0200 	ldrd	r0, r2, [r0]
inline bool spark::Vector<T, AllocatorT>::removeOne(const T &value) {
   d6a58:	460b      	mov	r3, r1
    T* const p = find(data_, data_ + size_, value);
   d6a5a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
        for (; p != end; ++p) {
   d6a5e:	4282      	cmp	r2, r0
   d6a60:	d007      	beq.n	d6a72 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x22>
   d6a62:	4601      	mov	r1, r0
            if (*p == value) {
   d6a64:	681d      	ldr	r5, [r3, #0]
   d6a66:	f851 6b04 	ldr.w	r6, [r1], #4
   d6a6a:	42ae      	cmp	r6, r5
   d6a6c:	d003      	beq.n	d6a76 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x26>
   d6a6e:	4608      	mov	r0, r1
   d6a70:	e7f5      	b.n	d6a5e <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0xe>
        return false;
   d6a72:	2000      	movs	r0, #0
}
   d6a74:	bd70      	pop	{r4, r5, r6, pc}
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6a76:	1a52      	subs	r2, r2, r1
   d6a78:	f001 fa74 	bl	d7f64 <memmove>
    --size_;
   d6a7c:	6863      	ldr	r3, [r4, #4]
   d6a7e:	3b01      	subs	r3, #1
   d6a80:	6063      	str	r3, [r4, #4]
    return true;
   d6a82:	2001      	movs	r0, #1
   d6a84:	e7f6      	b.n	d6a74 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_+0x24>

000d6a86 <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE>:
void spark::LogManager::removeHandler(LogHandler *handler) {
   d6a86:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    LOG_WITH_LOCK(mutex_) {
   d6a88:	f100 0324 	add.w	r3, r0, #36	; 0x24
void spark::LogManager::removeHandler(LogHandler *handler) {
   d6a8c:	4604      	mov	r4, r0
   d6a8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6a90:	9101      	str	r1, [sp, #4]
   d6a92:	9303      	str	r3, [sp, #12]
   d6a94:	f7fe fe5a 	bl	d574c <os_mutex_recursive_lock>
        if (activeHandlers_.removeOne(handler) && activeHandlers_.isEmpty()) {
   d6a98:	a901      	add	r1, sp, #4
   d6a9a:	4620      	mov	r0, r4
   d6a9c:	f7ff ffd8 	bl	d6a50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
   d6aa0:	b118      	cbz	r0, d6aaa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
   d6aa2:	6863      	ldr	r3, [r4, #4]
   d6aa4:	b90b      	cbnz	r3, d6aaa <_ZN5spark10LogManager13removeHandlerEPNS_10LogHandlerE+0x24>
            resetSystemCallbacks();
   d6aa6:	f7ff fe15 	bl	d66d4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d6aaa:	a803      	add	r0, sp, #12
   d6aac:	f7ff ff1b 	bl	d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
}
   d6ab0:	b004      	add	sp, #16
   d6ab2:	bd10      	pop	{r4, pc}

000d6ab4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>:
void spark::LogManager::destroyFactoryHandlers() {
   d6ab4:	b570      	push	{r4, r5, r6, lr}
    return data_ + size_;
   d6ab6:	e9d0 5604 	ldrd	r5, r6, [r0, #16]
   d6aba:	2318      	movs	r3, #24
   d6abc:	4604      	mov	r4, r0
   d6abe:	fb03 5606 	mla	r6, r3, r6, r5
    for (const FactoryHandler &h: factoryHandlers_) {
   d6ac2:	42ae      	cmp	r6, r5
   d6ac4:	d015      	beq.n	d6af2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3e>
        activeHandlers_.removeOne(h.handler);
   d6ac6:	f105 0110 	add.w	r1, r5, #16
   d6aca:	4620      	mov	r0, r4
   d6acc:	f7ff ffc0 	bl	d6a50 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE9removeOneERKS2_>
        if (activeHandlers_.isEmpty()) {
   d6ad0:	6863      	ldr	r3, [r4, #4]
   d6ad2:	b90b      	cbnz	r3, d6ad8 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x24>
            resetSystemCallbacks();
   d6ad4:	f7ff fdfe 	bl	d66d4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
        handlerFactory_->destroyHandler(h.handler);
   d6ad8:	69e0      	ldr	r0, [r4, #28]
   d6ada:	6929      	ldr	r1, [r5, #16]
   d6adc:	6803      	ldr	r3, [r0, #0]
   d6ade:	68db      	ldr	r3, [r3, #12]
   d6ae0:	4798      	blx	r3
        if (h.stream) {
   d6ae2:	6969      	ldr	r1, [r5, #20]
   d6ae4:	b119      	cbz	r1, d6aee <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x3a>
            streamFactory_->destroyStream(h.stream);
   d6ae6:	6a20      	ldr	r0, [r4, #32]
   d6ae8:	6803      	ldr	r3, [r0, #0]
   d6aea:	68db      	ldr	r3, [r3, #12]
   d6aec:	4798      	blx	r3
    for (const FactoryHandler &h: factoryHandlers_) {
   d6aee:	3518      	adds	r5, #24
   d6af0:	e7e7      	b.n	d6ac2 <_ZN5spark10LogManager22destroyFactoryHandlersEv+0xe>
    destruct(data_, data_ + size_);
   d6af2:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d6af6:	2618      	movs	r6, #24
   d6af8:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d6afc:	42ae      	cmp	r6, r5
   d6afe:	d004      	beq.n	d6b0a <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x56>
struct spark::LogManager::FactoryHandler {
   d6b00:	4628      	mov	r0, r5
   d6b02:	f000 fd85 	bl	d7610 <_ZN6StringD1Ev>
   d6b06:	3518      	adds	r5, #24
   d6b08:	e7f8      	b.n	d6afc <_ZN5spark10LogManager22destroyFactoryHandlersEv+0x48>
    size_ = 0;
   d6b0a:	2300      	movs	r3, #0
   d6b0c:	6163      	str	r3, [r4, #20]
}
   d6b0e:	bd70      	pop	{r4, r5, r6, pc}

000d6b10 <_ZN5spark10LogManagerD1Ev>:
spark::LogManager::~LogManager() {
   d6b10:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d6b12:	4604      	mov	r4, r0
    resetSystemCallbacks();
   d6b14:	f7ff fdde 	bl	d66d4 <_ZN5spark10LogManager20resetSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d6b18:	f104 0324 	add.w	r3, r4, #36	; 0x24
   d6b1c:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6b1e:	9301      	str	r3, [sp, #4]
   d6b20:	f7fe fe14 	bl	d574c <os_mutex_recursive_lock>
         destroyFactoryHandlers();
   d6b24:	4620      	mov	r0, r4
   d6b26:	f7ff ffc5 	bl	d6ab4 <_ZN5spark10LogManager22destroyFactoryHandlersEv>
    LOG_WITH_LOCK(mutex_) {
   d6b2a:	a801      	add	r0, sp, #4
   d6b2c:	f7ff fedb 	bl	d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
        if (handle_) {
   d6b30:	6a60      	ldr	r0, [r4, #36]	; 0x24
   d6b32:	b108      	cbz	r0, d6b38 <_ZN5spark10LogManagerD1Ev+0x28>
            os_mutex_recursive_destroy(handle_);
   d6b34:	f7fe fe02 	bl	d573c <os_mutex_recursive_destroy>
    destruct(data_, data_ + size_);
   d6b38:	e9d4 5304 	ldrd	r5, r3, [r4, #16]
   d6b3c:	2618      	movs	r6, #24
   d6b3e:	fb06 5603 	mla	r6, r6, r3, r5
        for (; p != end; ++p) {
   d6b42:	42ae      	cmp	r6, r5
   d6b44:	d004      	beq.n	d6b50 <_ZN5spark10LogManagerD1Ev+0x40>
struct spark::LogManager::FactoryHandler {
   d6b46:	4628      	mov	r0, r5
   d6b48:	f000 fd62 	bl	d7610 <_ZN6StringD1Ev>
   d6b4c:	3518      	adds	r5, #24
   d6b4e:	e7f8      	b.n	d6b42 <_ZN5spark10LogManagerD1Ev+0x32>
    ::free(ptr);
   d6b50:	6920      	ldr	r0, [r4, #16]
   d6b52:	f7ff f86f 	bl	d5c34 <free>
   d6b56:	6820      	ldr	r0, [r4, #0]
   d6b58:	f7ff f86c 	bl	d5c34 <free>
}
   d6b5c:	4620      	mov	r0, r4
   d6b5e:	b002      	add	sp, #8
   d6b60:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6b64 <__tcf_2>:
    static LogManager mgr;
   d6b64:	4801      	ldr	r0, [pc, #4]	; (d6b6c <__tcf_2+0x8>)
   d6b66:	f7ff bfd3 	b.w	d6b10 <_ZN5spark10LogManagerD1Ev>
   d6b6a:	bf00      	nop
   d6b6c:	2003e588 	.word	0x2003e588

000d6b70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>:
        if (dest > p && dest < end) {
   d6b70:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6b74:	4606      	mov	r6, r0
   d6b76:	460c      	mov	r4, r1
   d6b78:	4615      	mov	r5, r2
        if (dest > p && dest < end) {
   d6b7a:	d927      	bls.n	d6bcc <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5c>
   d6b7c:	4290      	cmp	r0, r2
   d6b7e:	d226      	bcs.n	d6bce <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x5e>
            --end;
   d6b80:	f1a2 0514 	sub.w	r5, r2, #20
            dest += end - p - 1;
   d6b84:	1a6c      	subs	r4, r5, r1
   d6b86:	f1a1 0714 	sub.w	r7, r1, #20
   d6b8a:	4404      	add	r4, r0
        capacity_(0) {
   d6b8c:	2600      	movs	r6, #0
            for (; end != p; --end, --dest) {
   d6b8e:	42af      	cmp	r7, r5
   d6b90:	d03d      	beq.n	d6c0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*end));
   d6b92:	b1a4      	cbz	r4, d6bbe <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x4e>
struct spark::detail::LogFilter::Node {
   d6b94:	682b      	ldr	r3, [r5, #0]
   d6b96:	6023      	str	r3, [r4, #0]
   d6b98:	88ab      	ldrh	r3, [r5, #4]
   d6b9a:	80a3      	strh	r3, [r4, #4]
   d6b9c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
   d6ba0:	80e3      	strh	r3, [r4, #6]
        capacity_(0) {
   d6ba2:	e9c4 6602 	strd	r6, r6, [r4, #8]
   d6ba6:	6126      	str	r6, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6ba8:	68ab      	ldr	r3, [r5, #8]
   d6baa:	60a3      	str	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bac:	60ae      	str	r6, [r5, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bae:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6bb0:	68ea      	ldr	r2, [r5, #12]
   d6bb2:	60e2      	str	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bb4:	60eb      	str	r3, [r5, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bb6:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6bb8:	692a      	ldr	r2, [r5, #16]
   d6bba:	6122      	str	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bbc:	612b      	str	r3, [r5, #16]
   d6bbe:	f105 0008 	add.w	r0, r5, #8
   d6bc2:	f7ff fe27 	bl	d6814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; end != p; --end, --dest) {
   d6bc6:	3d14      	subs	r5, #20
   d6bc8:	3c14      	subs	r4, #20
   d6bca:	e7e0      	b.n	d6b8e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x1e>
        } else if (dest != p) {
   d6bcc:	d01f      	beq.n	d6c0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
        capacity_(0) {
   d6bce:	2700      	movs	r7, #0
            for (; p != end; ++p, ++dest) {
   d6bd0:	42ac      	cmp	r4, r5
   d6bd2:	d01c      	beq.n	d6c0e <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x9e>
                new(dest) T(std::move(*p));
   d6bd4:	b1a6      	cbz	r6, d6c00 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x90>
   d6bd6:	6823      	ldr	r3, [r4, #0]
   d6bd8:	6033      	str	r3, [r6, #0]
   d6bda:	88a3      	ldrh	r3, [r4, #4]
   d6bdc:	80b3      	strh	r3, [r6, #4]
   d6bde:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
   d6be2:	80f3      	strh	r3, [r6, #6]
        capacity_(0) {
   d6be4:	e9c6 7702 	strd	r7, r7, [r6, #8]
   d6be8:	6137      	str	r7, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6bea:	68a3      	ldr	r3, [r4, #8]
   d6bec:	60b3      	str	r3, [r6, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bee:	60a7      	str	r7, [r4, #8]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bf0:	68f3      	ldr	r3, [r6, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6bf2:	68e2      	ldr	r2, [r4, #12]
   d6bf4:	60f2      	str	r2, [r6, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bf6:	60e3      	str	r3, [r4, #12]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bf8:	6933      	ldr	r3, [r6, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6bfa:	6922      	ldr	r2, [r4, #16]
   d6bfc:	6132      	str	r2, [r6, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bfe:	6123      	str	r3, [r4, #16]
   d6c00:	f104 0008 	add.w	r0, r4, #8
   d6c04:	f7ff fe06 	bl	d6814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            for (; p != end; ++p, ++dest) {
   d6c08:	3414      	adds	r4, #20
   d6c0a:	3614      	adds	r6, #20
   d6c0c:	e7e0      	b.n	d6bd0 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_+0x60>
    }
   d6c0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6c10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>:
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c12:	e9d0 5301 	ldrd	r5, r3, [r0, #4]
   d6c16:	429d      	cmp	r5, r3
inline bool spark::Vector<T, AllocatorT>::insert(int i, T value) {
   d6c18:	4604      	mov	r4, r0
   d6c1a:	460e      	mov	r6, r1
   d6c1c:	4617      	mov	r7, r2
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6c1e:	db0d      	blt.n	d6c3c <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x2c>
   d6c20:	3501      	adds	r5, #1
        if (n > 0) {
   d6c22:	2d00      	cmp	r5, #0
   d6c24:	6800      	ldr	r0, [r0, #0]
   d6c26:	dd04      	ble.n	d6c32 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x22>
    return ::realloc(ptr, size);
   d6c28:	00a9      	lsls	r1, r5, #2
   d6c2a:	f7ff f80b 	bl	d5c44 <realloc>
            if (!d) {
   d6c2e:	b918      	cbnz	r0, d6c38 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x28>
}
   d6c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ::free(ptr);
   d6c32:	f7fe ffff 	bl	d5c34 <free>
        T* d = nullptr;
   d6c36:	2000      	movs	r0, #0
        data_ = d;
   d6c38:	6020      	str	r0, [r4, #0]
        capacity_ = n;
   d6c3a:	60a5      	str	r5, [r4, #8]
    T* const p = data_ + i;
   d6c3c:	6825      	ldr	r5, [r4, #0]
    move(p + 1, p, data_ + size_);
   d6c3e:	6862      	ldr	r2, [r4, #4]
    T* const p = data_ + i;
   d6c40:	eb05 0186 	add.w	r1, r5, r6, lsl #2
    move(p + 1, p, data_ + size_);
   d6c44:	0092      	lsls	r2, r2, #2
        ::memmove(dest, p, (end - p) * sizeof(T));
   d6c46:	eba2 0286 	sub.w	r2, r2, r6, lsl #2
   d6c4a:	1d08      	adds	r0, r1, #4
   d6c4c:	f001 f98a 	bl	d7f64 <memmove>
    new(p) T(std::move(value));
   d6c50:	f845 7026 	str.w	r7, [r5, r6, lsl #2]
    ++size_;
   d6c54:	6863      	ldr	r3, [r4, #4]
   d6c56:	3301      	adds	r3, #1
   d6c58:	6063      	str	r3, [r4, #4]
    return true;
   d6c5a:	2001      	movs	r0, #1
   d6c5c:	e7e8      	b.n	d6c30 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_+0x20>

000d6c5e <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE>:
bool spark::LogManager::addHandler(LogHandler *handler) {
   d6c5e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    LOG_WITH_LOCK(mutex_) {
   d6c60:	f100 0324 	add.w	r3, r0, #36	; 0x24
bool spark::LogManager::addHandler(LogHandler *handler) {
   d6c64:	4604      	mov	r4, r0
    void lock() { os_mutex_recursive_lock(handle_); }
   d6c66:	6a40      	ldr	r0, [r0, #36]	; 0x24
   d6c68:	9301      	str	r3, [sp, #4]
   d6c6a:	460d      	mov	r5, r1
   d6c6c:	f7fe fd6e 	bl	d574c <os_mutex_recursive_lock>
    return find(data_, data_ + size_, value);
   d6c70:	e9d4 3100 	ldrd	r3, r1, [r4]
   d6c74:	eb03 0081 	add.w	r0, r3, r1, lsl #2
        for (; p != end; ++p) {
   d6c78:	4283      	cmp	r3, r0
   d6c7a:	461a      	mov	r2, r3
   d6c7c:	d00b      	beq.n	d6c96 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x38>
            if (*p == value) {
   d6c7e:	6812      	ldr	r2, [r2, #0]
   d6c80:	42aa      	cmp	r2, r5
   d6c82:	f103 0304 	add.w	r3, r3, #4
   d6c86:	d1f7      	bne.n	d6c78 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x1a>
    LOG_WITH_LOCK(mutex_) {
   d6c88:	a801      	add	r0, sp, #4
   d6c8a:	f7ff fe2c 	bl	d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
            return false;
   d6c8e:	2500      	movs	r5, #0
}
   d6c90:	4628      	mov	r0, r5
   d6c92:	b003      	add	sp, #12
   d6c94:	bd30      	pop	{r4, r5, pc}
    return insert(size_, std::move(value));
   d6c96:	462a      	mov	r2, r5
   d6c98:	4620      	mov	r0, r4
   d6c9a:	f7ff ffb9 	bl	d6c10 <_ZN5spark6VectorIPNS_10LogHandlerENS_16DefaultAllocatorEE6insertEiS2_>
        if (activeHandlers_.contains(handler) || !activeHandlers_.append(handler)) {
   d6c9e:	4605      	mov	r5, r0
   d6ca0:	2800      	cmp	r0, #0
   d6ca2:	d0f1      	beq.n	d6c88 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x2a>
        if (activeHandlers_.size() == 1) {
   d6ca4:	6863      	ldr	r3, [r4, #4]
   d6ca6:	2b01      	cmp	r3, #1
   d6ca8:	d101      	bne.n	d6cae <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x50>
            setSystemCallbacks();
   d6caa:	f7ff fd07 	bl	d66bc <_ZN5spark10LogManager18setSystemCallbacksEv>
    LOG_WITH_LOCK(mutex_) {
   d6cae:	a801      	add	r0, sp, #4
   d6cb0:	f7ff fe19 	bl	d68e6 <_ZNSt10lock_guardI14RecursiveMutexED1Ev>
   d6cb4:	e7ec      	b.n	d6c90 <_ZN5spark10LogManager10addHandlerEPNS_10LogHandlerE+0x32>

000d6cb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>:
        if (dest > p && dest < end) {
   d6cb6:	4288      	cmp	r0, r1
    static void move(T* dest, T* p, T* end) {
   d6cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cba:	4604      	mov	r4, r0
   d6cbc:	460d      	mov	r5, r1
   d6cbe:	4616      	mov	r6, r2
        if (dest > p && dest < end) {
   d6cc0:	d914      	bls.n	d6cec <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x36>
   d6cc2:	4290      	cmp	r0, r2
   d6cc4:	d213      	bcs.n	d6cee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
            --end;
   d6cc6:	f1a2 0610 	sub.w	r6, r2, #16
            dest += end - p - 1;
   d6cca:	1a75      	subs	r5, r6, r1
   d6ccc:	f1a1 0710 	sub.w	r7, r1, #16
   d6cd0:	442c      	add	r4, r5
            for (; end != p; --end, --dest) {
   d6cd2:	42b7      	cmp	r7, r6
   d6cd4:	d018      	beq.n	d6d08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*end));
   d6cd6:	b11c      	cbz	r4, d6ce0 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x2a>
   d6cd8:	4631      	mov	r1, r6
   d6cda:	4620      	mov	r0, r4
   d6cdc:	f000 fd14 	bl	d7708 <_ZN6StringC1EOS_>
                end->~T();
   d6ce0:	4630      	mov	r0, r6
   d6ce2:	f000 fc95 	bl	d7610 <_ZN6StringD1Ev>
            for (; end != p; --end, --dest) {
   d6ce6:	3e10      	subs	r6, #16
   d6ce8:	3c10      	subs	r4, #16
   d6cea:	e7f2      	b.n	d6cd2 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x1c>
        } else if (dest != p) {
   d6cec:	d00c      	beq.n	d6d08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
            for (; p != end; ++p, ++dest) {
   d6cee:	42b5      	cmp	r5, r6
   d6cf0:	d00a      	beq.n	d6d08 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x52>
                new(dest) T(std::move(*p));
   d6cf2:	b11c      	cbz	r4, d6cfc <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x46>
   d6cf4:	4629      	mov	r1, r5
   d6cf6:	4620      	mov	r0, r4
   d6cf8:	f000 fd06 	bl	d7708 <_ZN6StringC1EOS_>
                p->~T();
   d6cfc:	4628      	mov	r0, r5
   d6cfe:	f000 fc87 	bl	d7610 <_ZN6StringD1Ev>
            for (; p != end; ++p, ++dest) {
   d6d02:	3510      	adds	r5, #16
   d6d04:	3410      	adds	r4, #16
   d6d06:	e7f2      	b.n	d6cee <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_+0x38>
    }
   d6d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>:
    bool realloc(int n) {
   d6d0a:	b570      	push	{r4, r5, r6, lr}
        if (n > 0) {
   d6d0c:	1e0e      	subs	r6, r1, #0
    bool realloc(int n) {
   d6d0e:	4605      	mov	r5, r0
        if (n > 0) {
   d6d10:	dd11      	ble.n	d6d36 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2c>
    return ::malloc(size);
   d6d12:	0130      	lsls	r0, r6, #4
   d6d14:	f7fe ff86 	bl	d5c24 <malloc>
            if (!d) {
   d6d18:	4604      	mov	r4, r0
   d6d1a:	b158      	cbz	r0, d6d34 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x2a>
            move(d, data_, data_ + size_);
   d6d1c:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6d20:	eb01 1202 	add.w	r2, r1, r2, lsl #4
   d6d24:	f7ff ffc7 	bl	d6cb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    ::free(ptr);
   d6d28:	6828      	ldr	r0, [r5, #0]
   d6d2a:	f7fe ff83 	bl	d5c34 <free>
        data_ = d;
   d6d2e:	602c      	str	r4, [r5, #0]
        capacity_ = n;
   d6d30:	60ae      	str	r6, [r5, #8]
        return true;
   d6d32:	2001      	movs	r0, #1
    }
   d6d34:	bd70      	pop	{r4, r5, r6, pc}
        T* d = nullptr;
   d6d36:	2400      	movs	r4, #0
   d6d38:	e7f6      	b.n	d6d28 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi+0x1e>

000d6d3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6d3a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6d3e:	4691      	mov	r9, r2
   d6d40:	b097      	sub	sp, #92	; 0x5c
        capacity_(0) {
   d6d42:	2300      	movs	r3, #0
   d6d44:	9103      	str	r1, [sp, #12]
    if (!cats.reserve(filters.size())) {
   d6d46:	f8d9 1004 	ldr.w	r1, [r9, #4]
   d6d4a:	930c      	str	r3, [sp, #48]	; 0x30
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6d4c:	2246      	movs	r2, #70	; 0x46
    if (n > capacity_ && !realloc(n)) {
   d6d4e:	4299      	cmp	r1, r3
        capacity_(0) {
   d6d50:	e9c0 3300 	strd	r3, r3, [r0]
   d6d54:	e9c0 3302 	strd	r3, r3, [r0, #8]
   d6d58:	e9c0 3304 	strd	r3, r3, [r0, #16]
   d6d5c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
spark::detail::LogFilter::LogFilter(LogLevel level, LogCategoryFilters filters) :
   d6d60:	4604      	mov	r4, r0
        level_(LOG_LEVEL_NONE) { // Fallback level that will be used in case of construction errors
   d6d62:	7602      	strb	r2, [r0, #24]
    if (n > capacity_ && !realloc(n)) {
   d6d64:	dc23      	bgt.n	d6dae <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x74>
    return data_ + size_;
   d6d66:	e9d9 5700 	ldrd	r5, r7, [r9]
   d6d6a:	2314      	movs	r3, #20
   d6d6c:	fb03 5707 	mla	r7, r3, r7, r5
    for (LogCategoryFilter &filter: filters) {
   d6d70:	42af      	cmp	r7, r5
   d6d72:	d03b      	beq.n	d6dec <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xb2>
        cats.append(std::move(filter.cat_));
   d6d74:	4629      	mov	r1, r5
   d6d76:	a80d      	add	r0, sp, #52	; 0x34
   d6d78:	f000 fcc6 	bl	d7708 <_ZN6StringC1EOS_>
    return insert(size_, std::move(value));
   d6d7c:	a90d      	add	r1, sp, #52	; 0x34
   d6d7e:	a811      	add	r0, sp, #68	; 0x44
   d6d80:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   d6d82:	f000 fcc1 	bl	d7708 <_ZN6StringC1EOS_>
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6d86:	e9dd 130b 	ldrd	r1, r3, [sp, #44]	; 0x2c
   d6d8a:	4299      	cmp	r1, r3
   d6d8c:	da1b      	bge.n	d6dc6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x8c>
    T* const p = data_ + i;
   d6d8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    move(p + 1, p, data_ + size_);
   d6d90:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    T* const p = data_ + i;
   d6d92:	eb03 1606 	add.w	r6, r3, r6, lsl #4
    move(p + 1, p, data_ + size_);
   d6d96:	eb03 1202 	add.w	r2, r3, r2, lsl #4
   d6d9a:	4631      	mov	r1, r6
   d6d9c:	f106 0010 	add.w	r0, r6, #16
   d6da0:	f7ff ff89 	bl	d6cb6 <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE4moveIS1_Li0EEEvPS1_S5_S5_>
    new(p) T(std::move(value));
   d6da4:	b9ee      	cbnz	r6, d6de2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xa8>
    ++size_;
   d6da6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d6da8:	3301      	adds	r3, #1
   d6daa:	930b      	str	r3, [sp, #44]	; 0x2c
    return true;
   d6dac:	e011      	b.n	d6dd2 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x98>
    if (n > capacity_ && !realloc(n)) {
   d6dae:	a80a      	add	r0, sp, #40	; 0x28
   d6db0:	f7ff ffab 	bl	d6d0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6db4:	2800      	cmp	r0, #0
   d6db6:	d1d6      	bne.n	d6d66 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>
    Vector<String> cats;
   d6db8:	a80a      	add	r0, sp, #40	; 0x28
   d6dba:	f7ff fd3f 	bl	d683c <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEED1Ev>
}
   d6dbe:	4620      	mov	r0, r4
   d6dc0:	b017      	add	sp, #92	; 0x5c
   d6dc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6dc6:	3101      	adds	r1, #1
   d6dc8:	a80a      	add	r0, sp, #40	; 0x28
   d6dca:	f7ff ff9e 	bl	d6d0a <_ZN5spark6VectorI6StringNS_16DefaultAllocatorEE7reallocIS1_Li0EEEbi>
   d6dce:	2800      	cmp	r0, #0
   d6dd0:	d1dd      	bne.n	d6d8e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x54>
    return insert(size_, std::move(value));
   d6dd2:	a811      	add	r0, sp, #68	; 0x44
   d6dd4:	f000 fc1c 	bl	d7610 <_ZN6StringD1Ev>
        cats.append(std::move(filter.cat_));
   d6dd8:	a80d      	add	r0, sp, #52	; 0x34
   d6dda:	f000 fc19 	bl	d7610 <_ZN6StringD1Ev>
    for (LogCategoryFilter &filter: filters) {
   d6dde:	3514      	adds	r5, #20
   d6de0:	e7c6      	b.n	d6d70 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x36>
    new(p) T(std::move(value));
   d6de2:	a911      	add	r1, sp, #68	; 0x44
   d6de4:	4630      	mov	r0, r6
   d6de6:	f000 fc8f 	bl	d7708 <_ZN6StringC1EOS_>
   d6dea:	e7dc      	b.n	d6da6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x6c>
        capacity_(0) {
   d6dec:	2600      	movs	r6, #0
   d6dee:	e9cd 660d 	strd	r6, r6, [sp, #52]	; 0x34
   d6df2:	960f      	str	r6, [sp, #60]	; 0x3c
        size_t size = 0; // Name length
   d6df4:	4637      	mov	r7, r6
   d6df6:	f04f 0a14 	mov.w	sl, #20
    for (int i = 0; i < cats.size(); ++i) {
   d6dfa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   d6dfe:	429e      	cmp	r6, r3
   d6e00:	f280 8097 	bge.w	d6f32 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f8>
        const char *category = cats.at(i).c_str();
   d6e04:	0133      	lsls	r3, r6, #4
   d6e06:	58d3      	ldr	r3, [r2, r3]
   d6e08:	9308      	str	r3, [sp, #32]
        if (!category) {
   d6e0a:	b90b      	cbnz	r3, d6e10 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd6>
    for (int i = 0; i < cats.size(); ++i) {
   d6e0c:	3601      	adds	r6, #1
   d6e0e:	e7f4      	b.n	d6dfa <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xc0>
        size_t size = 0; // Name length
   d6e10:	fb0a f306 	mul.w	r3, sl, r6
   d6e14:	9709      	str	r7, [sp, #36]	; 0x24
   d6e16:	9302      	str	r3, [sp, #8]
        Vector<Node> *pNodes = &nodes; // Root nodes
   d6e18:	ad0d      	add	r5, sp, #52	; 0x34
        while ((name = nextSubcategoryName(category, size))) {
   d6e1a:	a909      	add	r1, sp, #36	; 0x24
   d6e1c:	a808      	add	r0, sp, #32
   d6e1e:	f7ff fb00 	bl	d6422 <_ZN12_GLOBAL__N_119nextSubcategoryNameERPKcRj>
   d6e22:	4683      	mov	fp, r0
   d6e24:	2800      	cmp	r0, #0
   d6e26:	d0f1      	beq.n	d6e0c <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xd2>
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e28:	4601      	mov	r1, r0
   d6e2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
            bool found = false;
   d6e2c:	f88d 701f 	strb.w	r7, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e30:	f10d 031f 	add.w	r3, sp, #31
   d6e34:	4628      	mov	r0, r5
   d6e36:	f7ff fb73 	bl	d6520 <_ZN5spark6detail9LogFilter9nodeIndexERKNS_6VectorINS1_4NodeENS_16DefaultAllocatorEEEPKcjRb>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6e3a:	f89d 801f 	ldrb.w	r8, [sp, #31]
            const int index = nodeIndex(*pNodes, name, size, found);
   d6e3e:	9001      	str	r0, [sp, #4]
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6e40:	f1b8 0f00 	cmp.w	r8, #0
   d6e44:	d166      	bne.n	d6f14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
   d6e46:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
            level(-1) {
   d6e4a:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
   d6e4e:	e9cd 8813 	strd	r8, r8, [sp, #76]	; 0x4c
   d6e52:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d6e56:	f8cd b044 	str.w	fp, [sp, #68]	; 0x44
   d6e5a:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
   d6e5e:	f8cd 8054 	str.w	r8, [sp, #84]	; 0x54
    if (size_ + 1 > capacity_ && !realloc(size_ + 1)) {
   d6e62:	e9d5 3201 	ldrd	r3, r2, [r5, #4]
   d6e66:	4293      	cmp	r3, r2
   d6e68:	db1a      	blt.n	d6ea0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x166>
   d6e6a:	f103 0b01 	add.w	fp, r3, #1
        if (n > 0) {
   d6e6e:	f1bb 0f00 	cmp.w	fp, #0
   d6e72:	dd4a      	ble.n	d6f0a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d0>
    return ::malloc(size);
   d6e74:	fb0a f00b 	mul.w	r0, sl, fp
   d6e78:	f7fe fed4 	bl	d5c24 <malloc>
            if (!d) {
   d6e7c:	9004      	str	r0, [sp, #16]
   d6e7e:	2800      	cmp	r0, #0
   d6e80:	d045      	beq.n	d6f0e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1d4>
            move(d, data_, data_ + size_);
   d6e82:	e9d5 1200 	ldrd	r1, r2, [r5]
   d6e86:	fb0a 1202 	mla	r2, sl, r2, r1
   d6e8a:	f7ff fe71 	bl	d6b70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
   d6e8e:	9b04      	ldr	r3, [sp, #16]
    ::free(ptr);
   d6e90:	6828      	ldr	r0, [r5, #0]
   d6e92:	9304      	str	r3, [sp, #16]
   d6e94:	f7fe fece 	bl	d5c34 <free>
        data_ = d;
   d6e98:	9b04      	ldr	r3, [sp, #16]
   d6e9a:	602b      	str	r3, [r5, #0]
        capacity_ = n;
   d6e9c:	f8c5 b008 	str.w	fp, [r5, #8]
    T* const p = data_ + i;
   d6ea0:	9b01      	ldr	r3, [sp, #4]
   d6ea2:	f8d5 b000 	ldr.w	fp, [r5]
    move(p + 1, p, data_ + size_);
   d6ea6:	686a      	ldr	r2, [r5, #4]
    T* const p = data_ + i;
   d6ea8:	fb0a f303 	mul.w	r3, sl, r3
   d6eac:	eb0b 0103 	add.w	r1, fp, r3
    move(p + 1, p, data_ + size_);
   d6eb0:	f101 0014 	add.w	r0, r1, #20
   d6eb4:	fb0a b202 	mla	r2, sl, r2, fp
   d6eb8:	9104      	str	r1, [sp, #16]
    T* const p = data_ + i;
   d6eba:	9305      	str	r3, [sp, #20]
    move(p + 1, p, data_ + size_);
   d6ebc:	f7ff fe58 	bl	d6b70 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEE4moveIS3_Li0EEEvPS3_S7_S7_>
    new(p) T(std::move(value));
   d6ec0:	9904      	ldr	r1, [sp, #16]
   d6ec2:	b1a9      	cbz	r1, d6ef0 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1b6>
struct spark::detail::LogFilter::Node {
   d6ec4:	9b05      	ldr	r3, [sp, #20]
   d6ec6:	9a11      	ldr	r2, [sp, #68]	; 0x44
   d6ec8:	f84b 2003 	str.w	r2, [fp, r3]
   d6ecc:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
   d6ed0:	808b      	strh	r3, [r1, #4]
   d6ed2:	f9bd 304a 	ldrsh.w	r3, [sp, #74]	; 0x4a
   d6ed6:	80cb      	strh	r3, [r1, #6]
        capacity_(0) {
   d6ed8:	e9c1 7702 	strd	r7, r7, [r1, #8]
   d6edc:	610f      	str	r7, [r1, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6ede:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   d6ee0:	608b      	str	r3, [r1, #8]
   d6ee2:	9b14      	ldr	r3, [sp, #80]	; 0x50
      __b = _GLIBCXX_MOVE(__tmp);
   d6ee4:	9713      	str	r7, [sp, #76]	; 0x4c
      __a = _GLIBCXX_MOVE(__b);
   d6ee6:	60cb      	str	r3, [r1, #12]
   d6ee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
      __b = _GLIBCXX_MOVE(__tmp);
   d6eea:	9714      	str	r7, [sp, #80]	; 0x50
      __a = _GLIBCXX_MOVE(__b);
   d6eec:	610b      	str	r3, [r1, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d6eee:	9715      	str	r7, [sp, #84]	; 0x54
    ++size_;
   d6ef0:	686b      	ldr	r3, [r5, #4]
   d6ef2:	3301      	adds	r3, #1
   d6ef4:	606b      	str	r3, [r5, #4]
   d6ef6:	a813      	add	r0, sp, #76	; 0x4c
   d6ef8:	f7ff fc8c 	bl	d6814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6efc:	f1b8 0f00 	cmp.w	r8, #0
   d6f00:	d008      	beq.n	d6f14 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1da>
    Vector<Node> nodes;
   d6f02:	a80d      	add	r0, sp, #52	; 0x34
   d6f04:	f7ff fc86 	bl	d6814 <_ZN5spark6VectorINS_6detail9LogFilter4NodeENS_16DefaultAllocatorEED1Ev>
   d6f08:	e756      	b.n	d6db8 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x7e>
        T* d = nullptr;
   d6f0a:	4643      	mov	r3, r8
   d6f0c:	e7c0      	b.n	d6e90 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x156>
            if (!found && !pNodes->insert(index, Node(name, size))) { // Add node
   d6f0e:	f04f 0801 	mov.w	r8, #1
   d6f12:	e7f0      	b.n	d6ef6 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1bc>
    return data_[i];
   d6f14:	9b01      	ldr	r3, [sp, #4]
   d6f16:	682d      	ldr	r5, [r5, #0]
   d6f18:	fb0a 5503 	mla	r5, sl, r3, r5
            if (!*category) { // Check if it's last subcategory
   d6f1c:	9b08      	ldr	r3, [sp, #32]
   d6f1e:	781b      	ldrb	r3, [r3, #0]
   d6f20:	b92b      	cbnz	r3, d6f2e <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1f4>
                node.level = filters.at(i).level_;
   d6f22:	f8d9 3000 	ldr.w	r3, [r9]
   d6f26:	9a02      	ldr	r2, [sp, #8]
   d6f28:	4413      	add	r3, r2
   d6f2a:	7c1b      	ldrb	r3, [r3, #16]
   d6f2c:	80eb      	strh	r3, [r5, #6]
            pNodes = &node.nodes;
   d6f2e:	3508      	adds	r5, #8
        while ((name = nextSubcategoryName(category, size))) {
   d6f30:	e773      	b.n	d6e1a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0xe0>
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f32:	6821      	ldr	r1, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6f34:	6022      	str	r2, [r4, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f36:	6862      	ldr	r2, [r4, #4]
      __a = _GLIBCXX_MOVE(__b);
   d6f38:	6063      	str	r3, [r4, #4]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f3a:	68a3      	ldr	r3, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6f3c:	920b      	str	r2, [sp, #44]	; 0x2c
      __a = _GLIBCXX_MOVE(__b);
   d6f3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
      __b = _GLIBCXX_MOVE(__tmp);
   d6f40:	930c      	str	r3, [sp, #48]	; 0x30
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f42:	68e3      	ldr	r3, [r4, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6f44:	60a2      	str	r2, [r4, #8]
   d6f46:	9a0d      	ldr	r2, [sp, #52]	; 0x34
      __b = _GLIBCXX_MOVE(__tmp);
   d6f48:	930d      	str	r3, [sp, #52]	; 0x34
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f4a:	6923      	ldr	r3, [r4, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6f4c:	60e2      	str	r2, [r4, #12]
   d6f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
      __b = _GLIBCXX_MOVE(__tmp);
   d6f50:	930e      	str	r3, [sp, #56]	; 0x38
      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f52:	6963      	ldr	r3, [r4, #20]
      __a = _GLIBCXX_MOVE(__b);
   d6f54:	6122      	str	r2, [r4, #16]
   d6f56:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
      __b = _GLIBCXX_MOVE(__tmp);
   d6f58:	930f      	str	r3, [sp, #60]	; 0x3c
    level_ = level;
   d6f5a:	9b03      	ldr	r3, [sp, #12]
   d6f5c:	910a      	str	r1, [sp, #40]	; 0x28
      __a = _GLIBCXX_MOVE(__b);
   d6f5e:	6162      	str	r2, [r4, #20]
   d6f60:	7623      	strb	r3, [r4, #24]
   d6f62:	e7ce      	b.n	d6f02 <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x1c8>

000d6f64 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>:
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6f64:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
        filter_(level, filters) {
   d6f66:	4605      	mov	r5, r0
   d6f68:	4b09      	ldr	r3, [pc, #36]	; (d6f90 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE+0x2c>)
   d6f6a:	f845 3b04 	str.w	r3, [r5], #4
inline spark::LogHandler::LogHandler(LogLevel level, LogCategoryFilters filters) :
   d6f6e:	4604      	mov	r4, r0
   d6f70:	460e      	mov	r6, r1
        filter_(level, filters) {
   d6f72:	a801      	add	r0, sp, #4
   d6f74:	4611      	mov	r1, r2
   d6f76:	f7fd fb52 	bl	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6f7a:	aa01      	add	r2, sp, #4
   d6f7c:	4631      	mov	r1, r6
   d6f7e:	4628      	mov	r0, r5
   d6f80:	f7ff fedb 	bl	d6d3a <_ZN5spark6detail9LogFilterC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6f84:	a801      	add	r0, sp, #4
   d6f86:	f7fd fb09 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
}
   d6f8a:	4620      	mov	r0, r4
   d6f8c:	b004      	add	sp, #16
   d6f8e:	bd70      	pop	{r4, r5, r6, pc}
   d6f90:	000d85e8 	.word	0x000d85e8

000d6f94 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE>:
            Print *stream, const JSONValue &params) {
   d6f94:	b5f0      	push	{r4, r5, r6, r7, lr}
   d6f96:	460f      	mov	r7, r1
   d6f98:	b087      	sub	sp, #28
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6f9a:	4926      	ldr	r1, [pc, #152]	; (d7034 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa0>)
            Print *stream, const JSONValue &params) {
   d6f9c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6f9e:	4638      	mov	r0, r7
            Print *stream, const JSONValue &params) {
   d6fa0:	4616      	mov	r6, r2
   d6fa2:	461d      	mov	r5, r3
    if (strcmp(type, "JSONStreamLogHandler") == 0) {
   d6fa4:	f001 f83b 	bl	d801e <strcmp>
   d6fa8:	bb00      	cbnz	r0, d6fec <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x58>
        if (!stream) {
   d6faa:	b1e4      	cbz	r4, d6fe6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) JSONStreamLogHandler(*stream, level, std::move(filters));
   d6fac:	4629      	mov	r1, r5
   d6fae:	4668      	mov	r0, sp
   d6fb0:	f7ff fc8a 	bl	d68c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d6fb4:	4920      	ldr	r1, [pc, #128]	; (d7038 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d6fb6:	2024      	movs	r0, #36	; 0x24
   d6fb8:	f000 ff96 	bl	d7ee8 <_ZnwjRKSt9nothrow_t>
   d6fbc:	4605      	mov	r5, r0
   d6fbe:	b170      	cbz	r0, d6fde <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d6fc0:	4669      	mov	r1, sp
   d6fc2:	a803      	add	r0, sp, #12
   d6fc4:	f7fd fb2b 	bl	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d6fc8:	aa03      	add	r2, sp, #12
   d6fca:	4631      	mov	r1, r6
   d6fcc:	4628      	mov	r0, r5
   d6fce:	f7ff ffc9 	bl	d6f64 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d6fd2:	a803      	add	r0, sp, #12
   d6fd4:	f7fd fae2 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
    using StreamLogHandler::StreamLogHandler;
   d6fd8:	4b18      	ldr	r3, [pc, #96]	; (d703c <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa8>)
        stream_(&stream) {
   d6fda:	622c      	str	r4, [r5, #32]
    using StreamLogHandler::StreamLogHandler;
   d6fdc:	602b      	str	r3, [r5, #0]
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6fde:	4668      	mov	r0, sp
   d6fe0:	f7fd fadc 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d6fe4:	462c      	mov	r4, r5
}
   d6fe6:	4620      	mov	r0, r4
   d6fe8:	b007      	add	sp, #28
   d6fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    } else if (strcmp(type, "StreamLogHandler") == 0) {
   d6fec:	4914      	ldr	r1, [pc, #80]	; (d7040 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xac>)
   d6fee:	4638      	mov	r0, r7
   d6ff0:	f001 f815 	bl	d801e <strcmp>
   d6ff4:	b9e0      	cbnz	r0, d7030 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x9c>
        if (!stream) {
   d6ff6:	2c00      	cmp	r4, #0
   d6ff8:	d0f5      	beq.n	d6fe6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
        return new(std::nothrow) StreamLogHandler(*stream, level, std::move(filters));
   d6ffa:	4629      	mov	r1, r5
   d6ffc:	4668      	mov	r0, sp
   d6ffe:	f7ff fc63 	bl	d68c8 <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1EOS3_>
   d7002:	490d      	ldr	r1, [pc, #52]	; (d7038 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xa4>)
   d7004:	2024      	movs	r0, #36	; 0x24
   d7006:	f000 ff6f 	bl	d7ee8 <_ZnwjRKSt9nothrow_t>
   d700a:	4605      	mov	r5, r0
   d700c:	2800      	cmp	r0, #0
   d700e:	d0e6      	beq.n	d6fde <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
        stream_(&stream) {
   d7010:	4669      	mov	r1, sp
   d7012:	a803      	add	r0, sp, #12
   d7014:	f7fd fb03 	bl	d461e <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEC1ERKS3_>
   d7018:	aa03      	add	r2, sp, #12
   d701a:	4631      	mov	r1, r6
   d701c:	4628      	mov	r0, r5
   d701e:	f7ff ffa1 	bl	d6f64 <_ZN5spark10LogHandlerC1E8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEE>
   d7022:	a803      	add	r0, sp, #12
   d7024:	f7fd faba 	bl	d459c <_ZN5spark6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEED1Ev>
   d7028:	4b06      	ldr	r3, [pc, #24]	; (d7044 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0xb0>)
   d702a:	602b      	str	r3, [r5, #0]
   d702c:	622c      	str	r4, [r5, #32]
}
   d702e:	e7d6      	b.n	d6fde <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x4a>
            return nullptr; // Output stream is not specified
   d7030:	2400      	movs	r4, #0
   d7032:	e7d8      	b.n	d6fe6 <_ZN5spark24DefaultLogHandlerFactory13createHandlerEPKc8LogLevelNS_6VectorINS_17LogCategoryFilterENS_16DefaultAllocatorEEEP5PrintRKNS_9JSONValueE+0x52>
   d7034:	000d89b2 	.word	0x000d89b2
   d7038:	000d8b50 	.word	0x000d8b50
   d703c:	000d8a48 	.word	0x000d8a48
   d7040:	000d89b6 	.word	0x000d89b6
   d7044:	000d8a30 	.word	0x000d8a30

000d7048 <_GLOBAL__sub_I__ZN5spark3LogE>:
        name_(name) {
   d7048:	4b01      	ldr	r3, [pc, #4]	; (d7050 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d704a:	4a02      	ldr	r2, [pc, #8]	; (d7054 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d704c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d704e:	4770      	bx	lr
   d7050:	2003e584 	.word	0x2003e584
   d7054:	000d89c7 	.word	0x000d89c7

000d7058 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d705c:	9d08      	ldr	r5, [sp, #32]
    if (stream_ == &Serial && Network.listening()) {
   d705e:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::StreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7062:	4604      	mov	r4, r0
   d7064:	460e      	mov	r6, r1
   d7066:	4617      	mov	r7, r2
   d7068:	4698      	mov	r8, r3
    if (stream_ == &Serial && Network.listening()) {
   d706a:	f000 fdc1 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d706e:	4581      	cmp	r9, r0
   d7070:	d04c      	beq.n	d710c <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb4>
    if (attr.has_time) {
   d7072:	792b      	ldrb	r3, [r5, #4]
   d7074:	0719      	lsls	r1, r3, #28
   d7076:	d504      	bpl.n	d7082 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x2a>
        printf("%010u ", (unsigned)attr.time);
   d7078:	696a      	ldr	r2, [r5, #20]
   d707a:	4954      	ldr	r1, [pc, #336]	; (d71cc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x174>)
   d707c:	4620      	mov	r0, r4
   d707e:	f7ff fa40 	bl	d6502 <_ZN5spark16StreamLogHandler6printfEPKcz>
    if (category) {
   d7082:	f1b8 0f00 	cmp.w	r8, #0
   d7086:	d00d      	beq.n	d70a4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x4c>
        write('[');
   d7088:	215b      	movs	r1, #91	; 0x5b
   d708a:	4620      	mov	r0, r4
   d708c:	f7ff fa2d 	bl	d64ea <_ZN5spark16StreamLogHandler5writeEc>
        write(category);
   d7090:	4641      	mov	r1, r8
   d7092:	4620      	mov	r0, r4
   d7094:	f7ff fa1a 	bl	d64cc <_ZN5spark16StreamLogHandler5writeEPKc>
        write("] ", 2);
   d7098:	6823      	ldr	r3, [r4, #0]
   d709a:	494d      	ldr	r1, [pc, #308]	; (d71d0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x178>)
   d709c:	68db      	ldr	r3, [r3, #12]
   d709e:	2202      	movs	r2, #2
   d70a0:	4620      	mov	r0, r4
   d70a2:	4798      	blx	r3
    if (attr.has_file) {
   d70a4:	792b      	ldrb	r3, [r5, #4]
   d70a6:	07da      	lsls	r2, r3, #31
   d70a8:	d523      	bpl.n	d70f2 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x9a>
        s = extractFileName(attr.file); // Strip directory path
   d70aa:	f8d5 8008 	ldr.w	r8, [r5, #8]
    const char *s1 = strrchr(s, '/');
   d70ae:	212f      	movs	r1, #47	; 0x2f
   d70b0:	4640      	mov	r0, r8
   d70b2:	f001 f806 	bl	d80c2 <strrchr>
    if (s1) {
   d70b6:	b108      	cbz	r0, d70bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x64>
        return s1 + 1;
   d70b8:	f100 0801 	add.w	r8, r0, #1
        write(s); // File name
   d70bc:	4641      	mov	r1, r8
   d70be:	4620      	mov	r0, r4
   d70c0:	f7ff fa04 	bl	d64cc <_ZN5spark16StreamLogHandler5writeEPKc>
        if (attr.has_line) {
   d70c4:	792b      	ldrb	r3, [r5, #4]
   d70c6:	079b      	lsls	r3, r3, #30
   d70c8:	d508      	bpl.n	d70dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x84>
            write(':');
   d70ca:	213a      	movs	r1, #58	; 0x3a
   d70cc:	4620      	mov	r0, r4
   d70ce:	f7ff fa0c 	bl	d64ea <_ZN5spark16StreamLogHandler5writeEc>
            printf("%d", (int)attr.line); // Line number
   d70d2:	68ea      	ldr	r2, [r5, #12]
   d70d4:	493f      	ldr	r1, [pc, #252]	; (d71d4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x17c>)
   d70d6:	4620      	mov	r0, r4
   d70d8:	f7ff fa13 	bl	d6502 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_function) {
   d70dc:	792a      	ldrb	r2, [r5, #4]
   d70de:	6823      	ldr	r3, [r4, #0]
   d70e0:	f012 0f04 	tst.w	r2, #4
   d70e4:	68db      	ldr	r3, [r3, #12]
            write(", ", 2);
   d70e6:	bf14      	ite	ne
   d70e8:	493b      	ldrne	r1, [pc, #236]	; (d71d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
            write(": ", 2);
   d70ea:	493c      	ldreq	r1, [pc, #240]	; (d71dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
            write(", ", 2);
   d70ec:	2202      	movs	r2, #2
            write(": ", 2);
   d70ee:	4620      	mov	r0, r4
   d70f0:	4798      	blx	r3
    if (attr.has_function) {
   d70f2:	792b      	ldrb	r3, [r5, #4]
   d70f4:	0758      	lsls	r0, r3, #29
   d70f6:	d51d      	bpl.n	d7134 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xdc>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d70f8:	6929      	ldr	r1, [r5, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d70fa:	460b      	mov	r3, r1
   d70fc:	461a      	mov	r2, r3
    for (; *s; ++s) {
   d70fe:	f813 0b01 	ldrb.w	r0, [r3], #1
   d7102:	b160      	cbz	r0, d711e <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc6>
        if (*s == ' ') {
   d7104:	2820      	cmp	r0, #32
   d7106:	d108      	bne.n	d711a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc2>
            s1 = s + 1; // Skip return type
   d7108:	4619      	mov	r1, r3
   d710a:	e7f7      	b.n	d70fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
    if (stream_ == &Serial && Network.listening()) {
   d710c:	4834      	ldr	r0, [pc, #208]	; (d71e0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x188>)
   d710e:	f000 f966 	bl	d73de <_ZN5spark12NetworkClass9listeningEv>
   d7112:	2800      	cmp	r0, #0
   d7114:	d0ad      	beq.n	d7072 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a>
}
   d7116:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        } else if (*s == '(') {
   d711a:	2828      	cmp	r0, #40	; 0x28
   d711c:	d1ee      	bne.n	d70fc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa4>
        write(s, n);
   d711e:	6823      	ldr	r3, [r4, #0]
   d7120:	1a52      	subs	r2, r2, r1
   d7122:	68db      	ldr	r3, [r3, #12]
   d7124:	4620      	mov	r0, r4
   d7126:	4798      	blx	r3
        write("(): ", 4);
   d7128:	6823      	ldr	r3, [r4, #0]
   d712a:	492e      	ldr	r1, [pc, #184]	; (d71e4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x18c>)
   d712c:	68db      	ldr	r3, [r3, #12]
   d712e:	2204      	movs	r2, #4
   d7130:	4620      	mov	r0, r4
   d7132:	4798      	blx	r3
    return log_level_name(level, nullptr);
   d7134:	2100      	movs	r1, #0
   d7136:	4638      	mov	r0, r7
   d7138:	f7fe fc98 	bl	d5a6c <log_level_name>
   d713c:	4601      	mov	r1, r0
    write(s);
   d713e:	4620      	mov	r0, r4
   d7140:	f7ff f9c4 	bl	d64cc <_ZN5spark16StreamLogHandler5writeEPKc>
    write(": ", 2);
   d7144:	6823      	ldr	r3, [r4, #0]
   d7146:	4925      	ldr	r1, [pc, #148]	; (d71dc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x184>)
   d7148:	68db      	ldr	r3, [r3, #12]
   d714a:	2202      	movs	r2, #2
   d714c:	4620      	mov	r0, r4
   d714e:	4798      	blx	r3
    if (msg) {
   d7150:	b11e      	cbz	r6, d715a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x102>
        write(msg);
   d7152:	4631      	mov	r1, r6
   d7154:	4620      	mov	r0, r4
   d7156:	f7ff f9b9 	bl	d64cc <_ZN5spark16StreamLogHandler5writeEPKc>
    if (attr.has_code || attr.has_details) {
   d715a:	792b      	ldrb	r3, [r5, #4]
   d715c:	f013 0f30 	tst.w	r3, #48	; 0x30
   d7160:	d02c      	beq.n	d71bc <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>
        write(" [", 2);
   d7162:	6823      	ldr	r3, [r4, #0]
   d7164:	4920      	ldr	r1, [pc, #128]	; (d71e8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x190>)
   d7166:	68db      	ldr	r3, [r3, #12]
   d7168:	2202      	movs	r2, #2
   d716a:	4620      	mov	r0, r4
   d716c:	4798      	blx	r3
        if (attr.has_code) {
   d716e:	792b      	ldrb	r3, [r5, #4]
   d7170:	06d9      	lsls	r1, r3, #27
   d7172:	d50a      	bpl.n	d718a <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x132>
            write("code = ", 7);
   d7174:	6823      	ldr	r3, [r4, #0]
   d7176:	491d      	ldr	r1, [pc, #116]	; (d71ec <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x194>)
   d7178:	68db      	ldr	r3, [r3, #12]
   d717a:	2207      	movs	r2, #7
   d717c:	4620      	mov	r0, r4
   d717e:	4798      	blx	r3
            printf("%" PRIiPTR, (intptr_t)attr.code);
   d7180:	69aa      	ldr	r2, [r5, #24]
   d7182:	491b      	ldr	r1, [pc, #108]	; (d71f0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x198>)
   d7184:	4620      	mov	r0, r4
   d7186:	f7ff f9bc 	bl	d6502 <_ZN5spark16StreamLogHandler6printfEPKcz>
        if (attr.has_details) {
   d718a:	792b      	ldrb	r3, [r5, #4]
   d718c:	069a      	lsls	r2, r3, #26
   d718e:	d511      	bpl.n	d71b4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>
            if (attr.has_code) {
   d7190:	06db      	lsls	r3, r3, #27
   d7192:	d505      	bpl.n	d71a0 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>
                write(", ", 2);
   d7194:	6823      	ldr	r3, [r4, #0]
   d7196:	4910      	ldr	r1, [pc, #64]	; (d71d8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x180>)
   d7198:	68db      	ldr	r3, [r3, #12]
   d719a:	2202      	movs	r2, #2
   d719c:	4620      	mov	r0, r4
   d719e:	4798      	blx	r3
            write("details = ", 10);
   d71a0:	6823      	ldr	r3, [r4, #0]
   d71a2:	4914      	ldr	r1, [pc, #80]	; (d71f4 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x19c>)
   d71a4:	68db      	ldr	r3, [r3, #12]
   d71a6:	4620      	mov	r0, r4
   d71a8:	220a      	movs	r2, #10
   d71aa:	4798      	blx	r3
            write(attr.details);
   d71ac:	69e9      	ldr	r1, [r5, #28]
   d71ae:	4620      	mov	r0, r4
   d71b0:	f7ff f98c 	bl	d64cc <_ZN5spark16StreamLogHandler5writeEPKc>
        write(']');
   d71b4:	215d      	movs	r1, #93	; 0x5d
   d71b6:	4620      	mov	r0, r4
   d71b8:	f7ff f997 	bl	d64ea <_ZN5spark16StreamLogHandler5writeEc>
    write("\r\n", 2);
   d71bc:	6823      	ldr	r3, [r4, #0]
   d71be:	490e      	ldr	r1, [pc, #56]	; (d71f8 <_ZN5spark16StreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x1a0>)
   d71c0:	68db      	ldr	r3, [r3, #12]
   d71c2:	4620      	mov	r0, r4
   d71c4:	2202      	movs	r2, #2
}
   d71c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    write("\r\n", 2);
   d71ca:	4718      	bx	r3
   d71cc:	000d89cb 	.word	0x000d89cb
   d71d0:	000d89d2 	.word	0x000d89d2
   d71d4:	000d8776 	.word	0x000d8776
   d71d8:	000d89d5 	.word	0x000d89d5
   d71dc:	000d89da 	.word	0x000d89da
   d71e0:	2003e5b0 	.word	0x2003e5b0
   d71e4:	000d89d8 	.word	0x000d89d8
   d71e8:	000d89dd 	.word	0x000d89dd
   d71ec:	000d89e0 	.word	0x000d89e0
   d71f0:	000d833a 	.word	0x000d833a
   d71f4:	000d89e8 	.word	0x000d89e8
   d71f8:	000d89f3 	.word	0x000d89f3

000d71fc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes>:
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d71fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7200:	b085      	sub	sp, #20
    if (this->stream() == &Serial && Network.listening()) {
   d7202:	f8d0 9020 	ldr.w	r9, [r0, #32]
void spark::JSONStreamLogHandler::logMessage(const char *msg, LogLevel level, const char *category, const LogAttributes &attr) {
   d7206:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   d7208:	4605      	mov	r5, r0
   d720a:	460f      	mov	r7, r1
   d720c:	4690      	mov	r8, r2
   d720e:	461e      	mov	r6, r3
    if (this->stream() == &Serial && Network.listening()) {
   d7210:	f000 fcee 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d7214:	4581      	cmp	r9, r0
   d7216:	d105      	bne.n	d7224 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x28>
   d7218:	4849      	ldr	r0, [pc, #292]	; (d7340 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x144>)
   d721a:	f000 f8e0 	bl	d73de <_ZN5spark12NetworkClass9listeningEv>
   d721e:	2800      	cmp	r0, #0
   d7220:	f040 808a 	bne.w	d7338 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x13c>
    JSONStreamWriter json(*this->stream());
   d7224:	6a2b      	ldr	r3, [r5, #32]
        strm_(stream) {
   d7226:	4a47      	ldr	r2, [pc, #284]	; (d7344 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x148>)
   d7228:	9201      	str	r2, [sp, #4]
        state_(BEGIN) {
   d722a:	f04f 0900 	mov.w	r9, #0
    json.beginObject();
   d722e:	a801      	add	r0, sp, #4
        strm_(stream) {
   d7230:	9303      	str	r3, [sp, #12]
        state_(BEGIN) {
   d7232:	f88d 9008 	strb.w	r9, [sp, #8]
   d7236:	f7ff f83c 	bl	d62b2 <_ZN5spark10JSONWriter11beginObjectEv>
   d723a:	4649      	mov	r1, r9
   d723c:	4640      	mov	r0, r8
   d723e:	f7fe fc15 	bl	d5a6c <log_level_name>
    json.name("l", 1).value(s);
   d7242:	4941      	ldr	r1, [pc, #260]	; (d7348 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x14c>)
   d7244:	4680      	mov	r8, r0
   d7246:	2201      	movs	r2, #1
   d7248:	a801      	add	r0, sp, #4
   d724a:	f7ff f8bb 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d724e:	4641      	mov	r1, r8
   d7250:	f7ff f92e 	bl	d64b0 <_ZN5spark10JSONWriter5valueEPKc>
    if (msg) {
   d7254:	b13f      	cbz	r7, d7266 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x6a>
        json.name("m", 1).value(msg);
   d7256:	493d      	ldr	r1, [pc, #244]	; (d734c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x150>)
   d7258:	2201      	movs	r2, #1
   d725a:	a801      	add	r0, sp, #4
   d725c:	f7ff f8b2 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7260:	4639      	mov	r1, r7
   d7262:	f7ff f925 	bl	d64b0 <_ZN5spark10JSONWriter5valueEPKc>
    if (category) {
   d7266:	b13e      	cbz	r6, d7278 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x7c>
        json.name("c", 1).value(category);
   d7268:	4939      	ldr	r1, [pc, #228]	; (d7350 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x154>)
   d726a:	2201      	movs	r2, #1
   d726c:	a801      	add	r0, sp, #4
   d726e:	f7ff f8a9 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7272:	4631      	mov	r1, r6
   d7274:	f7ff f91c 	bl	d64b0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_file) {
   d7278:	7923      	ldrb	r3, [r4, #4]
   d727a:	07df      	lsls	r7, r3, #31
   d727c:	d50e      	bpl.n	d729c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xa0>
        s = extractFileName(attr.file); // Strip directory path
   d727e:	68a6      	ldr	r6, [r4, #8]
    const char *s1 = strrchr(s, '/');
   d7280:	212f      	movs	r1, #47	; 0x2f
   d7282:	4630      	mov	r0, r6
   d7284:	f000 ff1d 	bl	d80c2 <strrchr>
    if (s1) {
   d7288:	b100      	cbz	r0, d728c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x90>
        return s1 + 1;
   d728a:	1c46      	adds	r6, r0, #1
        json.name("f", 1).value(s);
   d728c:	4931      	ldr	r1, [pc, #196]	; (d7354 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x158>)
   d728e:	2201      	movs	r2, #1
   d7290:	a801      	add	r0, sp, #4
   d7292:	f7ff f897 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7296:	4631      	mov	r1, r6
   d7298:	f7ff f90a 	bl	d64b0 <_ZN5spark10JSONWriter5valueEPKc>
    if (attr.has_line) {
   d729c:	7923      	ldrb	r3, [r4, #4]
   d729e:	079e      	lsls	r6, r3, #30
   d72a0:	d507      	bpl.n	d72b2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xb6>
        json.name("ln", 2).value(attr.line);
   d72a2:	492d      	ldr	r1, [pc, #180]	; (d7358 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x15c>)
   d72a4:	2202      	movs	r2, #2
   d72a6:	a801      	add	r0, sp, #4
   d72a8:	f7ff f88c 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d72ac:	68e1      	ldr	r1, [r4, #12]
   d72ae:	f7ff f80d 	bl	d62cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_function) {
   d72b2:	7923      	ldrb	r3, [r4, #4]
   d72b4:	0758      	lsls	r0, r3, #29
   d72b6:	d514      	bpl.n	d72e2 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xe6>
        s = extractFuncName(attr.function, &n); // Strip argument and return types
   d72b8:	6926      	ldr	r6, [r4, #16]
const char* extractFuncName(const char *s, size_t *size) {
   d72ba:	4633      	mov	r3, r6
   d72bc:	461f      	mov	r7, r3
    for (; *s; ++s) {
   d72be:	f813 2b01 	ldrb.w	r2, [r3], #1
   d72c2:	b12a      	cbz	r2, d72d0 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd4>
        if (*s == ' ') {
   d72c4:	2a20      	cmp	r2, #32
   d72c6:	d101      	bne.n	d72cc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xd0>
            s1 = s + 1; // Skip return type
   d72c8:	461e      	mov	r6, r3
   d72ca:	e7f7      	b.n	d72bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        } else if (*s == '(') {
   d72cc:	2a28      	cmp	r2, #40	; 0x28
   d72ce:	d1f5      	bne.n	d72bc <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xc0>
        json.name("fn", 2).value(s, n);
   d72d0:	4922      	ldr	r1, [pc, #136]	; (d735c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x160>)
   d72d2:	2202      	movs	r2, #2
   d72d4:	a801      	add	r0, sp, #4
   d72d6:	f7ff f875 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d72da:	1bba      	subs	r2, r7, r6
   d72dc:	4631      	mov	r1, r6
   d72de:	f7ff f881 	bl	d63e4 <_ZN5spark10JSONWriter5valueEPKcj>
    if (attr.has_time) {
   d72e2:	7923      	ldrb	r3, [r4, #4]
   d72e4:	0719      	lsls	r1, r3, #28
   d72e6:	d507      	bpl.n	d72f8 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0xfc>
        json.name("t", 1).value((unsigned)attr.time);
   d72e8:	491d      	ldr	r1, [pc, #116]	; (d7360 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x164>)
   d72ea:	2201      	movs	r2, #1
   d72ec:	a801      	add	r0, sp, #4
   d72ee:	f7ff f869 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d72f2:	6961      	ldr	r1, [r4, #20]
   d72f4:	f7fe fffc 	bl	d62f0 <_ZN5spark10JSONWriter5valueEj>
    if (attr.has_code) {
   d72f8:	7923      	ldrb	r3, [r4, #4]
   d72fa:	06da      	lsls	r2, r3, #27
   d72fc:	d508      	bpl.n	d7310 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x114>
        json.name("code", 4).value((int)attr.code);
   d72fe:	2204      	movs	r2, #4
   d7300:	4918      	ldr	r1, [pc, #96]	; (d7364 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x168>)
   d7302:	eb0d 0002 	add.w	r0, sp, r2
   d7306:	f7ff f85d 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d730a:	69a1      	ldr	r1, [r4, #24]
   d730c:	f7fe ffde 	bl	d62cc <_ZN5spark10JSONWriter5valueEi>
    if (attr.has_details) {
   d7310:	7923      	ldrb	r3, [r4, #4]
   d7312:	069b      	lsls	r3, r3, #26
   d7314:	d507      	bpl.n	d7326 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x12a>
        json.name("detail", 6).value(attr.details);
   d7316:	4914      	ldr	r1, [pc, #80]	; (d7368 <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x16c>)
   d7318:	2206      	movs	r2, #6
   d731a:	a801      	add	r0, sp, #4
   d731c:	f7ff f852 	bl	d63c4 <_ZN5spark10JSONWriter4nameEPKcj>
   d7320:	69e1      	ldr	r1, [r4, #28]
   d7322:	f7ff f8c5 	bl	d64b0 <_ZN5spark10JSONWriter5valueEPKc>
    json.endObject();
   d7326:	a801      	add	r0, sp, #4
   d7328:	f7fe ffad 	bl	d6286 <_ZN5spark10JSONWriter9endObjectEv>
    this->stream()->write((const uint8_t*)"\r\n", 2);
   d732c:	6a28      	ldr	r0, [r5, #32]
   d732e:	490f      	ldr	r1, [pc, #60]	; (d736c <_ZN5spark20JSONStreamLogHandler10logMessageEPKc8LogLevelS2_RK13LogAttributes+0x170>)
   d7330:	6803      	ldr	r3, [r0, #0]
   d7332:	2202      	movs	r2, #2
   d7334:	68db      	ldr	r3, [r3, #12]
   d7336:	4798      	blx	r3
}
   d7338:	b005      	add	sp, #20
   d733a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d733e:	bf00      	nop
   d7340:	2003e5b0 	.word	0x2003e5b0
   d7344:	000d8a18 	.word	0x000d8a18
   d7348:	000d89a8 	.word	0x000d89a8
   d734c:	000d89f6 	.word	0x000d89f6
   d7350:	000d89f8 	.word	0x000d89f8
   d7354:	000d89fa 	.word	0x000d89fa
   d7358:	000d89fc 	.word	0x000d89fc
   d735c:	000d89ff 	.word	0x000d89ff
   d7360:	000d8a02 	.word	0x000d8a02
   d7364:	000d8a04 	.word	0x000d8a04
   d7368:	000d8a09 	.word	0x000d8a09
   d736c:	000d89f3 	.word	0x000d89f3

000d7370 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7370:	2300      	movs	r3, #0
   d7372:	6840      	ldr	r0, [r0, #4]
   d7374:	461a      	mov	r2, r3
   d7376:	f7fe bbf5 	b.w	d5b64 <network_connect>

000d737a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d737a:	6840      	ldr	r0, [r0, #4]
   d737c:	2200      	movs	r2, #0
   d737e:	2102      	movs	r1, #2
   d7380:	f7fe bc00 	b.w	d5b84 <network_disconnect>

000d7384 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7384:	2200      	movs	r2, #0
   d7386:	6840      	ldr	r0, [r0, #4]
   d7388:	4611      	mov	r1, r2
   d738a:	f7fe bbf3 	b.w	d5b74 <network_connecting>

000d738e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d738e:	2200      	movs	r2, #0
   d7390:	6840      	ldr	r0, [r0, #4]
   d7392:	4611      	mov	r1, r2
   d7394:	f7fe bbfe 	b.w	d5b94 <network_ready>

000d7398 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7398:	2300      	movs	r3, #0
   d739a:	6840      	ldr	r0, [r0, #4]
   d739c:	461a      	mov	r2, r3
   d739e:	4619      	mov	r1, r3
   d73a0:	f7fe bc00 	b.w	d5ba4 <network_on>

000d73a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d73a4:	2300      	movs	r3, #0
   d73a6:	6840      	ldr	r0, [r0, #4]
   d73a8:	461a      	mov	r2, r3
   d73aa:	4619      	mov	r1, r3
   d73ac:	f7fe bc02 	b.w	d5bb4 <network_off>

000d73b0 <_ZN5spark12NetworkClass4isOnEv>:
}

bool NetworkClass::isOn() {
    return network_is_on(*this, nullptr);
   d73b0:	6840      	ldr	r0, [r0, #4]
   d73b2:	2100      	movs	r1, #0
   d73b4:	f7fe bc26 	b.w	d5c04 <network_is_on>

000d73b8 <_ZN5spark12NetworkClass5isOffEv>:
}

bool NetworkClass::isOff() {
    return network_is_off(*this, nullptr);
   d73b8:	6840      	ldr	r0, [r0, #4]
   d73ba:	2100      	movs	r1, #0
   d73bc:	f7fe bc2a 	b.w	d5c14 <network_is_off>

000d73c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d73c0:	6840      	ldr	r0, [r0, #4]
   d73c2:	2200      	movs	r2, #0
   d73c4:	f081 0101 	eor.w	r1, r1, #1
   d73c8:	f7fe bbfc 	b.w	d5bc4 <network_listen>

000d73cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d73cc:	6840      	ldr	r0, [r0, #4]
   d73ce:	2200      	movs	r2, #0
   d73d0:	f7fe bc08 	b.w	d5be4 <network_set_listen_timeout>

000d73d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d73d4:	2200      	movs	r2, #0
   d73d6:	6840      	ldr	r0, [r0, #4]
   d73d8:	4611      	mov	r1, r2
   d73da:	f7fe bc0b 	b.w	d5bf4 <network_get_listen_timeout>

000d73de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d73de:	2200      	movs	r2, #0
   d73e0:	6840      	ldr	r0, [r0, #4]
   d73e2:	4611      	mov	r1, r2
   d73e4:	f7fe bbf6 	b.w	d5bd4 <network_listening>

000d73e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d73e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d73ec:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d73ee:	b095      	sub	sp, #84	; 0x54
   d73f0:	4616      	mov	r6, r2
   d73f2:	460d      	mov	r5, r1
   d73f4:	4607      	mov	r7, r0
    IPAddress addr;
   d73f6:	f7fe fde7 	bl	d5fc8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d73fa:	4621      	mov	r1, r4
   d73fc:	2218      	movs	r2, #24
   d73fe:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7400:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7402:	f000 fdc9 	bl	d7f98 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7406:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7408:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d740c:	4621      	mov	r1, r4
   d740e:	466b      	mov	r3, sp
   d7410:	aa0c      	add	r2, sp, #48	; 0x30
   d7412:	4630      	mov	r0, r6
   d7414:	f7fe fa72 	bl	d58fc <netdb_getaddrinfo>
    if (!r) {
   d7418:	4604      	mov	r4, r0
   d741a:	2800      	cmp	r0, #0
   d741c:	d146      	bne.n	d74ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d741e:	4602      	mov	r2, r0
   d7420:	2101      	movs	r1, #1
   d7422:	6868      	ldr	r0, [r5, #4]
   d7424:	f7fe fbb6 	bl	d5b94 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7428:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d742a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d742c:	4622      	mov	r2, r4
   d742e:	6868      	ldr	r0, [r5, #4]
   d7430:	f7fe fbb0 	bl	d5b94 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7434:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7436:	4681      	mov	r9, r0
        bool ok = false;
   d7438:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d743a:	2e00      	cmp	r6, #0
   d743c:	d036      	beq.n	d74ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d743e:	2900      	cmp	r1, #0
   d7440:	d134      	bne.n	d74ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7442:	6873      	ldr	r3, [r6, #4]
   d7444:	2b02      	cmp	r3, #2
   d7446:	d003      	beq.n	d7450 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7448:	2b0a      	cmp	r3, #10
   d744a:	d00b      	beq.n	d7464 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d744c:	69f6      	ldr	r6, [r6, #28]
   d744e:	e7f4      	b.n	d743a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7450:	f1b8 0f00 	cmp.w	r8, #0
   d7454:	d004      	beq.n	d7460 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7456:	6971      	ldr	r1, [r6, #20]
   d7458:	4638      	mov	r0, r7
   d745a:	3104      	adds	r1, #4
   d745c:	f7fe fde1 	bl	d6022 <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7460:	4641      	mov	r1, r8
   d7462:	e7f3      	b.n	d744c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7464:	f1b9 0f00 	cmp.w	r9, #0
   d7468:	d101      	bne.n	d746e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d746a:	4649      	mov	r1, r9
   d746c:	e7ee      	b.n	d744c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d746e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7470:	2210      	movs	r2, #16
   d7472:	a801      	add	r0, sp, #4
   d7474:	f000 fd90 	bl	d7f98 <memset>
                    a.v = 6;
   d7478:	2306      	movs	r3, #6
   d747a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d747e:	ad01      	add	r5, sp, #4
   d7480:	f104 0308 	add.w	r3, r4, #8
   d7484:	3418      	adds	r4, #24
   d7486:	6818      	ldr	r0, [r3, #0]
   d7488:	6859      	ldr	r1, [r3, #4]
   d748a:	462a      	mov	r2, r5
   d748c:	c203      	stmia	r2!, {r0, r1}
   d748e:	3308      	adds	r3, #8
   d7490:	42a3      	cmp	r3, r4
   d7492:	4615      	mov	r5, r2
   d7494:	d1f7      	bne.n	d7486 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7496:	a901      	add	r1, sp, #4
   d7498:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d749a:	ad07      	add	r5, sp, #28
   d749c:	f7fe fda2 	bl	d5fe4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d74a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d74a2:	1d3c      	adds	r4, r7, #4
   d74a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d74a6:	682b      	ldr	r3, [r5, #0]
   d74a8:	7023      	strb	r3, [r4, #0]
   d74aa:	e7de      	b.n	d746a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d74ac:	9800      	ldr	r0, [sp, #0]
   d74ae:	f7fe fa1d 	bl	d58ec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d74b2:	4638      	mov	r0, r7
   d74b4:	b015      	add	sp, #84	; 0x54
   d74b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d74bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d74bc:	4b02      	ldr	r3, [pc, #8]	; (d74c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d74be:	4a03      	ldr	r2, [pc, #12]	; (d74cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d74c0:	601a      	str	r2, [r3, #0]
   d74c2:	2200      	movs	r2, #0
   d74c4:	605a      	str	r2, [r3, #4]

} // spark
   d74c6:	4770      	bx	lr
   d74c8:	2003e5b0 	.word	0x2003e5b0
   d74cc:	000d8a90 	.word	0x000d8a90

000d74d0 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d74d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d74d2:	4606      	mov	r6, r0
   d74d4:	460d      	mov	r5, r1
  size_t n = 0;
   d74d6:	188f      	adds	r7, r1, r2
   d74d8:	2400      	movs	r4, #0
  while (size--) {
   d74da:	42bd      	cmp	r5, r7
   d74dc:	d00c      	beq.n	d74f8 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d74de:	6833      	ldr	r3, [r6, #0]
   d74e0:	f815 1b01 	ldrb.w	r1, [r5], #1
   d74e4:	689b      	ldr	r3, [r3, #8]
   d74e6:	4630      	mov	r0, r6
   d74e8:	4798      	blx	r3
     if (chunk>=0)
   d74ea:	1e03      	subs	r3, r0, #0
   d74ec:	db01      	blt.n	d74f2 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d74ee:	441c      	add	r4, r3
  while (size--) {
   d74f0:	e7f3      	b.n	d74da <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d74f2:	2c00      	cmp	r4, #0
   d74f4:	bf08      	it	eq
   d74f6:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d74f8:	4620      	mov	r0, r4
   d74fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d74fc <_ZN5Print5writeEPKc>:
    size_t write(const char *str) {
   d74fc:	b513      	push	{r0, r1, r4, lr}
   d74fe:	4604      	mov	r4, r0
    }
   d7500:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d7502:	b159      	cbz	r1, d751c <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d7504:	9101      	str	r1, [sp, #4]
   d7506:	f000 fd9c 	bl	d8042 <strlen>
   d750a:	6823      	ldr	r3, [r4, #0]
   d750c:	9901      	ldr	r1, [sp, #4]
   d750e:	68db      	ldr	r3, [r3, #12]
   d7510:	4602      	mov	r2, r0
   d7512:	4620      	mov	r0, r4
    }
   d7514:	b002      	add	sp, #8
   d7516:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d751a:	4718      	bx	r3
    }
   d751c:	b002      	add	sp, #8
   d751e:	bd10      	pop	{r4, pc}

000d7520 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7520:	6803      	ldr	r3, [r0, #0]
   d7522:	689b      	ldr	r3, [r3, #8]
   d7524:	4718      	bx	r3

000d7526 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d7526:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d7528:	210d      	movs	r1, #13
{
   d752a:	4605      	mov	r5, r0
  size_t n = print('\r');
   d752c:	f7ff fff8 	bl	d7520 <_ZN5Print5printEc>
  n += print('\n');
   d7530:	210a      	movs	r1, #10
  size_t n = print('\r');
   d7532:	4604      	mov	r4, r0
  n += print('\n');
   d7534:	4628      	mov	r0, r5
   d7536:	f7ff fff3 	bl	d7520 <_ZN5Print5printEc>
  return n;
}
   d753a:	4420      	add	r0, r4
   d753c:	bd38      	pop	{r3, r4, r5, pc}

000d753e <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d753e:	b538      	push	{r3, r4, r5, lr}
   d7540:	4605      	mov	r5, r0
  return write(str);
   d7542:	f7ff ffdb 	bl	d74fc <_ZN5Print5writeEPKc>
   d7546:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d7548:	4628      	mov	r0, r5
   d754a:	f7ff ffec 	bl	d7526 <_ZN5Print7printlnEv>
  return n;
}
   d754e:	4420      	add	r0, r4
   d7550:	bd38      	pop	{r3, r4, r5, pc}

000d7552 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d7552:	b530      	push	{r4, r5, lr}
   d7554:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7556:	2300      	movs	r3, #0
   d7558:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d755c:	2a01      	cmp	r2, #1
   d755e:	bf98      	it	ls
   d7560:	220a      	movls	r2, #10
   d7562:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d7564:	460d      	mov	r5, r1
   d7566:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d756a:	fb01 5312 	mls	r3, r1, r2, r5
   d756e:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d7572:	2b09      	cmp	r3, #9
   d7574:	bf94      	ite	ls
   d7576:	3330      	addls	r3, #48	; 0x30
   d7578:	3337      	addhi	r3, #55	; 0x37
   d757a:	b2db      	uxtb	r3, r3
  } while(n);
   d757c:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d757e:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d7582:	d9ef      	bls.n	d7564 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d7584:	4621      	mov	r1, r4
   d7586:	f7ff ffb9 	bl	d74fc <_ZN5Print5writeEPKc>
}
   d758a:	b00b      	add	sp, #44	; 0x2c
   d758c:	bd30      	pop	{r4, r5, pc}

000d758e <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d758e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7592:	b086      	sub	sp, #24
   d7594:	af00      	add	r7, sp, #0
   d7596:	4605      	mov	r5, r0
   d7598:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d759a:	1d38      	adds	r0, r7, #4
   d759c:	2114      	movs	r1, #20
{
   d759e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d75a0:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d75a2:	f7fe fb67 	bl	d5c74 <vsnprintf>

    if (n<bufsize)
   d75a6:	2813      	cmp	r0, #19
   d75a8:	d80e      	bhi.n	d75c8 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d75aa:	1d39      	adds	r1, r7, #4
   d75ac:	4628      	mov	r0, r5
   d75ae:	f7ff ffa5 	bl	d74fc <_ZN5Print5writeEPKc>
   d75b2:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d75b4:	b11e      	cbz	r6, d75be <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d75b6:	4628      	mov	r0, r5
   d75b8:	f7ff ffb5 	bl	d7526 <_ZN5Print7printlnEv>
   d75bc:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d75be:	4620      	mov	r0, r4
   d75c0:	3718      	adds	r7, #24
   d75c2:	46bd      	mov	sp, r7
   d75c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d75c8:	f100 0308 	add.w	r3, r0, #8
   d75cc:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d75d0:	46e8      	mov	r8, sp
        char bigger[n+1];
   d75d2:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d75d6:	4622      	mov	r2, r4
   d75d8:	1c41      	adds	r1, r0, #1
   d75da:	683b      	ldr	r3, [r7, #0]
   d75dc:	4668      	mov	r0, sp
   d75de:	f7fe fb49 	bl	d5c74 <vsnprintf>
  return write(str);
   d75e2:	4669      	mov	r1, sp
   d75e4:	4628      	mov	r0, r5
   d75e6:	f7ff ff89 	bl	d74fc <_ZN5Print5writeEPKc>
   d75ea:	4604      	mov	r4, r0
   d75ec:	46c5      	mov	sp, r8
   d75ee:	e7e1      	b.n	d75b4 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d75f0 <_GLOBAL__sub_I_RGB>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
   d75f0:	4b01      	ldr	r3, [pc, #4]	; (d75f8 <_GLOBAL__sub_I_RGB+0x8>)
   d75f2:	2200      	movs	r2, #0
   d75f4:	609a      	str	r2, [r3, #8]
{
    RGBClass* const d = static_cast<RGBClass*>(data);
    if (d->changeHandler_) {
        d->changeHandler_(r, g, b);
    }
}
   d75f6:	4770      	bx	lr
   d75f8:	2003e5b8 	.word	0x2003e5b8

000d75fc <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d75fc:	b510      	push	{r4, lr}
   d75fe:	4604      	mov	r4, r0
   d7600:	4608      	mov	r0, r1
{
    _spi = spi;
   d7602:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d7604:	f7fe f982 	bl	d590c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d7608:	2300      	movs	r3, #0
   d760a:	6063      	str	r3, [r4, #4]
}
   d760c:	4620      	mov	r0, r4
   d760e:	bd10      	pop	{r4, pc}

000d7610 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d7610:	b510      	push	{r4, lr}
   d7612:	4604      	mov	r4, r0
{
	free(buffer);
   d7614:	6800      	ldr	r0, [r0, #0]
   d7616:	f7fe fb0d 	bl	d5c34 <free>
}
   d761a:	4620      	mov	r0, r4
   d761c:	bd10      	pop	{r4, pc}

000d761e <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d761e:	b510      	push	{r4, lr}
   d7620:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d7622:	6800      	ldr	r0, [r0, #0]
   d7624:	b108      	cbz	r0, d762a <_ZN6String10invalidateEv+0xc>
   d7626:	f7fe fb05 	bl	d5c34 <free>
	buffer = NULL;
   d762a:	2300      	movs	r3, #0
	capacity = len = 0;
   d762c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d7630:	6023      	str	r3, [r4, #0]
}
   d7632:	bd10      	pop	{r4, pc}

000d7634 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d7634:	b538      	push	{r3, r4, r5, lr}
   d7636:	4604      	mov	r4, r0
   d7638:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d763a:	6800      	ldr	r0, [r0, #0]
   d763c:	3101      	adds	r1, #1
   d763e:	f7fe fb01 	bl	d5c44 <realloc>
	if (newbuffer) {
   d7642:	b110      	cbz	r0, d764a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7644:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d7648:	2001      	movs	r0, #1
	}
	return 0;
}
   d764a:	bd38      	pop	{r3, r4, r5, pc}

000d764c <_ZN6String7reserveEj>:
{
   d764c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d764e:	6803      	ldr	r3, [r0, #0]
{
   d7650:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7652:	b123      	cbz	r3, d765e <_ZN6String7reserveEj+0x12>
   d7654:	6843      	ldr	r3, [r0, #4]
   d7656:	428b      	cmp	r3, r1
   d7658:	d301      	bcc.n	d765e <_ZN6String7reserveEj+0x12>
   d765a:	2001      	movs	r0, #1
}
   d765c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d765e:	4620      	mov	r0, r4
   d7660:	f7ff ffe8 	bl	d7634 <_ZN6String12changeBufferEj>
   d7664:	2800      	cmp	r0, #0
   d7666:	d0f9      	beq.n	d765c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d7668:	68a3      	ldr	r3, [r4, #8]
   d766a:	2b00      	cmp	r3, #0
   d766c:	d1f5      	bne.n	d765a <_ZN6String7reserveEj+0xe>
   d766e:	6822      	ldr	r2, [r4, #0]
   d7670:	7013      	strb	r3, [r2, #0]
   d7672:	e7f2      	b.n	d765a <_ZN6String7reserveEj+0xe>

000d7674 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7674:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d7676:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d7678:	4611      	mov	r1, r2
   d767a:	9201      	str	r2, [sp, #4]
{
   d767c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d767e:	f7ff ffe5 	bl	d764c <_ZN6String7reserveEj>
   d7682:	9a01      	ldr	r2, [sp, #4]
   d7684:	b928      	cbnz	r0, d7692 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d7686:	4620      	mov	r0, r4
   d7688:	f7ff ffc9 	bl	d761e <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d768c:	4620      	mov	r0, r4
   d768e:	b003      	add	sp, #12
   d7690:	bd30      	pop	{r4, r5, pc}
	len = length;
   d7692:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d7694:	4629      	mov	r1, r5
   d7696:	6820      	ldr	r0, [r4, #0]
   d7698:	f000 fc56 	bl	d7f48 <memcpy>
	buffer[len] = 0;
   d769c:	6822      	ldr	r2, [r4, #0]
   d769e:	68a3      	ldr	r3, [r4, #8]
   d76a0:	2100      	movs	r1, #0
   d76a2:	54d1      	strb	r1, [r2, r3]
	return *this;
   d76a4:	e7f2      	b.n	d768c <_ZN6String4copyEPKcj+0x18>

000d76a6 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d76a6:	2300      	movs	r3, #0
String::String(const char *cstr)
   d76a8:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d76aa:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d76ae:	4604      	mov	r4, r0
	len = 0;
   d76b0:	6083      	str	r3, [r0, #8]
	flags = 0;
   d76b2:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d76b4:	b141      	cbz	r1, d76c8 <_ZN6StringC1EPKc+0x22>
   d76b6:	4608      	mov	r0, r1
   d76b8:	9101      	str	r1, [sp, #4]
   d76ba:	f000 fcc2 	bl	d8042 <strlen>
   d76be:	9901      	ldr	r1, [sp, #4]
   d76c0:	4602      	mov	r2, r0
   d76c2:	4620      	mov	r0, r4
   d76c4:	f7ff ffd6 	bl	d7674 <_ZN6String4copyEPKcj>
}
   d76c8:	4620      	mov	r0, r4
   d76ca:	b002      	add	sp, #8
   d76cc:	bd10      	pop	{r4, pc}

000d76ce <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d76ce:	b538      	push	{r3, r4, r5, lr}
   d76d0:	4605      	mov	r5, r0
	if (buffer) {
   d76d2:	6800      	ldr	r0, [r0, #0]
{
   d76d4:	460c      	mov	r4, r1
	if (buffer) {
   d76d6:	b168      	cbz	r0, d76f4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d76d8:	686a      	ldr	r2, [r5, #4]
   d76da:	688b      	ldr	r3, [r1, #8]
   d76dc:	429a      	cmp	r2, r3
   d76de:	d307      	bcc.n	d76f0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d76e0:	6809      	ldr	r1, [r1, #0]
   d76e2:	f000 fca6 	bl	d8032 <strcpy>
			len = rhs.len;
   d76e6:	68a3      	ldr	r3, [r4, #8]
   d76e8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d76ea:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d76ec:	60a3      	str	r3, [r4, #8]
}
   d76ee:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d76f0:	f7fe faa0 	bl	d5c34 <free>
	buffer = rhs.buffer;
   d76f4:	6823      	ldr	r3, [r4, #0]
   d76f6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d76f8:	6863      	ldr	r3, [r4, #4]
   d76fa:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d76fc:	68a3      	ldr	r3, [r4, #8]
   d76fe:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d7700:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d7702:	e9c4 3300 	strd	r3, r3, [r4]
   d7706:	e7f1      	b.n	d76ec <_ZN6String4moveERS_+0x1e>

000d7708 <_ZN6StringC1EOS_>:
String::String(String &&rval)
   d7708:	b510      	push	{r4, lr}
	buffer = NULL;
   d770a:	2300      	movs	r3, #0
	capacity = 0;
   d770c:	e9c0 3300 	strd	r3, r3, [r0]
String::String(String &&rval)
   d7710:	4604      	mov	r4, r0
	len = 0;
   d7712:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7714:	7303      	strb	r3, [r0, #12]
	move(rval);
   d7716:	f7ff ffda 	bl	d76ce <_ZN6String4moveERS_>
}
   d771a:	4620      	mov	r0, r4
   d771c:	bd10      	pop	{r4, pc}

000d771e <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d771e:	4288      	cmp	r0, r1
{
   d7720:	b510      	push	{r4, lr}
   d7722:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d7724:	d005      	beq.n	d7732 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d7726:	680b      	ldr	r3, [r1, #0]
   d7728:	b12b      	cbz	r3, d7736 <_ZN6StringaSERKS_+0x18>
   d772a:	688a      	ldr	r2, [r1, #8]
   d772c:	4619      	mov	r1, r3
   d772e:	f7ff ffa1 	bl	d7674 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d7732:	4620      	mov	r0, r4
   d7734:	bd10      	pop	{r4, pc}
	else invalidate();
   d7736:	f7ff ff72 	bl	d761e <_ZN6String10invalidateEv>
   d773a:	e7fa      	b.n	d7732 <_ZN6StringaSERKS_+0x14>

000d773c <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d773c:	b510      	push	{r4, lr}
	buffer = NULL;
   d773e:	2300      	movs	r3, #0
String::String(const String &value)
   d7740:	4604      	mov	r4, r0
	capacity = 0;
   d7742:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d7746:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7748:	7303      	strb	r3, [r0, #12]
	*this = value;
   d774a:	f7ff ffe8 	bl	d771e <_ZN6StringaSERKS_>
}
   d774e:	4620      	mov	r0, r4
   d7750:	bd10      	pop	{r4, pc}
	...

000d7754 <_ZN6String6formatEPKcz>:
    StringPrintableHelper help(*this);
    printable.printTo(help);
}

String String::format(const char* fmt, ...)
{
   d7754:	b40e      	push	{r1, r2, r3}
   d7756:	b570      	push	{r4, r5, r6, lr}
   d7758:	b087      	sub	sp, #28
   d775a:	ad0b      	add	r5, sp, #44	; 0x2c
   d775c:	4604      	mov	r4, r0
   d775e:	f855 2b04 	ldr.w	r2, [r5], #4
    va_list marker;
    va_start(marker, fmt);
    const int bufsize = 5;
    char test[bufsize];
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7762:	9201      	str	r2, [sp, #4]
   d7764:	462b      	mov	r3, r5
   d7766:	2105      	movs	r1, #5
   d7768:	a804      	add	r0, sp, #16
    va_start(marker, fmt);
   d776a:	9503      	str	r5, [sp, #12]
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d776c:	f7fe fa82 	bl	d5c74 <vsnprintf>
    va_end(marker);

    String result;
   d7770:	490b      	ldr	r1, [pc, #44]	; (d77a0 <_ZN6String6formatEPKcz+0x4c>)
    size_t n = vsnprintf(test, bufsize, fmt, marker);
   d7772:	4606      	mov	r6, r0
    String result;
   d7774:	4620      	mov	r0, r4
   d7776:	f7ff ff96 	bl	d76a6 <_ZN6StringC1EPKc>
    result.reserve(n);  // internally adds +1 for null terminator
   d777a:	4631      	mov	r1, r6
   d777c:	4620      	mov	r0, r4
   d777e:	f7ff ff65 	bl	d764c <_ZN6String7reserveEj>
    if (result.buffer) {
   d7782:	6820      	ldr	r0, [r4, #0]
   d7784:	b130      	cbz	r0, d7794 <_ZN6String6formatEPKcz+0x40>
        va_start(marker, fmt);
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d7786:	9a01      	ldr	r2, [sp, #4]
        va_start(marker, fmt);
   d7788:	9503      	str	r5, [sp, #12]
        n = vsnprintf(result.buffer, n+1, fmt, marker);
   d778a:	462b      	mov	r3, r5
   d778c:	1c71      	adds	r1, r6, #1
   d778e:	f7fe fa71 	bl	d5c74 <vsnprintf>
        va_end(marker);
        result.len = n;
   d7792:	60a0      	str	r0, [r4, #8]
    }
    return result;
}
   d7794:	4620      	mov	r0, r4
   d7796:	b007      	add	sp, #28
   d7798:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d779c:	b003      	add	sp, #12
   d779e:	4770      	bx	lr
   d77a0:	000d89f5 	.word	0x000d89f5

000d77a4 <_GLOBAL__sub_I_System>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d77a4:	4b05      	ldr	r3, [pc, #20]	; (d77bc <_GLOBAL__sub_I_System+0x18>)
   d77a6:	2202      	movs	r2, #2
   d77a8:	601a      	str	r2, [r3, #0]

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d77aa:	4b05      	ldr	r3, [pc, #20]	; (d77c0 <_GLOBAL__sub_I_System+0x1c>)
    SleepResult() {}
   d77ac:	4a05      	ldr	r2, [pc, #20]	; (d77c4 <_GLOBAL__sub_I_System+0x20>)
   d77ae:	609a      	str	r2, [r3, #8]
              error_(SYSTEM_ERROR_NONE) {
   d77b0:	2000      	movs	r0, #0
   d77b2:	6018      	str	r0, [r3, #0]
   d77b4:	8098      	strh	r0, [r3, #4]
    SleepResult() {}
   d77b6:	7198      	strb	r0, [r3, #6]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d77b8:	f7fe b970 	b.w	d5a9c <set_system_mode>
   d77bc:	2003e5d4 	.word	0x2003e5d4
   d77c0:	2003e5c8 	.word	0x2003e5c8
   d77c4:	ffff0000 	.word	0xffff0000

000d77c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>:
    bool syncTimePending(void)
    {
        return connected() && spark_sync_time_pending(nullptr);
    }

    bool syncTimeDone(void)
   d77c8:	b508      	push	{r3, lr}
    {
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77ca:	2000      	movs	r0, #0
   d77cc:	f7fe f9ba 	bl	d5b44 <spark_sync_time_pending>
   d77d0:	b128      	cbz	r0, d77de <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
   d77d2:	f7fe f9af 	bl	d5b34 <spark_cloud_flag_connected>
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77d6:	f080 0001 	eor.w	r0, r0, #1
   d77da:	b2c0      	uxtb	r0, r0
    }
   d77dc:	bd08      	pop	{r3, pc}
        return !spark_sync_time_pending(nullptr) || disconnected();
   d77de:	2001      	movs	r0, #1
   d77e0:	e7fc      	b.n	d77dc <_ZN10CloudClass12syncTimeDoneEv.isra.0+0x14>

000d77e2 <_ZN9TimeClass7setTimeEx>:
    return !(dst_current_cache == 0);
}

/* set the given time as unix/rtc time */
void TimeClass::setTime(time_t t)
{
   d77e2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   d77e4:	4602      	mov	r2, r0
   d77e6:	460b      	mov	r3, r1
    struct timeval tv = {
        .tv_sec = t,
        .tv_usec = 0
    };
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d77e8:	4668      	mov	r0, sp
    struct timeval tv = {
   d77ea:	2100      	movs	r1, #0
    };
   d77ec:	e9cd 2300 	strd	r2, r3, [sp]
    struct timeval tv = {
   d77f0:	e9cd 1102 	strd	r1, r1, [sp, #8]
    if (!hal_rtc_set_time(&tv, nullptr)) {
   d77f4:	f7fd ffe2 	bl	d57bc <hal_rtc_set_time>
   d77f8:	4602      	mov	r2, r0
   d77fa:	b910      	cbnz	r0, d7802 <_ZN9TimeClass7setTimeEx+0x20>
        system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
   d77fc:	4601      	mov	r1, r0
   d77fe:	f7fe f975 	bl	d5aec <system_notify_time_changed>
    }
}
   d7802:	b005      	add	sp, #20
   d7804:	f85d fb04 	ldr.w	pc, [sp], #4

000d7808 <_ZN9TimeClass7timeStrEx>:

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
   d7808:	b530      	push	{r4, r5, lr}
   d780a:	4604      	mov	r4, r0
    t += time_zone_cache;
   d780c:	4818      	ldr	r0, [pc, #96]	; (d7870 <_ZN9TimeClass7timeStrEx+0x68>)
   d780e:	e9d0 1000 	ldrd	r1, r0, [r0]
   d7812:	1852      	adds	r2, r2, r1
   d7814:	eb40 0303 	adc.w	r3, r0, r3
    t += dst_current_cache;
   d7818:	4816      	ldr	r0, [pc, #88]	; (d7874 <_ZN9TimeClass7timeStrEx+0x6c>)
   d781a:	e9d0 1000 	ldrd	r1, r0, [r0]
   d781e:	1852      	adds	r2, r2, r1
{
   d7820:	b093      	sub	sp, #76	; 0x4c
    t += dst_current_cache;
   d7822:	eb40 0303 	adc.w	r3, r0, r3
   d7826:	e9cd 2300 	strd	r2, r3, [sp]
    struct tm calendar_time = {};
   d782a:	2224      	movs	r2, #36	; 0x24
   d782c:	eb0d 0002 	add.w	r0, sp, r2
   d7830:	2100      	movs	r1, #0
   d7832:	f000 fbb1 	bl	d7f98 <memset>
    localtime_r(&t, &calendar_time);
    char ascstr[26] = {};
   d7836:	2500      	movs	r5, #0
    localtime_r(&t, &calendar_time);
   d7838:	a909      	add	r1, sp, #36	; 0x24
   d783a:	4668      	mov	r0, sp
   d783c:	f7fe fa32 	bl	d5ca4 <localtime_r>
    char ascstr[26] = {};
   d7840:	2216      	movs	r2, #22
   d7842:	4629      	mov	r1, r5
   d7844:	a803      	add	r0, sp, #12
   d7846:	9502      	str	r5, [sp, #8]
   d7848:	f000 fba6 	bl	d7f98 <memset>
    asctime_r(&calendar_time, ascstr);
   d784c:	a902      	add	r1, sp, #8
   d784e:	a809      	add	r0, sp, #36	; 0x24
   d7850:	f000 fb4e 	bl	d7ef0 <asctime_r>
    int len = strlen(ascstr);
   d7854:	a802      	add	r0, sp, #8
   d7856:	f000 fbf4 	bl	d8042 <strlen>
    ascstr[len-1] = 0; // remove final newline
   d785a:	ab12      	add	r3, sp, #72	; 0x48
   d785c:	4418      	add	r0, r3
    return String(ascstr);
   d785e:	a902      	add	r1, sp, #8
    ascstr[len-1] = 0; // remove final newline
   d7860:	f800 5c41 	strb.w	r5, [r0, #-65]
    return String(ascstr);
   d7864:	4620      	mov	r0, r4
   d7866:	f7ff ff1e 	bl	d76a6 <_ZN6StringC1EPKc>
}
   d786a:	4620      	mov	r0, r4
   d786c:	b013      	add	sp, #76	; 0x4c
   d786e:	bd30      	pop	{r4, r5, pc}
   d7870:	2003e5e8 	.word	0x2003e5e8
   d7874:	2003e5e0 	.word	0x2003e5e0

000d7878 <_ZN9TimeClass14timeFormatImplEP2tmPKci>:
    localtime_r(&t, &calendar_time);
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
}

String TimeClass::timeFormatImpl(tm* calendar_time, const char* format, int time_zone)
{
   d7878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d787c:	b0a5      	sub	sp, #148	; 0x94
   d787e:	4607      	mov	r7, r0
   d7880:	4688      	mov	r8, r1
    char format_str[64];
    // only copy up to n-1 to dest if no null terminator found
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7882:	a814      	add	r0, sp, #80	; 0x50
{
   d7884:	4611      	mov	r1, r2
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d7886:	223f      	movs	r2, #63	; 0x3f
{
   d7888:	461d      	mov	r5, r3
    strncpy(format_str, format, sizeof(format_str) - 1); // Flawfinder: ignore (ch42318)
   d788a:	f000 fc07 	bl	d809c <strncpy>
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d788e:	2300      	movs	r3, #0
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7890:	a814      	add	r0, sp, #80	; 0x50
    format_str[sizeof(format_str) - 1] = '\0'; // ensure null termination
   d7892:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
    size_t len = strlen(format_str); // Flawfinder: ignore (ch42318)
   d7896:	f000 fbd4 	bl	d8042 <strlen>
   d789a:	4604      	mov	r4, r0

    char time_zone_str[16];
    // while we are not using stdlib for managing the timezone, we have to do this manually
    if (!time_zone) {
   d789c:	bb5d      	cbnz	r5, d78f6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x7e>
        strcpy(time_zone_str, "Z");
   d789e:	492a      	ldr	r1, [pc, #168]	; (d7948 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd0>)
   d78a0:	a803      	add	r0, sp, #12
   d78a2:	f000 fbc6 	bl	d8032 <strcpy>
   d78a6:	ae14      	add	r6, sp, #80	; 0x50
{
   d78a8:	2500      	movs	r5, #0
    else {
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
    }

    // replace %z with the timezone
    for (size_t i=0; i<len-1; i++)
   d78aa:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   d78ae:	45ab      	cmp	fp, r5
   d78b0:	d936      	bls.n	d7920 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xa8>
    {
        if (format_str[i]=='%' && format_str[i+1]=='z')
   d78b2:	46b1      	mov	r9, r6
   d78b4:	f105 0a01 	add.w	sl, r5, #1
   d78b8:	f819 3b01 	ldrb.w	r3, [r9], #1
   d78bc:	2b25      	cmp	r3, #37	; 0x25
   d78be:	d117      	bne.n	d78f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
   d78c0:	7873      	ldrb	r3, [r6, #1]
   d78c2:	2b7a      	cmp	r3, #122	; 0x7a
   d78c4:	d114      	bne.n	d78f0 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x78>
        {
            size_t tzlen = strlen(time_zone_str);
   d78c6:	a803      	add	r0, sp, #12
   d78c8:	f000 fbbb 	bl	d8042 <strlen>
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d78cc:	ab14      	add	r3, sp, #80	; 0x50
            size_t tzlen = strlen(time_zone_str);
   d78ce:	4604      	mov	r4, r0
            memcpy(format_str+i+tzlen, format_str+i+2, len-i-1);    // +1 include the 0 char
   d78d0:	1828      	adds	r0, r5, r0
   d78d2:	4418      	add	r0, r3
   d78d4:	ebab 0205 	sub.w	r2, fp, r5
   d78d8:	1cb1      	adds	r1, r6, #2
   d78da:	f000 fb35 	bl	d7f48 <memcpy>
            memcpy(format_str+i, time_zone_str, tzlen);
   d78de:	4622      	mov	r2, r4
   d78e0:	a903      	add	r1, sp, #12
   d78e2:	4630      	mov	r0, r6
   d78e4:	f000 fb30 	bl	d7f48 <memcpy>
            len = strlen(format_str);
   d78e8:	a814      	add	r0, sp, #80	; 0x50
   d78ea:	f000 fbaa 	bl	d8042 <strlen>
   d78ee:	4604      	mov	r4, r0
    for (size_t i=0; i<len-1; i++)
   d78f0:	464e      	mov	r6, r9
   d78f2:	4655      	mov	r5, sl
   d78f4:	e7d9      	b.n	d78aa <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x32>
        snprintf(time_zone_str, sizeof(time_zone_str), "%+03d:%02u", time_zone/3600, abs(time_zone/60)%60);
   d78f6:	213c      	movs	r1, #60	; 0x3c
   d78f8:	fb95 f3f1 	sdiv	r3, r5, r1
   d78fc:	2b00      	cmp	r3, #0
   d78fe:	bfb8      	it	lt
   d7900:	425b      	neglt	r3, r3
   d7902:	fbb3 f2f1 	udiv	r2, r3, r1
   d7906:	fb01 3312 	mls	r3, r1, r2, r3
   d790a:	9300      	str	r3, [sp, #0]
   d790c:	4a0f      	ldr	r2, [pc, #60]	; (d794c <_ZN9TimeClass14timeFormatImplEP2tmPKci+0xd4>)
   d790e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
   d7912:	2110      	movs	r1, #16
   d7914:	a803      	add	r0, sp, #12
   d7916:	fb95 f3f3 	sdiv	r3, r5, r3
   d791a:	f7fe f9a3 	bl	d5c64 <snprintf>
   d791e:	e7c2      	b.n	d78a6 <_ZN9TimeClass14timeFormatImplEP2tmPKci+0x2e>
        }
    }

    char buf[50] = {};
   d7920:	2100      	movs	r1, #0
   d7922:	222e      	movs	r2, #46	; 0x2e
   d7924:	a808      	add	r0, sp, #32
   d7926:	9107      	str	r1, [sp, #28]
   d7928:	f000 fb36 	bl	d7f98 <memset>
    strftime(buf, sizeof(buf), format_str, calendar_time);
   d792c:	4643      	mov	r3, r8
   d792e:	aa14      	add	r2, sp, #80	; 0x50
   d7930:	2132      	movs	r1, #50	; 0x32
   d7932:	a807      	add	r0, sp, #28
   d7934:	f7fe f9ae 	bl	d5c94 <strftime>
    return String(buf);
   d7938:	a907      	add	r1, sp, #28
   d793a:	4638      	mov	r0, r7
   d793c:	f7ff feb3 	bl	d76a6 <_ZN6StringC1EPKc>
}
   d7940:	4638      	mov	r0, r7
   d7942:	b025      	add	sp, #148	; 0x94
   d7944:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7948:	000d8ac4 	.word	0x000d8ac4
   d794c:	000d8ac6 	.word	0x000d8ac6

000d7950 <_ZN9TimeClass6formatExPKc>:
{
   d7950:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7952:	b08d      	sub	sp, #52	; 0x34
   d7954:	e9cd 2300 	strd	r2, r3, [sp]
   d7958:	9d12      	ldr	r5, [sp, #72]	; 0x48
   d795a:	4604      	mov	r4, r0
    if (format_spec == nullptr)
   d795c:	b915      	cbnz	r5, d7964 <_ZN9TimeClass6formatExPKc+0x14>
        format_spec = this->format_spec;
   d795e:	4b19      	ldr	r3, [pc, #100]	; (d79c4 <_ZN9TimeClass6formatExPKc+0x74>)
   d7960:	681d      	ldr	r5, [r3, #0]
    if (!format_spec || !strcmp(format_spec, TIME_FORMAT_DEFAULT)) {
   d7962:	b12d      	cbz	r5, d7970 <_ZN9TimeClass6formatExPKc+0x20>
   d7964:	4b18      	ldr	r3, [pc, #96]	; (d79c8 <_ZN9TimeClass6formatExPKc+0x78>)
   d7966:	4628      	mov	r0, r5
   d7968:	6819      	ldr	r1, [r3, #0]
   d796a:	f000 fb58 	bl	d801e <strcmp>
   d796e:	b938      	cbnz	r0, d7980 <_ZN9TimeClass6formatExPKc+0x30>
        return timeStr(t);
   d7970:	e9dd 2300 	ldrd	r2, r3, [sp]
   d7974:	4620      	mov	r0, r4
   d7976:	f7ff ff47 	bl	d7808 <_ZN9TimeClass7timeStrEx>
}
   d797a:	4620      	mov	r0, r4
   d797c:	b00d      	add	sp, #52	; 0x34
   d797e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    t += time_zone_cache;
   d7980:	4e12      	ldr	r6, [pc, #72]	; (d79cc <_ZN9TimeClass6formatExPKc+0x7c>)
   d7982:	9900      	ldr	r1, [sp, #0]
    t += dst_current_cache;
   d7984:	4f12      	ldr	r7, [pc, #72]	; (d79d0 <_ZN9TimeClass6formatExPKc+0x80>)
    t += time_zone_cache;
   d7986:	e9d6 3200 	ldrd	r3, r2, [r6]
   d798a:	185b      	adds	r3, r3, r1
   d798c:	9901      	ldr	r1, [sp, #4]
   d798e:	eb41 0202 	adc.w	r2, r1, r2
    t += dst_current_cache;
   d7992:	e9d7 0100 	ldrd	r0, r1, [r7]
   d7996:	181b      	adds	r3, r3, r0
   d7998:	eb41 0202 	adc.w	r2, r1, r2
   d799c:	e9cd 3200 	strd	r3, r2, [sp]
    struct tm calendar_time = {};
   d79a0:	2100      	movs	r1, #0
   d79a2:	2224      	movs	r2, #36	; 0x24
   d79a4:	a803      	add	r0, sp, #12
   d79a6:	f000 faf7 	bl	d7f98 <memset>
    localtime_r(&t, &calendar_time);
   d79aa:	a903      	add	r1, sp, #12
   d79ac:	4668      	mov	r0, sp
   d79ae:	f7fe f979 	bl	d5ca4 <localtime_r>
    return timeFormatImpl(&calendar_time, format_spec, time_zone_cache + dst_current_cache);
   d79b2:	6832      	ldr	r2, [r6, #0]
   d79b4:	683b      	ldr	r3, [r7, #0]
   d79b6:	a903      	add	r1, sp, #12
   d79b8:	4413      	add	r3, r2
   d79ba:	4620      	mov	r0, r4
   d79bc:	462a      	mov	r2, r5
   d79be:	f7ff ff5b 	bl	d7878 <_ZN9TimeClass14timeFormatImplEP2tmPKci>
   d79c2:	e7da      	b.n	d797a <_ZN9TimeClass6formatExPKc+0x2a>
   d79c4:	2003e5dc 	.word	0x2003e5dc
   d79c8:	2003e430 	.word	0x2003e430
   d79cc:	2003e5e8 	.word	0x2003e5e8
   d79d0:	2003e5e0 	.word	0x2003e5e0

000d79d4 <_ZN9TimeClass7isValidEv>:

bool TimeClass::isValid()
{
   d79d4:	b510      	push	{r4, lr}
    bool rtcstate = hal_rtc_time_is_valid(nullptr);
   d79d6:	2000      	movs	r0, #0
   d79d8:	f7fd fee8 	bl	d57ac <hal_rtc_time_is_valid>
    if (rtcstate)
   d79dc:	4604      	mov	r4, r0
   d79de:	b9a0      	cbnz	r0, d7a0a <_ZN9TimeClass7isValidEv+0x36>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
   d79e0:	f7fe f854 	bl	d5a8c <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
   d79e4:	2801      	cmp	r0, #1
   d79e6:	d110      	bne.n	d7a0a <_ZN9TimeClass7isValidEv+0x36>
   d79e8:	4620      	mov	r0, r4
   d79ea:	f7fe f877 	bl	d5adc <system_thread_get_state>
   d79ee:	b960      	cbnz	r0, d7a0a <_ZN9TimeClass7isValidEv+0x36>
    {
        waitUntil(Particle.syncTimeDone);
   d79f0:	f7ff feea 	bl	d77c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
   d79f4:	b910      	cbnz	r0, d79fc <_ZN9TimeClass7isValidEv+0x28>
            spark_process();
   d79f6:	f7fe f895 	bl	d5b24 <spark_process>
        while (_while() && !_condition()) {
   d79fa:	e7f9      	b.n	d79f0 <_ZN9TimeClass7isValidEv+0x1c>
   d79fc:	f7ff fee4 	bl	d77c8 <_ZN10CloudClass12syncTimeDoneEv.isra.0>
        return hal_rtc_time_is_valid(nullptr);
    }
    return rtcstate;
}
   d7a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        return hal_rtc_time_is_valid(nullptr);
   d7a04:	2000      	movs	r0, #0
   d7a06:	f7fd bed1 	b.w	d57ac <hal_rtc_time_is_valid>
}
   d7a0a:	4620      	mov	r0, r4
   d7a0c:	bd10      	pop	{r4, pc}
	...

000d7a10 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7a10:	4b02      	ldr	r3, [pc, #8]	; (d7a1c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7a12:	681a      	ldr	r2, [r3, #0]
   d7a14:	4b02      	ldr	r3, [pc, #8]	; (d7a20 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7a16:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d7a18:	4770      	bx	lr
   d7a1a:	bf00      	nop
   d7a1c:	2003e430 	.word	0x2003e430
   d7a20:	2003e5dc 	.word	0x2003e5dc

000d7a24 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7a24:	4770      	bx	lr

000d7a26 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7a26:	7441      	strb	r1, [r0, #17]
}
   d7a28:	4770      	bx	lr

000d7a2a <__tcf_0>:
#endif

USARTSerial& __fetch_global_Serial1()
{
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7a2a:	4770      	bx	lr

000d7a2c <_ZN11USARTSerial17availableForWriteEv>:
{
   d7a2c:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7a2e:	7c00      	ldrb	r0, [r0, #16]
   d7a30:	f7fd ffbc 	bl	d59ac <hal_usart_available_data_for_write>
}
   d7a34:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a38:	bd08      	pop	{r3, pc}

000d7a3a <_ZN11USARTSerial9availableEv>:
{
   d7a3a:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d7a3c:	7c00      	ldrb	r0, [r0, #16]
   d7a3e:	f7fd ff8d 	bl	d595c <hal_usart_available>
}
   d7a42:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7a46:	bd08      	pop	{r3, pc}

000d7a48 <_ZN11USARTSerial4peekEv>:
{
   d7a48:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d7a4a:	7c00      	ldrb	r0, [r0, #16]
   d7a4c:	f7fd ff96 	bl	d597c <hal_usart_peek>
}
   d7a50:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7a54:	bd08      	pop	{r3, pc}

000d7a56 <_ZN11USARTSerial4readEv>:
{
   d7a56:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d7a58:	7c00      	ldrb	r0, [r0, #16]
   d7a5a:	f7fd ff87 	bl	d596c <hal_usart_read>
}
   d7a5e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7a62:	bd08      	pop	{r3, pc}

000d7a64 <_ZN11USARTSerial5flushEv>:
  hal_usart_flush(_serial);
   d7a64:	7c00      	ldrb	r0, [r0, #16]
   d7a66:	f7fd bf91 	b.w	d598c <hal_usart_flush>

000d7a6a <_ZN11USARTSerial5writeEh>:
{
   d7a6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7a6c:	7c45      	ldrb	r5, [r0, #17]
{
   d7a6e:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7a70:	b12d      	cbz	r5, d7a7e <_ZN11USARTSerial5writeEh+0x14>
	  return hal_usart_write(_serial, c);
   d7a72:	7c20      	ldrb	r0, [r4, #16]
}
   d7a74:	b003      	add	sp, #12
   d7a76:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7a7a:	f7fd bf67 	b.w	d594c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7a7e:	7c00      	ldrb	r0, [r0, #16]
   d7a80:	9101      	str	r1, [sp, #4]
   d7a82:	f7fd ff93 	bl	d59ac <hal_usart_available_data_for_write>
   d7a86:	2800      	cmp	r0, #0
   d7a88:	9901      	ldr	r1, [sp, #4]
   d7a8a:	dcf2      	bgt.n	d7a72 <_ZN11USARTSerial5writeEh+0x8>
}
   d7a8c:	4628      	mov	r0, r5
   d7a8e:	b003      	add	sp, #12
   d7a90:	bd30      	pop	{r4, r5, pc}

000d7a92 <_ZN11USARTSerialD0Ev>:
   d7a92:	b510      	push	{r4, lr}
   d7a94:	2114      	movs	r1, #20
   d7a96:	4604      	mov	r4, r0
   d7a98:	f000 fa24 	bl	d7ee4 <_ZdlPvj>
   d7a9c:	4620      	mov	r0, r4
   d7a9e:	bd10      	pop	{r4, pc}

000d7aa0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7aa0:	b510      	push	{r4, lr}
   d7aa2:	f04f 0c00 	mov.w	ip, #0
   d7aa6:	4604      	mov	r4, r0
   d7aa8:	4608      	mov	r0, r1
   d7aaa:	4611      	mov	r1, r2
   d7aac:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7ab0:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7ab4:	4a04      	ldr	r2, [pc, #16]	; (d7ac8 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7ab6:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7ab8:	2201      	movs	r2, #1
  _serial = serial;
   d7aba:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7abc:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7abe:	461a      	mov	r2, r3
   d7ac0:	f7fd ff34 	bl	d592c <hal_usart_init>
}
   d7ac4:	4620      	mov	r0, r4
   d7ac6:	bd10      	pop	{r4, pc}
   d7ac8:	000d8af8 	.word	0x000d8af8

000d7acc <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d7acc:	7c00      	ldrb	r0, [r0, #16]
   d7ace:	2300      	movs	r3, #0
   d7ad0:	f7fd bf74 	b.w	d59bc <hal_usart_begin_config>

000d7ad4 <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d7ad4:	2200      	movs	r2, #0
   d7ad6:	f7ff bff9 	b.w	d7acc <_ZN11USARTSerial5beginEmm>

000d7ada <_ZN11USARTSerial3endEv>:
  hal_usart_end(_serial);
   d7ada:	7c00      	ldrb	r0, [r0, #16]
   d7adc:	f7fd bf2e 	b.w	d593c <hal_usart_end>

000d7ae0 <_Z22__fetch_global_Serial1v>:
{
   d7ae0:	b513      	push	{r0, r1, r4, lr}
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7ae2:	4c0d      	ldr	r4, [pc, #52]	; (d7b18 <_Z22__fetch_global_Serial1v+0x38>)
   d7ae4:	7821      	ldrb	r1, [r4, #0]
   d7ae6:	f3bf 8f5b 	dmb	ish
   d7aea:	f011 0101 	ands.w	r1, r1, #1
   d7aee:	d110      	bne.n	d7b12 <_Z22__fetch_global_Serial1v+0x32>
   d7af0:	4620      	mov	r0, r4
   d7af2:	9101      	str	r1, [sp, #4]
   d7af4:	f7fc fade 	bl	d40b4 <__cxa_guard_acquire>
   d7af8:	9901      	ldr	r1, [sp, #4]
   d7afa:	b150      	cbz	r0, d7b12 <_Z22__fetch_global_Serial1v+0x32>
   d7afc:	4b07      	ldr	r3, [pc, #28]	; (d7b1c <_Z22__fetch_global_Serial1v+0x3c>)
   d7afe:	4a08      	ldr	r2, [pc, #32]	; (d7b20 <_Z22__fetch_global_Serial1v+0x40>)
   d7b00:	4808      	ldr	r0, [pc, #32]	; (d7b24 <_Z22__fetch_global_Serial1v+0x44>)
   d7b02:	f7ff ffcd 	bl	d7aa0 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d7b06:	4620      	mov	r0, r4
   d7b08:	f7fc fad9 	bl	d40be <__cxa_guard_release>
   d7b0c:	4806      	ldr	r0, [pc, #24]	; (d7b28 <_Z22__fetch_global_Serial1v+0x48>)
   d7b0e:	f000 fa15 	bl	d7f3c <atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d7b12:	4804      	ldr	r0, [pc, #16]	; (d7b24 <_Z22__fetch_global_Serial1v+0x44>)
   d7b14:	b002      	add	sp, #8
   d7b16:	bd10      	pop	{r4, pc}
   d7b18:	2003e5f0 	.word	0x2003e5f0
   d7b1c:	2003e678 	.word	0x2003e678
   d7b20:	2003e5f4 	.word	0x2003e5f4
   d7b24:	2003e6fc 	.word	0x2003e6fc
   d7b28:	000d7a2b 	.word	0x000d7a2b

000d7b2c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7b2c:	7441      	strb	r1, [r0, #17]
}
   d7b2e:	4770      	bx	lr

000d7b30 <__tcf_0>:
}

USBSerial& _fetch_usbserial()
{
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7b30:	4770      	bx	lr

000d7b32 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d7b32:	4770      	bx	lr

000d7b34 <_ZN9USBSerial4readEv>:
{
   d7b34:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d7b36:	2100      	movs	r1, #0
   d7b38:	7c00      	ldrb	r0, [r0, #16]
   d7b3a:	f7fd ff6f 	bl	d5a1c <HAL_USB_USART_Receive_Data>
}
   d7b3e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b42:	bd08      	pop	{r3, pc}

000d7b44 <_ZN9USBSerial4peekEv>:
{
   d7b44:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d7b46:	2101      	movs	r1, #1
   d7b48:	7c00      	ldrb	r0, [r0, #16]
   d7b4a:	f7fd ff67 	bl	d5a1c <HAL_USB_USART_Receive_Data>
}
   d7b4e:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d7b52:	bd08      	pop	{r3, pc}

000d7b54 <_ZN9USBSerial17availableForWriteEv>:
{
   d7b54:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d7b56:	7c00      	ldrb	r0, [r0, #16]
   d7b58:	f7fd ff58 	bl	d5a0c <HAL_USB_USART_Available_Data_For_Write>
}
   d7b5c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b60:	bd08      	pop	{r3, pc}

000d7b62 <_ZN9USBSerial9availableEv>:
{
   d7b62:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d7b64:	7c00      	ldrb	r0, [r0, #16]
   d7b66:	f7fd ff49 	bl	d59fc <HAL_USB_USART_Available_Data>
}
   d7b6a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d7b6e:	bd08      	pop	{r3, pc}

000d7b70 <_ZN9USBSerial5writeEh>:
{
   d7b70:	b513      	push	{r0, r1, r4, lr}
   d7b72:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7b74:	7c00      	ldrb	r0, [r0, #16]
{
   d7b76:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d7b78:	f7fd ff48 	bl	d5a0c <HAL_USB_USART_Available_Data_For_Write>
   d7b7c:	2800      	cmp	r0, #0
   d7b7e:	9901      	ldr	r1, [sp, #4]
   d7b80:	dc01      	bgt.n	d7b86 <_ZN9USBSerial5writeEh+0x16>
   d7b82:	7c60      	ldrb	r0, [r4, #17]
   d7b84:	b120      	cbz	r0, d7b90 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7b86:	7c20      	ldrb	r0, [r4, #16]
   d7b88:	f7fd ff50 	bl	d5a2c <HAL_USB_USART_Send_Data>
   d7b8c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7b90:	b002      	add	sp, #8
   d7b92:	bd10      	pop	{r4, pc}

000d7b94 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7b94:	7c00      	ldrb	r0, [r0, #16]
   d7b96:	f7fd bf51 	b.w	d5a3c <HAL_USB_USART_Flush_Data>

000d7b9a <_ZN9USBSerialD0Ev>:
   d7b9a:	b510      	push	{r4, lr}
   d7b9c:	2114      	movs	r1, #20
   d7b9e:	4604      	mov	r4, r0
   d7ba0:	f000 f9a0 	bl	d7ee4 <_ZdlPvj>
   d7ba4:	4620      	mov	r0, r4
   d7ba6:	bd10      	pop	{r4, pc}

000d7ba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7ba8:	b510      	push	{r4, lr}
   d7baa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7bae:	4604      	mov	r4, r0
   d7bb0:	4608      	mov	r0, r1
   d7bb2:	2100      	movs	r1, #0
   d7bb4:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7bb8:	4b04      	ldr	r3, [pc, #16]	; (d7bcc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d7bba:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7bbc:	2301      	movs	r3, #1
  _serial = serial;
   d7bbe:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7bc0:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7bc2:	4611      	mov	r1, r2
   d7bc4:	f7fd ff02 	bl	d59cc <HAL_USB_USART_Init>
}
   d7bc8:	4620      	mov	r0, r4
   d7bca:	bd10      	pop	{r4, pc}
   d7bcc:	000d8b28 	.word	0x000d8b28

000d7bd0 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7bd0:	7c00      	ldrb	r0, [r0, #16]
   d7bd2:	2200      	movs	r2, #0
   d7bd4:	f7fd bf02 	b.w	d59dc <HAL_USB_USART_Begin>

000d7bd8 <_ZN9USBSerial3endEv>:
    HAL_USB_USART_End(_serial);
   d7bd8:	7c00      	ldrb	r0, [r0, #16]
   d7bda:	f7fd bf07 	b.w	d59ec <HAL_USB_USART_End>

000d7bde <_Z19acquireSerialBufferv>:
{
   d7bde:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d7be0:	2214      	movs	r2, #20
{
   d7be2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7be4:	2100      	movs	r1, #0
   d7be6:	f000 f9d7 	bl	d7f98 <memset>
}
   d7bea:	4620      	mov	r0, r4
   d7bec:	bd10      	pop	{r4, pc}
	...

000d7bf0 <_Z16_fetch_usbserialv>:
{
   d7bf0:	b510      	push	{r4, lr}
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7bf2:	4c0f      	ldr	r4, [pc, #60]	; (d7c30 <_Z16_fetch_usbserialv+0x40>)
{
   d7bf4:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7bf6:	a803      	add	r0, sp, #12
   d7bf8:	f7ff fff1 	bl	d7bde <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7bfc:	7821      	ldrb	r1, [r4, #0]
   d7bfe:	f3bf 8f5b 	dmb	ish
   d7c02:	f011 0101 	ands.w	r1, r1, #1
   d7c06:	d10f      	bne.n	d7c28 <_Z16_fetch_usbserialv+0x38>
   d7c08:	4620      	mov	r0, r4
   d7c0a:	9101      	str	r1, [sp, #4]
   d7c0c:	f7fc fa52 	bl	d40b4 <__cxa_guard_acquire>
   d7c10:	9901      	ldr	r1, [sp, #4]
   d7c12:	b148      	cbz	r0, d7c28 <_Z16_fetch_usbserialv+0x38>
   d7c14:	aa03      	add	r2, sp, #12
   d7c16:	4807      	ldr	r0, [pc, #28]	; (d7c34 <_Z16_fetch_usbserialv+0x44>)
   d7c18:	f7ff ffc6 	bl	d7ba8 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7c1c:	4620      	mov	r0, r4
   d7c1e:	f7fc fa4e 	bl	d40be <__cxa_guard_release>
   d7c22:	4805      	ldr	r0, [pc, #20]	; (d7c38 <_Z16_fetch_usbserialv+0x48>)
   d7c24:	f000 f98a 	bl	d7f3c <atexit>
	return _usbserial;
}
   d7c28:	4802      	ldr	r0, [pc, #8]	; (d7c34 <_Z16_fetch_usbserialv+0x44>)
   d7c2a:	b008      	add	sp, #32
   d7c2c:	bd10      	pop	{r4, pc}
   d7c2e:	bf00      	nop
   d7c30:	2003e710 	.word	0x2003e710
   d7c34:	2003e714 	.word	0x2003e714
   d7c38:	000d7b31 	.word	0x000d7b31

000d7c3c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d7c3c:	4b01      	ldr	r3, [pc, #4]	; (d7c44 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d7c3e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d7c40:	4770      	bx	lr
   d7c42:	bf00      	nop
   d7c44:	2003e434 	.word	0x2003e434

000d7c48 <serialEventRun>:
{
   d7c48:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d7c4a:	4b0b      	ldr	r3, [pc, #44]	; (d7c78 <serialEventRun+0x30>)
   d7c4c:	b143      	cbz	r3, d7c60 <serialEventRun+0x18>
   d7c4e:	f7ff ffcf 	bl	d7bf0 <_Z16_fetch_usbserialv>
   d7c52:	6803      	ldr	r3, [r0, #0]
   d7c54:	691b      	ldr	r3, [r3, #16]
   d7c56:	4798      	blx	r3
   d7c58:	2800      	cmp	r0, #0
   d7c5a:	dd01      	ble.n	d7c60 <serialEventRun+0x18>
        serialEvent();
   d7c5c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d7c60:	4b06      	ldr	r3, [pc, #24]	; (d7c7c <serialEventRun+0x34>)
   d7c62:	b143      	cbz	r3, d7c76 <serialEventRun+0x2e>
   d7c64:	f7ff ff3c 	bl	d7ae0 <_Z22__fetch_global_Serial1v>
   d7c68:	6803      	ldr	r3, [r0, #0]
   d7c6a:	691b      	ldr	r3, [r3, #16]
   d7c6c:	4798      	blx	r3
   d7c6e:	2800      	cmp	r0, #0
   d7c70:	dd01      	ble.n	d7c76 <serialEventRun+0x2e>
        serialEvent1();
   d7c72:	f3af 8000 	nop.w
}
   d7c76:	bd08      	pop	{r3, pc}
	...

000d7c80 <_post_loop>:
{
   d7c80:	b508      	push	{r3, lr}
	serialEventRun();
   d7c82:	f7ff ffe1 	bl	d7c48 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d7c86:	f7fd fd89 	bl	d579c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d7c8a:	4b01      	ldr	r3, [pc, #4]	; (d7c90 <_post_loop+0x10>)
   d7c8c:	6018      	str	r0, [r3, #0]
}
   d7c8e:	bd08      	pop	{r3, pc}
   d7c90:	2003e73c 	.word	0x2003e73c

000d7c94 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7c94:	4805      	ldr	r0, [pc, #20]	; (d7cac <_Z33system_initialize_user_backup_ramv+0x18>)
   d7c96:	4a06      	ldr	r2, [pc, #24]	; (d7cb0 <_Z33system_initialize_user_backup_ramv+0x1c>)
   d7c98:	4906      	ldr	r1, [pc, #24]	; (d7cb4 <_Z33system_initialize_user_backup_ramv+0x20>)
{
   d7c9a:	b508      	push	{r3, lr}
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d7c9c:	1a12      	subs	r2, r2, r0
   d7c9e:	f000 f953 	bl	d7f48 <memcpy>
    __backup_sram_signature = signature;
   d7ca2:	4b05      	ldr	r3, [pc, #20]	; (d7cb8 <_Z33system_initialize_user_backup_ramv+0x24>)
   d7ca4:	4a05      	ldr	r2, [pc, #20]	; (d7cbc <_Z33system_initialize_user_backup_ramv+0x28>)
   d7ca6:	601a      	str	r2, [r3, #0]
}
   d7ca8:	bd08      	pop	{r3, pc}
   d7caa:	bf00      	nop
   d7cac:	2003f400 	.word	0x2003f400
   d7cb0:	2003f404 	.word	0x2003f404
   d7cb4:	000d8ce0 	.word	0x000d8ce0
   d7cb8:	2003f400 	.word	0x2003f400
   d7cbc:	9a271c1e 	.word	0x9a271c1e

000d7cc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d7cc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7cc2:	2300      	movs	r3, #0
   d7cc4:	9300      	str	r3, [sp, #0]
   d7cc6:	461a      	mov	r2, r3
   d7cc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7ccc:	f7fd ff20 	bl	d5b10 <system_ctrl_set_result>
}
   d7cd0:	b003      	add	sp, #12
   d7cd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d7cd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d7cd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d7cda:	8843      	ldrh	r3, [r0, #2]
   d7cdc:	2b0a      	cmp	r3, #10
   d7cde:	d008      	beq.n	d7cf2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d7ce0:	2b50      	cmp	r3, #80	; 0x50
   d7ce2:	d10b      	bne.n	d7cfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d7ce4:	4b09      	ldr	r3, [pc, #36]	; (d7d0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d7ce6:	681b      	ldr	r3, [r3, #0]
   d7ce8:	b14b      	cbz	r3, d7cfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d7cea:	b003      	add	sp, #12
   d7cec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d7cf0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d7cf2:	f7ff ffe5 	bl	d7cc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d7cf6:	b003      	add	sp, #12
   d7cf8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d7cfc:	2300      	movs	r3, #0
   d7cfe:	9300      	str	r3, [sp, #0]
   d7d00:	461a      	mov	r2, r3
   d7d02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d7d06:	f7fd ff03 	bl	d5b10 <system_ctrl_set_result>
}
   d7d0a:	e7f4      	b.n	d7cf6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d7d0c:	2003e72c 	.word	0x2003e72c

000d7d10 <module_user_init_hook>:
{
   d7d10:	b510      	push	{r4, lr}
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d7d12:	4812      	ldr	r0, [pc, #72]	; (d7d5c <module_user_init_hook+0x4c>)
   d7d14:	2100      	movs	r1, #0
   d7d16:	f7fd ffb5 	bl	d5c84 <newlib_impure_ptr_callback>
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ = __backup_sram_signature == signature;
   d7d1a:	4b11      	ldr	r3, [pc, #68]	; (d7d60 <module_user_init_hook+0x50>)
   d7d1c:	681a      	ldr	r2, [r3, #0]
   d7d1e:	4b11      	ldr	r3, [pc, #68]	; (d7d64 <module_user_init_hook+0x54>)
   d7d20:	429a      	cmp	r2, r3
   d7d22:	4b11      	ldr	r3, [pc, #68]	; (d7d68 <module_user_init_hook+0x58>)
   d7d24:	bf0c      	ite	eq
   d7d26:	2201      	moveq	r2, #1
   d7d28:	2200      	movne	r2, #0
   d7d2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d7d2c:	d001      	beq.n	d7d32 <module_user_init_hook+0x22>
        system_initialize_user_backup_ram();
   d7d2e:	f7ff ffb1 	bl	d7c94 <_Z33system_initialize_user_backup_ramv>
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d7d32:	f7fd fd23 	bl	d577c <HAL_RNG_GetRandomNumber>
   d7d36:	4604      	mov	r4, r0
    srand(seed);
   d7d38:	f000 f936 	bl	d7fa8 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d7d3c:	4b0b      	ldr	r3, [pc, #44]	; (d7d6c <module_user_init_hook+0x5c>)
   d7d3e:	b113      	cbz	r3, d7d46 <module_user_init_hook+0x36>
        random_seed_from_cloud(seed);
   d7d40:	4620      	mov	r0, r4
   d7d42:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d7d46:	2100      	movs	r1, #0
   d7d48:	4808      	ldr	r0, [pc, #32]	; (d7d6c <module_user_init_hook+0x5c>)
   d7d4a:	f7fd ff03 	bl	d5b54 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d7d4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d7d52:	4807      	ldr	r0, [pc, #28]	; (d7d70 <module_user_init_hook+0x60>)
   d7d54:	2100      	movs	r1, #0
   d7d56:	f7fd bed1 	b.w	d5afc <system_ctrl_set_app_request_handler>
   d7d5a:	bf00      	nop
   d7d5c:	000d7c3d 	.word	0x000d7c3d
   d7d60:	2003f400 	.word	0x2003f400
   d7d64:	9a271c1e 	.word	0x9a271c1e
   d7d68:	2003e728 	.word	0x2003e728
   d7d6c:	00000000 	.word	0x00000000
   d7d70:	000d7cd9 	.word	0x000d7cd9

000d7d74 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7d74:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7d76:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7d78:	d902      	bls.n	d7d80 <pinAvailable+0xc>
    return false;
   d7d7a:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7d7c:	b002      	add	sp, #8
   d7d7e:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7d80:	f1a0 030b 	sub.w	r3, r0, #11
   d7d84:	2b02      	cmp	r3, #2
   d7d86:	d81a      	bhi.n	d7dbe <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7d88:	4c17      	ldr	r4, [pc, #92]	; (d7de8 <pinAvailable+0x74>)
   d7d8a:	7821      	ldrb	r1, [r4, #0]
   d7d8c:	f3bf 8f5b 	dmb	ish
   d7d90:	f011 0101 	ands.w	r1, r1, #1
   d7d94:	d10b      	bne.n	d7dae <pinAvailable+0x3a>
   d7d96:	4620      	mov	r0, r4
   d7d98:	9101      	str	r1, [sp, #4]
   d7d9a:	f7fc f98b 	bl	d40b4 <__cxa_guard_acquire>
   d7d9e:	9901      	ldr	r1, [sp, #4]
   d7da0:	b128      	cbz	r0, d7dae <pinAvailable+0x3a>
   d7da2:	4812      	ldr	r0, [pc, #72]	; (d7dec <pinAvailable+0x78>)
   d7da4:	f7ff fc2a 	bl	d75fc <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7da8:	4620      	mov	r0, r4
   d7daa:	f7fc f988 	bl	d40be <__cxa_guard_release>
   d7dae:	4b0f      	ldr	r3, [pc, #60]	; (d7dec <pinAvailable+0x78>)
   d7db0:	7818      	ldrb	r0, [r3, #0]
   d7db2:	f7fd fdb3 	bl	d591c <hal_spi_is_enabled>
   d7db6:	2800      	cmp	r0, #0
   d7db8:	d1df      	bne.n	d7d7a <pinAvailable+0x6>
  return true; // 'pin' is available
   d7dba:	2001      	movs	r0, #1
   d7dbc:	e7de      	b.n	d7d7c <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7dbe:	2801      	cmp	r0, #1
   d7dc0:	d809      	bhi.n	d7dd6 <pinAvailable+0x62>
   d7dc2:	f000 f86b 	bl	d7e9c <_Z19__fetch_global_Wirev>
   d7dc6:	2100      	movs	r1, #0
   d7dc8:	7c00      	ldrb	r0, [r0, #16]
   d7dca:	f7fd fd5f 	bl	d588c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7dce:	f080 0001 	eor.w	r0, r0, #1
   d7dd2:	b2c0      	uxtb	r0, r0
   d7dd4:	e7d2      	b.n	d7d7c <pinAvailable+0x8>
   d7dd6:	3809      	subs	r0, #9
   d7dd8:	2801      	cmp	r0, #1
   d7dda:	d8ee      	bhi.n	d7dba <pinAvailable+0x46>
   d7ddc:	f7ff fe80 	bl	d7ae0 <_Z22__fetch_global_Serial1v>
   d7de0:	7c00      	ldrb	r0, [r0, #16]
   d7de2:	f7fd fddb 	bl	d599c <hal_usart_is_enabled>
   d7de6:	e7f2      	b.n	d7dce <pinAvailable+0x5a>
   d7de8:	2003e730 	.word	0x2003e730
   d7dec:	2003e734 	.word	0x2003e734

000d7df0 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7df0:	2823      	cmp	r0, #35	; 0x23
{
   d7df2:	b538      	push	{r3, r4, r5, lr}
   d7df4:	4604      	mov	r4, r0
   d7df6:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7df8:	d80a      	bhi.n	d7e10 <pinMode+0x20>
   d7dfa:	29ff      	cmp	r1, #255	; 0xff
   d7dfc:	d008      	beq.n	d7e10 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7dfe:	f7ff ffb9 	bl	d7d74 <pinAvailable>
   d7e02:	b128      	cbz	r0, d7e10 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7e04:	4629      	mov	r1, r5
   d7e06:	4620      	mov	r0, r4
}
   d7e08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7e0c:	f7fd bcde 	b.w	d57cc <HAL_Pin_Mode>
}
   d7e10:	bd38      	pop	{r3, r4, r5, pc}

000d7e12 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7e12:	b538      	push	{r3, r4, r5, lr}
   d7e14:	4604      	mov	r4, r0
   d7e16:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7e18:	f7fd fce0 	bl	d57dc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7e1c:	28ff      	cmp	r0, #255	; 0xff
   d7e1e:	d010      	beq.n	d7e42 <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7e20:	2806      	cmp	r0, #6
   d7e22:	d804      	bhi.n	d7e2e <digitalWrite+0x1c>
   d7e24:	234d      	movs	r3, #77	; 0x4d
   d7e26:	fa23 f000 	lsr.w	r0, r3, r0
   d7e2a:	07c3      	lsls	r3, r0, #31
   d7e2c:	d409      	bmi.n	d7e42 <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7e2e:	4620      	mov	r0, r4
   d7e30:	f7ff ffa0 	bl	d7d74 <pinAvailable>
   d7e34:	b128      	cbz	r0, d7e42 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7e36:	4629      	mov	r1, r5
   d7e38:	4620      	mov	r0, r4
}
   d7e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7e3e:	f7fd bcd5 	b.w	d57ec <HAL_GPIO_Write>
}
   d7e42:	bd38      	pop	{r3, r4, r5, pc}

000d7e44 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7e44:	b510      	push	{r4, lr}
   d7e46:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7e48:	f7fd fcc8 	bl	d57dc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7e4c:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7e4e:	b2db      	uxtb	r3, r3
   d7e50:	2b01      	cmp	r3, #1
   d7e52:	d908      	bls.n	d7e66 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7e54:	4620      	mov	r0, r4
   d7e56:	f7ff ff8d 	bl	d7d74 <pinAvailable>
   d7e5a:	b120      	cbz	r0, d7e66 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7e5c:	4620      	mov	r0, r4
}
   d7e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7e62:	f7fd bccb 	b.w	d57fc <HAL_GPIO_Read>
}
   d7e66:	2000      	movs	r0, #0
   d7e68:	bd10      	pop	{r4, pc}

000d7e6a <__tcf_0>:
}
#endif

TwoWire& __fetch_global_Wire()
{
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7e6a:	4770      	bx	lr

000d7e6c <_Z17acquireWireBufferv>:
{
   d7e6c:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7e6e:	2300      	movs	r3, #0
   d7e70:	2520      	movs	r5, #32
   d7e72:	8043      	strh	r3, [r0, #2]
   d7e74:	2314      	movs	r3, #20
{
   d7e76:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7e78:	8003      	strh	r3, [r0, #0]
   d7e7a:	6085      	str	r5, [r0, #8]
   d7e7c:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7e7e:	4906      	ldr	r1, [pc, #24]	; (d7e98 <_Z17acquireWireBufferv+0x2c>)
   d7e80:	4628      	mov	r0, r5
   d7e82:	f000 f833 	bl	d7eec <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7e86:	4904      	ldr	r1, [pc, #16]	; (d7e98 <_Z17acquireWireBufferv+0x2c>)
	};
   d7e88:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7e8a:	4628      	mov	r0, r5
   d7e8c:	f000 f82e 	bl	d7eec <_ZnajRKSt9nothrow_t>
	};
   d7e90:	60e0      	str	r0, [r4, #12]
}
   d7e92:	4620      	mov	r0, r4
   d7e94:	bd38      	pop	{r3, r4, r5, pc}
   d7e96:	bf00      	nop
   d7e98:	000d8b50 	.word	0x000d8b50

000d7e9c <_Z19__fetch_global_Wirev>:
{
   d7e9c:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7e9e:	4d0e      	ldr	r5, [pc, #56]	; (d7ed8 <_Z19__fetch_global_Wirev+0x3c>)
   d7ea0:	7829      	ldrb	r1, [r5, #0]
   d7ea2:	f3bf 8f5b 	dmb	ish
   d7ea6:	f011 0401 	ands.w	r4, r1, #1
{
   d7eaa:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7eac:	d111      	bne.n	d7ed2 <_Z19__fetch_global_Wirev+0x36>
   d7eae:	4628      	mov	r0, r5
   d7eb0:	f7fc f900 	bl	d40b4 <__cxa_guard_acquire>
   d7eb4:	b168      	cbz	r0, d7ed2 <_Z19__fetch_global_Wirev+0x36>
   d7eb6:	a801      	add	r0, sp, #4
   d7eb8:	f7ff ffd8 	bl	d7e6c <_Z17acquireWireBufferv>
   d7ebc:	aa01      	add	r2, sp, #4
   d7ebe:	4621      	mov	r1, r4
   d7ec0:	4806      	ldr	r0, [pc, #24]	; (d7edc <_Z19__fetch_global_Wirev+0x40>)
   d7ec2:	f7fd ffe3 	bl	d5e8c <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7ec6:	4628      	mov	r0, r5
   d7ec8:	f7fc f8f9 	bl	d40be <__cxa_guard_release>
   d7ecc:	4804      	ldr	r0, [pc, #16]	; (d7ee0 <_Z19__fetch_global_Wirev+0x44>)
   d7ece:	f000 f835 	bl	d7f3c <atexit>
	return wire;
}
   d7ed2:	4802      	ldr	r0, [pc, #8]	; (d7edc <_Z19__fetch_global_Wirev+0x40>)
   d7ed4:	b007      	add	sp, #28
   d7ed6:	bd30      	pop	{r4, r5, pc}
   d7ed8:	2003e740 	.word	0x2003e740
   d7edc:	2003e744 	.word	0x2003e744
   d7ee0:	000d7e6b 	.word	0x000d7e6b

000d7ee4 <_ZdlPvj>:
   d7ee4:	f7fc b8d9 	b.w	d409a <_ZdlPv>

000d7ee8 <_ZnwjRKSt9nothrow_t>:
   d7ee8:	f7fc b8d3 	b.w	d4092 <_Znwj>

000d7eec <_ZnajRKSt9nothrow_t>:
   d7eec:	f7fc b8d3 	b.w	d4096 <_Znaj>

000d7ef0 <asctime_r>:
   d7ef0:	b510      	push	{r4, lr}
   d7ef2:	460c      	mov	r4, r1
   d7ef4:	6941      	ldr	r1, [r0, #20]
   d7ef6:	6903      	ldr	r3, [r0, #16]
   d7ef8:	6982      	ldr	r2, [r0, #24]
   d7efa:	b086      	sub	sp, #24
   d7efc:	f201 716c 	addw	r1, r1, #1900	; 0x76c
   d7f00:	9104      	str	r1, [sp, #16]
   d7f02:	6801      	ldr	r1, [r0, #0]
   d7f04:	9103      	str	r1, [sp, #12]
   d7f06:	6841      	ldr	r1, [r0, #4]
   d7f08:	9102      	str	r1, [sp, #8]
   d7f0a:	6881      	ldr	r1, [r0, #8]
   d7f0c:	9101      	str	r1, [sp, #4]
   d7f0e:	68c1      	ldr	r1, [r0, #12]
   d7f10:	9100      	str	r1, [sp, #0]
   d7f12:	4907      	ldr	r1, [pc, #28]	; (d7f30 <asctime_r+0x40>)
   d7f14:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   d7f18:	440b      	add	r3, r1
   d7f1a:	4906      	ldr	r1, [pc, #24]	; (d7f34 <asctime_r+0x44>)
   d7f1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   d7f20:	440a      	add	r2, r1
   d7f22:	4620      	mov	r0, r4
   d7f24:	4904      	ldr	r1, [pc, #16]	; (d7f38 <asctime_r+0x48>)
   d7f26:	f7fd fe95 	bl	d5c54 <siprintf>
   d7f2a:	4620      	mov	r0, r4
   d7f2c:	b006      	add	sp, #24
   d7f2e:	bd10      	pop	{r4, pc}
   d7f30:	000d8b86 	.word	0x000d8b86
   d7f34:	000d8b71 	.word	0x000d8b71
   d7f38:	000d8b51 	.word	0x000d8b51

000d7f3c <atexit>:
   d7f3c:	2300      	movs	r3, #0
   d7f3e:	4601      	mov	r1, r0
   d7f40:	461a      	mov	r2, r3
   d7f42:	4618      	mov	r0, r3
   d7f44:	f000 b956 	b.w	d81f4 <__register_exitproc>

000d7f48 <memcpy>:
   d7f48:	440a      	add	r2, r1
   d7f4a:	4291      	cmp	r1, r2
   d7f4c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
   d7f50:	d100      	bne.n	d7f54 <memcpy+0xc>
   d7f52:	4770      	bx	lr
   d7f54:	b510      	push	{r4, lr}
   d7f56:	f811 4b01 	ldrb.w	r4, [r1], #1
   d7f5a:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7f5e:	4291      	cmp	r1, r2
   d7f60:	d1f9      	bne.n	d7f56 <memcpy+0xe>
   d7f62:	bd10      	pop	{r4, pc}

000d7f64 <memmove>:
   d7f64:	4288      	cmp	r0, r1
   d7f66:	b510      	push	{r4, lr}
   d7f68:	eb01 0402 	add.w	r4, r1, r2
   d7f6c:	d902      	bls.n	d7f74 <memmove+0x10>
   d7f6e:	4284      	cmp	r4, r0
   d7f70:	4623      	mov	r3, r4
   d7f72:	d807      	bhi.n	d7f84 <memmove+0x20>
   d7f74:	1e43      	subs	r3, r0, #1
   d7f76:	42a1      	cmp	r1, r4
   d7f78:	d008      	beq.n	d7f8c <memmove+0x28>
   d7f7a:	f811 2b01 	ldrb.w	r2, [r1], #1
   d7f7e:	f803 2f01 	strb.w	r2, [r3, #1]!
   d7f82:	e7f8      	b.n	d7f76 <memmove+0x12>
   d7f84:	4402      	add	r2, r0
   d7f86:	4601      	mov	r1, r0
   d7f88:	428a      	cmp	r2, r1
   d7f8a:	d100      	bne.n	d7f8e <memmove+0x2a>
   d7f8c:	bd10      	pop	{r4, pc}
   d7f8e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   d7f92:	f802 4d01 	strb.w	r4, [r2, #-1]!
   d7f96:	e7f7      	b.n	d7f88 <memmove+0x24>

000d7f98 <memset>:
   d7f98:	4402      	add	r2, r0
   d7f9a:	4603      	mov	r3, r0
   d7f9c:	4293      	cmp	r3, r2
   d7f9e:	d100      	bne.n	d7fa2 <memset+0xa>
   d7fa0:	4770      	bx	lr
   d7fa2:	f803 1b01 	strb.w	r1, [r3], #1
   d7fa6:	e7f9      	b.n	d7f9c <memset+0x4>

000d7fa8 <srand>:
   d7fa8:	b538      	push	{r3, r4, r5, lr}
   d7faa:	4b0d      	ldr	r3, [pc, #52]	; (d7fe0 <srand+0x38>)
   d7fac:	681d      	ldr	r5, [r3, #0]
   d7fae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7fb0:	4604      	mov	r4, r0
   d7fb2:	b97b      	cbnz	r3, d7fd4 <srand+0x2c>
   d7fb4:	2018      	movs	r0, #24
   d7fb6:	f7fd fe35 	bl	d5c24 <malloc>
   d7fba:	4a0a      	ldr	r2, [pc, #40]	; (d7fe4 <srand+0x3c>)
   d7fbc:	4b0a      	ldr	r3, [pc, #40]	; (d7fe8 <srand+0x40>)
   d7fbe:	63a8      	str	r0, [r5, #56]	; 0x38
   d7fc0:	e9c0 2300 	strd	r2, r3, [r0]
   d7fc4:	4b09      	ldr	r3, [pc, #36]	; (d7fec <srand+0x44>)
   d7fc6:	6083      	str	r3, [r0, #8]
   d7fc8:	230b      	movs	r3, #11
   d7fca:	8183      	strh	r3, [r0, #12]
   d7fcc:	2201      	movs	r2, #1
   d7fce:	2300      	movs	r3, #0
   d7fd0:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d7fd4:	6bab      	ldr	r3, [r5, #56]	; 0x38
   d7fd6:	2200      	movs	r2, #0
   d7fd8:	611c      	str	r4, [r3, #16]
   d7fda:	615a      	str	r2, [r3, #20]
   d7fdc:	bd38      	pop	{r3, r4, r5, pc}
   d7fde:	bf00      	nop
   d7fe0:	2003e434 	.word	0x2003e434
   d7fe4:	abcd330e 	.word	0xabcd330e
   d7fe8:	e66d1234 	.word	0xe66d1234
   d7fec:	0005deec 	.word	0x0005deec

000d7ff0 <strchr>:
   d7ff0:	b2c9      	uxtb	r1, r1
   d7ff2:	4603      	mov	r3, r0
   d7ff4:	f810 2b01 	ldrb.w	r2, [r0], #1
   d7ff8:	b11a      	cbz	r2, d8002 <strchr+0x12>
   d7ffa:	428a      	cmp	r2, r1
   d7ffc:	d1f9      	bne.n	d7ff2 <strchr+0x2>
   d7ffe:	4618      	mov	r0, r3
   d8000:	4770      	bx	lr
   d8002:	2900      	cmp	r1, #0
   d8004:	bf18      	it	ne
   d8006:	2300      	movne	r3, #0
   d8008:	e7f9      	b.n	d7ffe <strchr+0xe>

000d800a <strchrnul>:
   d800a:	b510      	push	{r4, lr}
   d800c:	4604      	mov	r4, r0
   d800e:	f7ff ffef 	bl	d7ff0 <strchr>
   d8012:	b918      	cbnz	r0, d801c <strchrnul+0x12>
   d8014:	4620      	mov	r0, r4
   d8016:	f000 f814 	bl	d8042 <strlen>
   d801a:	4420      	add	r0, r4
   d801c:	bd10      	pop	{r4, pc}

000d801e <strcmp>:
   d801e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d8022:	f811 3b01 	ldrb.w	r3, [r1], #1
   d8026:	2a01      	cmp	r2, #1
   d8028:	bf28      	it	cs
   d802a:	429a      	cmpcs	r2, r3
   d802c:	d0f7      	beq.n	d801e <strcmp>
   d802e:	1ad0      	subs	r0, r2, r3
   d8030:	4770      	bx	lr

000d8032 <strcpy>:
   d8032:	4603      	mov	r3, r0
   d8034:	f811 2b01 	ldrb.w	r2, [r1], #1
   d8038:	f803 2b01 	strb.w	r2, [r3], #1
   d803c:	2a00      	cmp	r2, #0
   d803e:	d1f9      	bne.n	d8034 <strcpy+0x2>
   d8040:	4770      	bx	lr

000d8042 <strlen>:
   d8042:	4603      	mov	r3, r0
   d8044:	f813 2b01 	ldrb.w	r2, [r3], #1
   d8048:	2a00      	cmp	r2, #0
   d804a:	d1fb      	bne.n	d8044 <strlen+0x2>
   d804c:	1a18      	subs	r0, r3, r0
   d804e:	3801      	subs	r0, #1
   d8050:	4770      	bx	lr

000d8052 <strncat>:
   d8052:	b530      	push	{r4, r5, lr}
   d8054:	4604      	mov	r4, r0
   d8056:	7825      	ldrb	r5, [r4, #0]
   d8058:	4623      	mov	r3, r4
   d805a:	3401      	adds	r4, #1
   d805c:	2d00      	cmp	r5, #0
   d805e:	d1fa      	bne.n	d8056 <strncat+0x4>
   d8060:	3a01      	subs	r2, #1
   d8062:	d304      	bcc.n	d806e <strncat+0x1c>
   d8064:	f811 4b01 	ldrb.w	r4, [r1], #1
   d8068:	f803 4b01 	strb.w	r4, [r3], #1
   d806c:	b904      	cbnz	r4, d8070 <strncat+0x1e>
   d806e:	bd30      	pop	{r4, r5, pc}
   d8070:	2a00      	cmp	r2, #0
   d8072:	d1f5      	bne.n	d8060 <strncat+0xe>
   d8074:	701a      	strb	r2, [r3, #0]
   d8076:	e7f3      	b.n	d8060 <strncat+0xe>

000d8078 <strncmp>:
   d8078:	b510      	push	{r4, lr}
   d807a:	b16a      	cbz	r2, d8098 <strncmp+0x20>
   d807c:	3901      	subs	r1, #1
   d807e:	1884      	adds	r4, r0, r2
   d8080:	f810 3b01 	ldrb.w	r3, [r0], #1
   d8084:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d8088:	4293      	cmp	r3, r2
   d808a:	d103      	bne.n	d8094 <strncmp+0x1c>
   d808c:	42a0      	cmp	r0, r4
   d808e:	d001      	beq.n	d8094 <strncmp+0x1c>
   d8090:	2b00      	cmp	r3, #0
   d8092:	d1f5      	bne.n	d8080 <strncmp+0x8>
   d8094:	1a98      	subs	r0, r3, r2
   d8096:	bd10      	pop	{r4, pc}
   d8098:	4610      	mov	r0, r2
   d809a:	e7fc      	b.n	d8096 <strncmp+0x1e>

000d809c <strncpy>:
   d809c:	b510      	push	{r4, lr}
   d809e:	3901      	subs	r1, #1
   d80a0:	4603      	mov	r3, r0
   d80a2:	b132      	cbz	r2, d80b2 <strncpy+0x16>
   d80a4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d80a8:	f803 4b01 	strb.w	r4, [r3], #1
   d80ac:	3a01      	subs	r2, #1
   d80ae:	2c00      	cmp	r4, #0
   d80b0:	d1f7      	bne.n	d80a2 <strncpy+0x6>
   d80b2:	441a      	add	r2, r3
   d80b4:	2100      	movs	r1, #0
   d80b6:	4293      	cmp	r3, r2
   d80b8:	d100      	bne.n	d80bc <strncpy+0x20>
   d80ba:	bd10      	pop	{r4, pc}
   d80bc:	f803 1b01 	strb.w	r1, [r3], #1
   d80c0:	e7f9      	b.n	d80b6 <strncpy+0x1a>

000d80c2 <strrchr>:
   d80c2:	b538      	push	{r3, r4, r5, lr}
   d80c4:	4603      	mov	r3, r0
   d80c6:	460c      	mov	r4, r1
   d80c8:	b969      	cbnz	r1, d80e6 <strrchr+0x24>
   d80ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d80ce:	f7ff bf8f 	b.w	d7ff0 <strchr>
   d80d2:	1c43      	adds	r3, r0, #1
   d80d4:	4605      	mov	r5, r0
   d80d6:	4621      	mov	r1, r4
   d80d8:	4618      	mov	r0, r3
   d80da:	f7ff ff89 	bl	d7ff0 <strchr>
   d80de:	2800      	cmp	r0, #0
   d80e0:	d1f7      	bne.n	d80d2 <strrchr+0x10>
   d80e2:	4628      	mov	r0, r5
   d80e4:	bd38      	pop	{r3, r4, r5, pc}
   d80e6:	2500      	movs	r5, #0
   d80e8:	e7f5      	b.n	d80d6 <strrchr+0x14>
	...

000d80ec <_strtol_l.isra.0>:
   d80ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d80f0:	4e3a      	ldr	r6, [pc, #232]	; (d81dc <_strtol_l.isra.0+0xf0>)
   d80f2:	4686      	mov	lr, r0
   d80f4:	468c      	mov	ip, r1
   d80f6:	4660      	mov	r0, ip
   d80f8:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d80fc:	5da5      	ldrb	r5, [r4, r6]
   d80fe:	f015 0508 	ands.w	r5, r5, #8
   d8102:	d1f8      	bne.n	d80f6 <_strtol_l.isra.0+0xa>
   d8104:	2c2d      	cmp	r4, #45	; 0x2d
   d8106:	d133      	bne.n	d8170 <_strtol_l.isra.0+0x84>
   d8108:	f89c 4000 	ldrb.w	r4, [ip]
   d810c:	f04f 0801 	mov.w	r8, #1
   d8110:	f100 0c02 	add.w	ip, r0, #2
   d8114:	2b00      	cmp	r3, #0
   d8116:	d05c      	beq.n	d81d2 <_strtol_l.isra.0+0xe6>
   d8118:	2b10      	cmp	r3, #16
   d811a:	d10c      	bne.n	d8136 <_strtol_l.isra.0+0x4a>
   d811c:	2c30      	cmp	r4, #48	; 0x30
   d811e:	d10a      	bne.n	d8136 <_strtol_l.isra.0+0x4a>
   d8120:	f89c 0000 	ldrb.w	r0, [ip]
   d8124:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   d8128:	2858      	cmp	r0, #88	; 0x58
   d812a:	d14d      	bne.n	d81c8 <_strtol_l.isra.0+0xdc>
   d812c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   d8130:	2310      	movs	r3, #16
   d8132:	f10c 0c02 	add.w	ip, ip, #2
   d8136:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   d813a:	3f01      	subs	r7, #1
   d813c:	2600      	movs	r6, #0
   d813e:	fbb7 f9f3 	udiv	r9, r7, r3
   d8142:	4630      	mov	r0, r6
   d8144:	fb03 7a19 	mls	sl, r3, r9, r7
   d8148:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   d814c:	2d09      	cmp	r5, #9
   d814e:	d818      	bhi.n	d8182 <_strtol_l.isra.0+0x96>
   d8150:	462c      	mov	r4, r5
   d8152:	42a3      	cmp	r3, r4
   d8154:	dd24      	ble.n	d81a0 <_strtol_l.isra.0+0xb4>
   d8156:	1c75      	adds	r5, r6, #1
   d8158:	d007      	beq.n	d816a <_strtol_l.isra.0+0x7e>
   d815a:	4581      	cmp	r9, r0
   d815c:	d31d      	bcc.n	d819a <_strtol_l.isra.0+0xae>
   d815e:	d101      	bne.n	d8164 <_strtol_l.isra.0+0x78>
   d8160:	45a2      	cmp	sl, r4
   d8162:	db1a      	blt.n	d819a <_strtol_l.isra.0+0xae>
   d8164:	fb00 4003 	mla	r0, r0, r3, r4
   d8168:	2601      	movs	r6, #1
   d816a:	f81c 4b01 	ldrb.w	r4, [ip], #1
   d816e:	e7eb      	b.n	d8148 <_strtol_l.isra.0+0x5c>
   d8170:	2c2b      	cmp	r4, #43	; 0x2b
   d8172:	bf08      	it	eq
   d8174:	f89c 4000 	ldrbeq.w	r4, [ip]
   d8178:	46a8      	mov	r8, r5
   d817a:	bf08      	it	eq
   d817c:	f100 0c02 	addeq.w	ip, r0, #2
   d8180:	e7c8      	b.n	d8114 <_strtol_l.isra.0+0x28>
   d8182:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   d8186:	2d19      	cmp	r5, #25
   d8188:	d801      	bhi.n	d818e <_strtol_l.isra.0+0xa2>
   d818a:	3c37      	subs	r4, #55	; 0x37
   d818c:	e7e1      	b.n	d8152 <_strtol_l.isra.0+0x66>
   d818e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   d8192:	2d19      	cmp	r5, #25
   d8194:	d804      	bhi.n	d81a0 <_strtol_l.isra.0+0xb4>
   d8196:	3c57      	subs	r4, #87	; 0x57
   d8198:	e7db      	b.n	d8152 <_strtol_l.isra.0+0x66>
   d819a:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d819e:	e7e4      	b.n	d816a <_strtol_l.isra.0+0x7e>
   d81a0:	1c73      	adds	r3, r6, #1
   d81a2:	d106      	bne.n	d81b2 <_strtol_l.isra.0+0xc6>
   d81a4:	2322      	movs	r3, #34	; 0x22
   d81a6:	f8ce 3000 	str.w	r3, [lr]
   d81aa:	4638      	mov	r0, r7
   d81ac:	b942      	cbnz	r2, d81c0 <_strtol_l.isra.0+0xd4>
   d81ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d81b2:	f1b8 0f00 	cmp.w	r8, #0
   d81b6:	d000      	beq.n	d81ba <_strtol_l.isra.0+0xce>
   d81b8:	4240      	negs	r0, r0
   d81ba:	2a00      	cmp	r2, #0
   d81bc:	d0f7      	beq.n	d81ae <_strtol_l.isra.0+0xc2>
   d81be:	b10e      	cbz	r6, d81c4 <_strtol_l.isra.0+0xd8>
   d81c0:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
   d81c4:	6011      	str	r1, [r2, #0]
   d81c6:	e7f2      	b.n	d81ae <_strtol_l.isra.0+0xc2>
   d81c8:	2430      	movs	r4, #48	; 0x30
   d81ca:	2b00      	cmp	r3, #0
   d81cc:	d1b3      	bne.n	d8136 <_strtol_l.isra.0+0x4a>
   d81ce:	2308      	movs	r3, #8
   d81d0:	e7b1      	b.n	d8136 <_strtol_l.isra.0+0x4a>
   d81d2:	2c30      	cmp	r4, #48	; 0x30
   d81d4:	d0a4      	beq.n	d8120 <_strtol_l.isra.0+0x34>
   d81d6:	230a      	movs	r3, #10
   d81d8:	e7ad      	b.n	d8136 <_strtol_l.isra.0+0x4a>
   d81da:	bf00      	nop
   d81dc:	000d8bab 	.word	0x000d8bab

000d81e0 <strtol>:
   d81e0:	4613      	mov	r3, r2
   d81e2:	460a      	mov	r2, r1
   d81e4:	4601      	mov	r1, r0
   d81e6:	4802      	ldr	r0, [pc, #8]	; (d81f0 <strtol+0x10>)
   d81e8:	6800      	ldr	r0, [r0, #0]
   d81ea:	f7ff bf7f 	b.w	d80ec <_strtol_l.isra.0>
   d81ee:	bf00      	nop
   d81f0:	2003e434 	.word	0x2003e434

000d81f4 <__register_exitproc>:
   d81f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d81f8:	f8df 80b8 	ldr.w	r8, [pc, #184]	; d82b4 <__register_exitproc+0xc0>
   d81fc:	4606      	mov	r6, r0
   d81fe:	f8d8 0000 	ldr.w	r0, [r8]
   d8202:	461f      	mov	r7, r3
   d8204:	460d      	mov	r5, r1
   d8206:	4691      	mov	r9, r2
   d8208:	f000 f856 	bl	d82b8 <__retarget_lock_acquire_recursive>
   d820c:	4b25      	ldr	r3, [pc, #148]	; (d82a4 <__register_exitproc+0xb0>)
   d820e:	681c      	ldr	r4, [r3, #0]
   d8210:	b934      	cbnz	r4, d8220 <__register_exitproc+0x2c>
   d8212:	4c25      	ldr	r4, [pc, #148]	; (d82a8 <__register_exitproc+0xb4>)
   d8214:	601c      	str	r4, [r3, #0]
   d8216:	4b25      	ldr	r3, [pc, #148]	; (d82ac <__register_exitproc+0xb8>)
   d8218:	b113      	cbz	r3, d8220 <__register_exitproc+0x2c>
   d821a:	681b      	ldr	r3, [r3, #0]
   d821c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
   d8220:	6863      	ldr	r3, [r4, #4]
   d8222:	2b1f      	cmp	r3, #31
   d8224:	dd07      	ble.n	d8236 <__register_exitproc+0x42>
   d8226:	f8d8 0000 	ldr.w	r0, [r8]
   d822a:	f000 f847 	bl	d82bc <__retarget_lock_release_recursive>
   d822e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d8232:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   d8236:	b34e      	cbz	r6, d828c <__register_exitproc+0x98>
   d8238:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
   d823c:	b988      	cbnz	r0, d8262 <__register_exitproc+0x6e>
   d823e:	4b1c      	ldr	r3, [pc, #112]	; (d82b0 <__register_exitproc+0xbc>)
   d8240:	b923      	cbnz	r3, d824c <__register_exitproc+0x58>
   d8242:	f8d8 0000 	ldr.w	r0, [r8]
   d8246:	f000 f838 	bl	d82ba <__retarget_lock_release>
   d824a:	e7f0      	b.n	d822e <__register_exitproc+0x3a>
   d824c:	f44f 7084 	mov.w	r0, #264	; 0x108
   d8250:	f7fd fce8 	bl	d5c24 <malloc>
   d8254:	2800      	cmp	r0, #0
   d8256:	d0f4      	beq.n	d8242 <__register_exitproc+0x4e>
   d8258:	2300      	movs	r3, #0
   d825a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
   d825e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
   d8262:	6863      	ldr	r3, [r4, #4]
   d8264:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
   d8268:	2201      	movs	r2, #1
   d826a:	409a      	lsls	r2, r3
   d826c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
   d8270:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
   d8274:	4313      	orrs	r3, r2
   d8276:	2e02      	cmp	r6, #2
   d8278:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
   d827c:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
   d8280:	bf02      	ittt	eq
   d8282:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
   d8286:	431a      	orreq	r2, r3
   d8288:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
   d828c:	6863      	ldr	r3, [r4, #4]
   d828e:	f8d8 0000 	ldr.w	r0, [r8]
   d8292:	1c5a      	adds	r2, r3, #1
   d8294:	3302      	adds	r3, #2
   d8296:	6062      	str	r2, [r4, #4]
   d8298:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
   d829c:	f000 f80e 	bl	d82bc <__retarget_lock_release_recursive>
   d82a0:	2000      	movs	r0, #0
   d82a2:	e7c6      	b.n	d8232 <__register_exitproc+0x3e>
   d82a4:	2003e7e4 	.word	0x2003e7e4
   d82a8:	2003e758 	.word	0x2003e758
   d82ac:	00000000 	.word	0x00000000
   d82b0:	000d5c25 	.word	0x000d5c25
   d82b4:	2003e498 	.word	0x2003e498

000d82b8 <__retarget_lock_acquire_recursive>:
   d82b8:	4770      	bx	lr

000d82ba <__retarget_lock_release>:
   d82ba:	4770      	bx	lr

000d82bc <__retarget_lock_release_recursive>:
   d82bc:	4770      	bx	lr

000d82be <link_code_end>:
	...

000d82c0 <dynalib_user>:
   d82c0:	401d 000d 4059 000d 4081 000d 4085 000d     .@..Y@...@...@..
   d82d0:	0000 0000 3269 2063 6564 6976 6563 7328     ....i2c device(s
   d82e0:	2029 6f66 6e75 2064 7461 203a 2500 3230     ) found at: .%02
   d82f0:	2058 5500 6b6e 6f6e 6e77 6520 7272 726f     X .Unknown error
   d8300:	6120 2074 6461 7264 7365 2073 3025 5832      at address %02X
   d8310:	4e00 206f 3249 2043 6564 6976 6563 2073     .No I2C devices 
   d8320:	6f66 6e75 0064 6944 7473 6e61 6563 6d20     found.Distance m
   d8330:	6165 7573 6572 2064 203d 6925 2500 2c64     easured = %i.%d,
   d8340:	6425 252c 0064 6f6e 7320 6d61 6c70 0065     %d,%d.no sample.
   d8350:	6544 6976 6563 2073 6e6f 6c20 6e69 2065     Devices on line 
   d8360:	6977 6874 7020 776f 7265 5000 776f 7265     with power.Power
   d8370:	6e69 2067 6f64 6e77 7420 6568 7320 6e65     ing down the sen
   d8380:	6f73 2072 6f62 7261 0064 6544 6976 6563     sor board.Device
   d8390:	2073 6e6f 6c2d 6e69 2065 6977 6874 756f     s on-line withou
   d83a0:	2074 6f70 6577 0072 4241 3831 3530 6420     t power.AB1805 d
   d83b0:	7465 6365 6574 0064 7242 6e69 6967 676e     etected.Bringing
   d83c0:	7320 6e65 6f73 7372 6220 6361 206b 6e6f      sensors back on
   d83d0:	6c2d 6e69 0065 6544 6976 6563 2073 6e6f     -line.Devices on
   d83e0:	6c2d 6e69 2065 6977 6874 7020 776f 7265     -line with power
   d83f0:	7220 7365 6f74 6572 0064 494c 3353 4844      restored.LIS3DH
   d8400:	4920 696e 6974 6c61 7a69 6465 7320 6375      Initialized suc
   d8410:	6563 7373 7566 6c6c 0079 494c 3353 4844     cessfully.LIS3DH
   d8420:	6620 6961 656c 2064 6e69 7469 6169 696c      failed initiali
   d8430:	617a 6974 6e6f 5400 464f 5320 6e65 6f73     zation.TOF Senso
   d8440:	2072 6e49 7469 6169 696c 657a 2064 7573     r Initialized su
   d8450:	6363 7365 6673 6c75 796c 5400 464f 5320     ccessfully.TOF S
   d8460:	6e65 6f73 2072 6166 6c69 6465 6920 696e     ensor failed ini
   d8470:	6974 6c61 7a69 7461 6f69 006e 6f50 6577     tialization.Powe
   d8480:	2072 6e6f 7420 7365 2074 6f63 706d 656c     r on test comple
   d8490:	6574 2d20 6d20 6165 7573 6972 676e 7220     te - measuring r
   d84a0:	7365 6d75 6465 5000 776f 7265 6f20 206e     esumed.Power on 
   d84b0:	6574 7473 6620 6961 656c 2064 202d 7473     test failed - st
   d84c0:	706f 6970 676e 4600 4152 204d 6f4d 7564     opping.FRAM Modu
   d84d0:	656c 6920 696e 6974 6c61 7a69 6e69 2067     le initializing 
   d84e0:	6576 7372 6f69 206e 6925 4600 4152 204d     version %i.FRAM 
   d84f0:	6574 7473 6620 6961 656c 2c64 6520 7078     test failed, exp
   d8500:	6365 6574 2064 6925 6120 646e 6620 756f     ected %i and fou
   d8510:	646e 2520 0069 5246 4d41 4d20 646f 6c75     nd %i.FRAM Modul
   d8520:	2065 6f6c 6461 6465 7320 6375 6563 7373     e loaded success
   d8530:	7566 6c6c 0079 4241 3831 3530 4620 6961     fully.AB1805 Fai
   d8540:	656c 2064 6f74 4920 696e 6974 6c61 7a69     led to Initializ
   d8550:	0065 6e49 7469 6169 696c 617a 6974 6e6f     e.Initialization
   d8560:	4320 6d6f 6c70 7465 2065 6c61 206c 6564      Complete all de
   d8570:	6976 6563 2073 6e6f 6c2d 6e69 0065 7453     vices on-line.St
   d8580:	7261 6974 676e 6120 7220 6e75 696e 676e     arting a running
   d8590:	7320 6d61 6c70 2065 7572 006e 2a2a 2a2a      sample run.****
   d85a0:	2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a 2a2a     ****************
   d85b0:	2a2a 2a2a 2a2a 2a2a 002a 7245 6f72 7372     *********.Errors
   d85c0:	6920 206e 6e49 7469 6169 696c 617a 6974      in Initializati
   d85d0:	6e6f 2d20 5320 6f74 7070 6e69 0067 0000     on - Stopping...

000d85e0 <_ZTVN5spark10LogHandlerE>:
	...
   d85f0:	40a1 000d 40c5 000d                         .@...@..

000d85f8 <_ZTVN5spark16SerialLogHandlerE>:
	...
   d8600:	40f9 000d 412d 000d 7059 000d 40c7 000d     .@..-A..Yp...@..

000d8610 <_ZTV8MB85RC64>:
	...
   d8618:	40d1 000d 40e5 000d 5565 000d 55fb 000d     .@...@..eU...U..
   d8628:	567d 000d                                   }V..

000d862c <_ZL17FRAMversionNumber>:
   d862c:	002a 0000 6564 6976 6563 6e20 746f 6620     *...device not f
   d863c:	756f 646e 0000 0000                         ound....

000d8644 <_ZTV9LIS3DHI2C>:
	...
   d864c:	4795 000d 4797 000d 4895 000d 47ed 000d     .G...G...H...G..
   d865c:	47a5 000d                                   .G..

000d8660 <_ZTV7VL53L1X>:
	...
   d8668:	4a6f 000d 4a4f 000d 4a39 000d 49f5 000d     oJ..OJ..9J...I..
   d8678:	4a2b 000d 4a11 000d 49f7 000d               +J...J...I..

000d8684 <_ZL29VL51L1X_DEFAULT_CONFIGURATION>:
   d8684:	0100 0101 0002 0802 0800 0110 0001 0000     ................
   d8694:	ff00 0f00 0000 0000 2000 000b 0200 210a     ......... .....!
   d86a4:	0000 0005 0000 c800 0000 ff38 0001 0008     ..........8.....
   d86b4:	0100 0fdb f101 010d 0068 0880 00b8 0000     ........h.......
   d86c4:	0f00 0089 0000 0000 0000 0f01 0e0d 000e     ................
   d86d4:	0200 ffc7 009b 0000 0001 6600 6961 656c     ...........faile
   d86e4:	2064 6f74 7220 6165 2064 6572 4167 6464     d to read regAdd
   d86f4:	3d72 3025 7832 6320 756f 746e 253d 0075     r=%02x count=%u.
   d8704:	6166 6c69 6465 7420 206f 6572 6461 7220     failed to read r
   d8714:	6765 6441 7264 253d 3230 2078 7473 7461     egAddr=%02x stat
   d8724:	253d 0064 4f46 5455 6420 6469 6e20 746f     =%d.FOUT did not
   d8734:	6720 206f 4948 4847 6e00 746f 6420 7465      go HIGH.not det
   d8744:	6365 6574 0064 6166 6c69 6465 7420 206f     ected.failed to 
   d8754:	7277 7469 2065 6572 4167 6464 3d72 3025     write regAddr=%0
   d8764:	7832 7320 6174 3d74 6425 7300 7465 4457     2x stat=%d.setWD
   d8774:	2054 6425 7700 7461 6863 6f64 2067 6c63     T %d.watchdog cl
   d8784:	6165 6572 2064 5262 7365 6c75 3d74 6425     eared bResult=%d
   d8794:	7700 7461 6863 6f64 2067 6573 2074 6f66     .watchdog set fo
   d87a4:	7275 6553 7363 253d 2064 5262 7365 6c75     urSecs=%d bResul
   d87b4:	3d74 6425 5700 5441 4843 4f44 0047 4544     t=%d.WATCHDOG.DE
   d87c4:	5045 505f 574f 5245 445f 574f 004e 4f43     EP_POWER_DOWN.CO
   d87d4:	4e55 4454 574f 5f4e 4954 454d 0052 4c41     UNTDOWN_TIMER.AL
   d87e4:	5241 004d 6166 6c69 7275 2065 6e69 7520     ARM.failure in u
   d87f4:	6470 7461 5765 6b61 5265 6165 6f73 206e     pdateWakeReason 
   d8804:	6425 7700 6b61 2065 6572 7361 6e6f 3d20     %d.wake reason =
   d8814:	2520 0073 3025 6434 252d 3230 2d64 3025      %s.%04d-%02d-%0
   d8824:	6432 2520 3230 3a64 3025 6432 253a 3230     2d %02d:%02d:%02
   d8834:	0064 6567 5274 6374 7341 6d54 2520 0073     d.getRtcAsTm %s.
   d8844:	6573 2074 7973 7473 6d65 6320 6f6c 6b63     set system clock
   d8854:	6620 6f72 206d 5452 2043 7325 6600 6961      from RTC %s.fai
   d8864:	656c 2064 6f74 6420 7465 6365 2074 4241     led to detect AB
   d8874:	3831 3530 6100 7070 612e 3162 3038 0035     1805.app.ab1805.

000d8884 <_ZTV6AB1805>:
	...
   d888c:	4d87 000d 4d89 000d 51eb 000d 5271 000d     .M...M...Q..qR..
   d889c:	7277 7469 4465 7461 2061 6166 6c69 6465     writeData failed
   d88ac:	6420 7275 6e69 2067 7265 7361 2065 7266      during erase fr
   d88bc:	6d61 6441 7264 253d 0075 0000               amAddr=%u...

000d88c8 <_ZTV6MB85RC>:
	...
   d88d0:	54b5 000d 54b7 000d 5565 000d 55fb 000d     .T...T..eU...U..
   d88e0:	567d 000d                                   }V..

000d88e4 <_ZTVN5spark13CellularClassE>:
	...
   d88ec:	5d7f 000d 5d75 000d 5d6b 000d 5d21 000d     .]..u]..k]..!]..
   d88fc:	5d5f 000d 5d53 000d 73b1 000d 73b9 000d     _]..S]...s...s..
   d890c:	5d47 000d 5d3f 000d 5d35 000d 5d2b 000d     G]..?]..5]..+]..
   d891c:	73e9 000d                                   .s..

000d8920 <_ZTVN5spark13EthernetClassE>:
	...
   d8928:	5e17 000d 5e0d 000d 5e03 000d 5df9 000d     .^...^...^...]..
   d8938:	5ded 000d 5de1 000d 73b1 000d 73b9 000d     .]...]...s...s..
   d8948:	5dd5 000d 5dcd 000d 5dc3 000d 5db9 000d     .]...]...]...]..
   d8958:	73e9 000d                                   .s..

000d895c <_ZTV7TwoWire>:
	...
   d8964:	5e35 000d 5e7f 000d 5e57 000d 5e37 000d     5^...^..W^..7^..
   d8974:	5e5f 000d 5e67 000d 5e6f 000d 5e77 000d     _^..g^..o^..w^..

000d8984 <_ZTV9IPAddress>:
	...
   d898c:	5f65 000d 5f55 000d 5f57 000d 2575 3430     e_..U_..W_..u%04
   d899c:	0078 6162 6475 5300 7265 6169 006c 6553     x.baud.Serial.Se
   d89ac:	6972 6c61 0031 534a 4e4f 7453 6572 6d61     rial1.JSONStream
   d89bc:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d89cc:	3130 7530 0020 205d 2c00 0020 2928 203a     010u .] ., .(): 
   d89dc:	2000 005b 6f63 6564 3d20 0020 6564 6174     . [.code = .deta
   d89ec:	6c69 2073 203d 0d00 000a 006d 0063 0066     ils = ....m.c.f.
   d89fc:	6e6c 6600 006e 0074 6f63 6564 6400 7465     ln.fn.t.code.det
   d8a0c:	6961 006c                                   ail.

000d8a10 <_ZTVN5spark16JSONStreamWriterE>:
	...
   d8a18:	6421 000d 6447 000d 6405 000d 6065 000d     !d..Gd...d..e`..

000d8a28 <_ZTVN5spark16StreamLogHandlerE>:
	...
   d8a30:	6875 000d 688d 000d 7059 000d 40c7 000d     uh...h..Yp...@..

000d8a40 <_ZTVN5spark20JSONStreamLogHandlerE>:
	...
   d8a48:	68a1 000d 68b5 000d 71fd 000d 640d 000d     .h...h...q...d..

000d8a58 <_ZTVN5spark24DefaultLogHandlerFactoryE>:
	...
   d8a60:	641f 000d 6455 000d 6f95 000d 640f 000d     .d..Ud...o...d..

000d8a70 <_ZTVN5spark26DefaultOutputStreamFactoryE>:
	...
   d8a78:	641d 000d 6463 000d 67bd 000d 6481 000d     .d..cd...g...d..

000d8a88 <_ZTVN5spark12NetworkClassE>:
	...
   d8a90:	7371 000d 737b 000d 7385 000d 738f 000d     qs..{s...s...s..
   d8aa0:	7399 000d 73a5 000d 73b1 000d 73b9 000d     .s...s...s...s..
   d8ab0:	73c1 000d 73cd 000d 73d5 000d 73df 000d     .s...s...s...s..
   d8ac0:	73e9 000d 005a 2b25 3330 3a64 3025 7532     .s..Z.%+03d:%02u
   d8ad0:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d8ae0:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d8af0 <_ZTV11USARTSerial>:
	...
   d8af8:	7a25 000d 7a93 000d 7a6b 000d 74d1 000d     %z...z..kz...t..
   d8b08:	7a3b 000d 7a57 000d 7a49 000d 7a65 000d     ;z..Wz..Iz..ez..
   d8b18:	7a27 000d 7a2d 000d                         'z..-z..

000d8b20 <_ZTV9USBSerial>:
	...
   d8b28:	7b33 000d 7b9b 000d 7b71 000d 74d1 000d     3{...{..q{...t..
   d8b38:	7b63 000d 7b35 000d 7b45 000d 7b95 000d     c{..5{..E{...{..
   d8b48:	7b55 000d 7b2d 000d                         U{..-{..

000d8b50 <_ZSt7nothrow>:
   d8b50:	2500 332e 2073 2e25 7333 3325 2064 2e25     .%.3s %.3s%3d %.
   d8b60:	6432 253a 322e 3a64 2e25 6432 2520 0a64     2d:%.2d:%.2d %d.
	...

000d8b71 <day_name.6145>:
   d8b71:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
   d8b81:	6972 6153                                    riSat

000d8b86 <mon_name.6146>:
   d8b86:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
   d8b96:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
   d8ba6:	4476 6365                                   vDec

000d8baa <_ctype_>:
   d8baa:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
   d8bba:	2020 2020 2020 2020 2020 2020 2020 2020                     
   d8bca:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
   d8bda:	0410 0404 0404 0404 0404 1004 1010 1010     ................
   d8bea:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
   d8bfa:	0101 0101 0101 0101 0101 0101 1010 1010     ................
   d8c0a:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
   d8c1a:	0202 0202 0202 0202 0202 0202 1010 1010     ................
   d8c2a:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

000d8cab <link_const_variable_data_end>:
	...

000d8cac <link_constructors_location>:
   d8cac:	000d4685 	.word	0x000d4685
   d8cb0:	000d54a5 	.word	0x000d54a5
   d8cb4:	000d5d11 	.word	0x000d5d11
   d8cb8:	000d5d89 	.word	0x000d5d89
   d8cbc:	000d5e21 	.word	0x000d5e21
   d8cc0:	000d7049 	.word	0x000d7049
   d8cc4:	000d74bd 	.word	0x000d74bd
   d8cc8:	000d75f1 	.word	0x000d75f1
   d8ccc:	000d77a5 	.word	0x000d77a5
   d8cd0:	000d7a11 	.word	0x000d7a11

000d8cd4 <link_constructors_end>:
	...
